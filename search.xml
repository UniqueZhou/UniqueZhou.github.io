<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>重绘，重排与性能优化</title>
      <link href="/passages/%E9%87%8D%E7%BB%98%EF%BC%8C%E9%87%8D%E6%8E%92%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/passages/%E9%87%8D%E7%BB%98%EF%BC%8C%E9%87%8D%E6%8E%92%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="一-什么是重绘与重排"><a href="#一-什么是重绘与重排" class="headerlink" title="一.什么是重绘与重排"></a>一.什么是重绘与重排</h3><p>浏览器下载完页面中的所有组件——HTML标记、JavaScript、CSS、图片之后会解析生成两个内部数据结构——DOM树和渲染树。</p><p>DOM树表示页面结构，渲染树表示DOM节点如何显示。DOM树中的每一个需要显示的节点在渲染树种至少存在一个对应的节点（隐藏的DOM元素disply值为none 在渲染树中没有对应的节点）。渲染树中的节点被称为“帧”或“盒”,符合CSS模型的定义，理解页面元素为一个具有填充，边距，边框和位置的盒子。一旦DOM和渲染树构建完成，浏览器就开始显示（绘制）页面元素。</p><p>当DOM的变化影响了元素的几何属性（宽或高），浏览器需要重新计算元素的几何属性，同样其他元素的几何属性和位置也会因此受到影响。浏览器会使渲染树中受到影响的部分失效，并重新构造渲染树。<strong>这个过程称为重排</strong>。完成重排后，浏览器会重新绘制受影响的部分到屏幕，<strong>该过程称为重绘</strong>。由于浏览器的流布局，对渲染树的计算通常只需要遍历一次就可以完成。但table及其内部元素除外，它可能需要多次计算才能确定好其在渲染树中节点的属性，通常要花3倍于同等元素的时间。这也是为什么我们要避免使用table做布局的一个原因。</p><p>并不是所有的DOM变化都会影响几何属性，比如改变一个元素的背景色并不会影响元素的宽和高，这种情况下只会发生重绘。</p><p>不管页面发生了重绘还是重排，它们都会影响性能</p><h3 id="二-怎样触发重排"><a href="#二-怎样触发重排" class="headerlink" title="二.怎样触发重排"></a>二.怎样触发重排</h3><p>页面布局和元素几何属性的改变就会导致重排<br>下列情况会发生重排</p><ul><li>页面初始渲染</li><li>添加/删除可见DOM元素</li><li>改变元素位置</li><li>改变元素尺寸（宽、高、内外边距、边框等）</li><li>改变元素内容（文本或图片等）</li><li>改变窗口尺寸</li></ul><p>不同的条件下发生重排的范围及程度会不同<br>某些情况甚至会重排整个页面，比如滑动滚动条</p><h3 id="三-浏览器优化"><a href="#三-浏览器优化" class="headerlink" title="三.浏览器优化"></a>三.浏览器优化</h3><p>例如：</p><p>假如我要用js修改某个div的样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div.style.left = <span class="string">'10px'</span>;</span><br><span class="line">div.style.top = <span class="string">'10px'</span>;</span><br><span class="line">div.style.width = <span class="string">'10px'</span>;</span><br><span class="line">div.style.height = <span class="string">'10px'</span>;</span><br></pre></td></tr></table></figure><p>我们修改了元素的left、top、width、height属性 ,满足我们发生重排的条件 ,理论上会发生4次重排 ,但是<strong>实际上只会发生1次重排</strong> ,因为我们现代的浏览器都有<strong>渲染队列</strong>的机制 ,当我改变了元素的一个样式会导致浏览器发生重排或重绘时 ,它会进入一个渲染队列 ,然后浏览器继续往下看，如果下面还有样式修改 ,那么同样入队 ,直到下面没有样式修改 ,浏览器会按照渲染队列批量执行来优化重排过程，一并修改样式 ,这样就把本该4次的重排优化为1次</p><p><strong><em>But</em></strong>,当我们写如下代码时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">div.style.left = <span class="string">'10px'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(div.offsetLeft);</span><br><span class="line"></span><br><span class="line">div.style.top = <span class="string">'10px'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(div.offsetTop);</span><br><span class="line"></span><br><span class="line">div.style.width = <span class="string">'20px'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(div.offsetWidth);</span><br><span class="line"></span><br><span class="line">div.style.height = <span class="string">'20px'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(div.offsetHeight);</span><br></pre></td></tr></table></figure><p>还是1次重排吗？</p><p>Obviously not! <strong>此时发生了4次重排！</strong></p><p>上文不是说浏览器有渲染队列优化机制吗？ 为什么会有4次？</p><p>这和offsetLeft/Top/Width/Height有关</p><blockquote><ul><li>offsetTop、offsetLeft、offsetWidth、offsetHeight</li><li>clientTop、clientLeft、clientWidth、clientHeight</li><li>scrollTop、scrollLeft、scrollWidth、scrollHeight</li><li>getComputedStyle()（IE中currentStyle）</li></ul><p>这些会强制刷新队列要求样式修改任务立刻执行 </p></blockquote><p>因为浏览器并不确定在下面的代码中是否还有修改同样的样式，为了获取到当前正确的的即时值不得不立刻执行渲染队列触发重排！！！</p><h3 id="四-重绘与重排性能优化"><a href="#四-重绘与重排性能优化" class="headerlink" title="四.重绘与重排性能优化"></a>四.重绘与重排性能优化</h3><h4 id="1-分离读写操作"><a href="#1-分离读写操作" class="headerlink" title="1.分离读写操作"></a>1.分离读写操作</h4><p>我们就可以对上面的代码进行优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">div.style.left = <span class="string">'10px'</span>;</span><br><span class="line">div.style.top = <span class="string">'10px'</span>;</span><br><span class="line">div.style.width = <span class="string">'20px'</span>;</span><br><span class="line">div.style.height = <span class="string">'20px'</span>;</span><br><span class="line"><span class="comment">//所有的读操作写在所有的写操作之后</span></span><br><span class="line"><span class="built_in">console</span>.log(div.offsetLeft);</span><br><span class="line"><span class="built_in">console</span>.log(div.offsetTop);</span><br><span class="line"><span class="built_in">console</span>.log(div.offsetWidth);</span><br><span class="line"><span class="built_in">console</span>.log(div.offsetHeight);</span><br></pre></td></tr></table></figure><p>这样就仅仅发生1次重排了！</p><h4 id="2-样式集中改变"><a href="#2-样式集中改变" class="headerlink" title="2.样式集中改变"></a>2.样式集中改变</h4><p>还是我们最初修改样式的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div.style.left = <span class="string">'10px'</span>;</span><br><span class="line">div.style.top = <span class="string">'10px'</span>;</span><br><span class="line">div.style.width = <span class="string">'20px'</span>;</span><br><span class="line">div.style.height = <span class="string">'20px'</span>;</span><br></pre></td></tr></table></figure><p>虽然现代浏览器有渲染队列的优化机制，但是古董浏览器效率仍然底下，触发了4次重排 ，即便这样，我们仍然可以做出优化 ，我们需要cssText属性合并所有样式改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.style.cssText = <span class="string">'left:10px;top:10px;width:20px;height:20px;'</span>;</span><br></pre></td></tr></table></figure><p>这样只需要修改DOM一次一并处理，仅仅触发了1次重排 ，而且只用了一行代码</p><blockquote><p>cssText会覆盖已有的行间样式<br>如果想保留原有行间样式，这样做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; div.style.cssText += <span class="string">';left:10px;'</span>;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>除了cssText以外，我们还可以通过修改class类名来进行样式修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.className = <span class="string">'new-class'</span>;</span><br></pre></td></tr></table></figure><p>这种办法可维护性好，还可以帮助我们免除显示性代码，但是会消耗一点点的性能</p><h4 id="3-缓存布局信息"><a href="#3-缓存布局信息" class="headerlink" title="3.缓存布局信息"></a>3.缓存布局信息</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div.style.left = div.offsetLeft + <span class="number">1</span> + <span class="string">'px'</span>;</span><br><span class="line">div.style.top = div.offsetTop + <span class="number">1</span> + <span class="string">'px'</span>;</span><br></pre></td></tr></table></figure><p>这种读操作完就执行写操作造成了2次重排<br>缓存可以进行优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> curLeft = div.offsetLeft;</span><br><span class="line"><span class="keyword">var</span> curTop = div.offsetTop;</span><br><span class="line">div.style.left = curLeft + <span class="number">1</span> + <span class="string">'px'</span>;</span><br><span class="line">div.style.top = curTop + <span class="number">1</span> + <span class="string">'px'</span>;</span><br></pre></td></tr></table></figure><p>相当于是分离读写操作，优化为1次重排</p><h4 id="4-元素批量操作"><a href="#4-元素批量操作" class="headerlink" title="4.元素批量操作"></a>4.元素批量操作</h4><p>现在我们想要向ul中循环添加大量li （如果ul还不存在，最好的办法是先循环添加li到ul，然后再把ul添加到文档，1次重排）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1e5</span>; i++)&#123;</span><br><span class="line"><span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(i);</span><br><span class="line">li.appendChild(text);</span><br><span class="line">ul.appendChild(li);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我可以做出下面的优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>);</span><br><span class="line">ul.style.display = <span class="string">'none'</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1e5</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">    <span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(i);</span><br><span class="line">    li.appendChild(text);</span><br><span class="line">    ul.appendChild(li);</span><br><span class="line">&#125;</span><br><span class="line">ul.style.display = <span class="string">'block'</span>;</span><br><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>);</span><br><span class="line"><span class="keyword">var</span> frg = <span class="built_in">document</span>.createDocumentFragment(); </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1e5</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">    <span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(i);</span><br><span class="line">    li.appendChild(text);</span><br><span class="line">    frg.appendChild(li); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ul.appendChild(frg); </span><br><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>);</span><br><span class="line"><span class="keyword">var</span> clone = ul.cloneNode(<span class="literal">true</span>); </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1e5</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">    <span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(i);</span><br><span class="line">    li.appendChild(text);</span><br><span class="line">    clone.appendChild(li); </span><br><span class="line">&#125;</span><br><span class="line">ul.parentNode.replaceChild(clone,ul);</span><br></pre></td></tr></table></figure><p>上面的方法减少重绘和重排的原理很简单</p><ul><li>元素脱离文档</li><li>改变样式</li><li>元素回归文档</li></ul><p>而改变元素就分别使用了隐藏元素、文档碎片和克隆元素 </p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RN中没有固定定位怎么办？</title>
      <link href="/passages/RN%E4%B8%AD%E6%B2%A1%E6%9C%89%E5%9B%BA%E5%AE%9A%E5%AE%9A%E4%BD%8D%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/"/>
      <url>/passages/RN%E4%B8%AD%E6%B2%A1%E6%9C%89%E5%9B%BA%E5%AE%9A%E5%AE%9A%E4%BD%8D%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img2018.cnblogs.com/blog/1227538/201903/1227538-20190319110324634-428942820.png" alt="img"></p><p>如上图的底部新增按钮，要是放在web里那是相当简单，直接是用固定定位就行，但是在RN里是没有固定定位。</p><p>怎么解决?</p><h3 id="方案一-绝对定位"><a href="#方案一-绝对定位" class="headerlink" title="方案一     绝对定位"></a>方案一     绝对定位</h3><p>采用绝对定位，相对于最外层的定位在底部位置。</p><blockquote><p>在部分安卓机上有问题，动态计算的高度，定位底部的高度有问题，导致底部按钮定位脱离了视野</p></blockquote><h3 id="方案二-flex布局"><a href="#方案二-flex布局" class="headerlink" title="方案二    flex布局"></a>方案二    flex布局</h3><p>如上图，头部导航<headerview> 是固定的，</headerview></p><p>剩下的就是<segmentedcontrol> 组件（红色方框区域） </segmentedcontrol></p><p>设置属性 flex:1 使它撑满剩余空间，这时候可以设置它为相对定位，然后底部那个按钮绝对定位，这样可行，</p><p><strong>但是我们可以用flex一层一层撑开</strong>。</p><p>按钮底部空白的位置，不是定位出来的，其实是适应iphoneX组件的空间，忽略。</p><p>接下来只要把内部划成三块就行：tab导航  列表内容  底部按钮 。</p><p>列表内容和底部导航是由一个VIew 包着 和tab 导航同一层级的。所以这个View 设置<code>flex:1</code>.</p><p>到了最后一层，就是设置列表内容 <code>flex:1</code> ， 底部按钮固定高度。这样根据flex布局的属性，底部按钮就被挤在 最下面这个位置了。</p><p>这个方法相对于直接用一层定位来，多了几层<code>flex:1</code>，但是省去了计算高度的工作，不存在安卓的兼容性，免去了样式爆炸的烦恼。</p><p>总结：最核心就是一点，一层层设置<code>flex：1</code>,把固定高度的挤在固定的地方就行。</p>]]></content>
      
      
      
        <tags>
            
            <tag> react-native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈BFC原理及作用</title>
      <link href="/passages/%E6%B5%85%E8%B0%88BFC%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%9C%E7%94%A8/"/>
      <url>/passages/%E6%B5%85%E8%B0%88BFC%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%9C%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="一-BFC的概念"><a href="#一-BFC的概念" class="headerlink" title="一. BFC的概念"></a>一. BFC的概念</h3><p>BFC 即 Block Formatting Contexts (块级格式化上下文)，它属于上述布局模式的流动模型。是W3C CSS2.1规范中的一个概念，决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用。</p><blockquote><p>具有BFC特性的元素可以看做是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且BFC具有普通容器所没有的的一些特性。</p></blockquote><p>通俗一点来讲，可以把BFC理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。</p><h3 id="二-BFC的形成条件"><a href="#二-BFC的形成条件" class="headerlink" title="二.BFC的形成条件"></a>二.BFC的形成条件</h3><p>只要元素满足下面任一条件即可触发BFC特性：</p><ul><li>body 根元素</li><li>浮动元素：float 除 none 以外的值</li><li>绝对定位元素：position (absolute、fixed)</li><li>display 为 inline-block、table-cells、flex</li><li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li></ul><h3 id="三-BFC常见的作用"><a href="#三-BFC常见的作用" class="headerlink" title="三.BFC常见的作用"></a>三.BFC常见的作用</h3><h4 id="1-组织外边距重叠"><a href="#1-组织外边距重叠" class="headerlink" title="1.组织外边距重叠"></a>1.组织外边距重叠</h4><p>例：margin塌陷问题：在标准文档流中，块级标签之间竖直方向的margin会以大的为准，这就是margin的塌陷现象。</p><p>可以用overflow：hidden产生bfc来解决。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">div&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background: lightblue;</span><br><span class="line">    margin: 100px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    <img src="https://img-blog.csdn.net/20180521165928794?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RGRjE5OTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>因为两个div元素都处于同一个BFC容器下（这里指body元素），所以第一个div的下边距和第二个div的上边距发生了重叠，所以两个盒子之间距离只有100px，而不是200px。</p><p>首先这不是 CSS 的 bug，我们可以理解为一种规范，如果想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: lightblue;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <img src="https://img-blog.csdn.net/20180521170236501?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RGRjE5OTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><h4 id="2-包含浮动元素"><a href="#2-包含浮动元素" class="headerlink" title="2.包含浮动元素"></a>2.包含浮动元素</h4><p> 例：高度塌陷问题，在通常情况下父元素的高度会被子元素撑开，而在这里因为其子元素为浮动元素所以父元素发生了高度坍塌，上下边界重合，这时就可以用BFC来清除浮动了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border: 1px solid #000;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 100px;background: grey;float: left;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于容器内元素浮动，脱离了文档流，所以容器只剩下2px的边距高度。如果触发容器的BFC，那么容器将会包裹浮动元素。</p><div style="border: 1px solid #000;overflow: hidden"><br>    <div style="width: 100px;height: 100px;background: grey;float: left;"></div><br></div><p>​    </p><h4 id="3、阻止元素被浮动元素覆盖"><a href="#3、阻止元素被浮动元素覆盖" class="headerlink" title="3、阻止元素被浮动元素覆盖"></a>3、阻止元素被浮动元素覆盖</h4><p>  例：div浮动兄弟这该问题：由于左侧块级元素发生了浮动，所以和右侧未发生浮动的块级元素不在同一层内，所以会发生div遮挡问题。可以给右侧元素添加 overflow: hidden，触发BFC来解决遮挡问题。</p><div style="height: 100px;width: 100px;float: left;background: lightblue">我是一个左浮动的元素</div><br><div style="width: 200px; height: 200px;background: grey">我是一个没有设置浮动,<br>也没有触发 BFC 元素, width: 200px; height:200px; background: grey;</div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这时候其实第二个元素有部分被浮动元素所覆盖，但是文本信息不会被浮动元素所覆盖，如果想避免元素被覆盖，可触发第二个元素的BFC特性，在第二个元素中加入overflow：hidden，就会变成：</span><br></pre></td></tr></table></figure><div style="height: 100px;width: 100px;float: left;background: lightblue">我是一个左浮动的元素</div><br><div style="width: 200px; height: 200px;background: grey;overflow:hidden">我是一个没有设置浮动,<br>也没有触发 BFC 元素, width: 200px; height:200px; background: grey;</div><p>​    </p><p>这个方法可以用来实现两列自适应布局，效果不错，这时候左边的宽度固定，右边的内容自适应宽度。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>media与screen的自适应网页布局</title>
      <link href="/passages/media%E4%B8%8Escreen%E7%9A%84%E8%87%AA%E9%80%82%E5%BA%94%E7%BD%91%E9%A1%B5%E5%B8%83%E5%B1%80/"/>
      <url>/passages/media%E4%B8%8Escreen%E7%9A%84%E8%87%AA%E9%80%82%E5%BA%94%E7%BD%91%E9%A1%B5%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="1：设置Meta标签"><a href="#1：设置Meta标签" class="headerlink" title="1：设置Meta标签"></a>1：设置Meta标签</h3><p>首先我们在使用Media的时候需要先设置下面这段代码，来兼容移动设备的展示效果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这段代码的几个参数解释：</p><ul><li>width = device-width：宽度等于当前设备的宽度</li><li>height = device-height：高度等于当前设备的高度</li><li>initial-scale：初始的缩放比例（默认设置为1.0）  </li><li>minimum-scale：允许用户缩放到的最小比例（默认设置为1.0）    </li><li>maximum-scale：允许用户缩放到的最大比例（默认设置为1.0）   </li><li>user-scalable：用户是否可以手动缩放（默认设置为no，因为我们不希望用户放大缩小页面） </li></ul><h3 id="2：加载兼容文件JS"><a href="#2：加载兼容文件JS" class="headerlink" title="2：加载兼容文件JS"></a>2：加载兼容文件JS</h3><p>因为IE8既不支持HTML5也不支持CSS3 Media，所以我们需要加载两个JS文件，来保证我们的代码实现兼容效果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">&lt;script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3：设置IE渲染方式默认为最高-这部分可以选择添加也可以不添加"><a href="#3：设置IE渲染方式默认为最高-这部分可以选择添加也可以不添加" class="headerlink" title="3：设置IE渲染方式默认为最高(这部分可以选择添加也可以不添加)"></a>3：设置IE渲染方式默认为最高(这部分可以选择添加也可以不添加)</h3><p>现在有很多人的IE浏览器都升级到IE9以上了，所以这个时候就有又很多诡异的事情发生了，例如现在是IE9的浏览器，但是浏览器的文档模式却是IE8:</p><p>为了防止这种情况，我们需要下面这段代码来让IE的文档模式永远都是最新的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br></pre></td></tr></table></figure><p> （如果想使用固定的IE版本，可写成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=EmulateIE9"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>）</p><p>除此之外，还有一个更好的写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=Edge，chrome=1"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>怎么这段代码后面加了一个chrome=1，这个<a href="http://zh.wikipedia.org/wiki/Google_Chrome_Frame" target="_blank" rel="noopener">Google Chrome Frame（谷歌内嵌浏览器框架GCF）</a>，如果有的用户电脑里面装了这个chrome的插件，就可以让电脑里面的IE不管是哪个版本的都可以使用Webkit引擎及V8引擎进行排版及运算，如果用户没装这个插件，那这段代码就会让IE以最高的文档模式展现效果。</p><h3 id="CSS3-Media写法"><a href="#CSS3-Media写法" class="headerlink" title="CSS3 Media写法"></a>CSS3 Media写法</h3><p>我们先来看下下面这段代码，估计很多人在响应式的网站CSS很经常看到类似下面的这段代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">960px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个应该算是一个media的一个标准写法，上面这段CSS代码意思是：当页面小于960px的时候执行它下面的CSS.</p><p>应该有人会发现上面这段代码里面有个screen，他的意思是在告知设备在打印页面时使用<a href="http://baike.baidu.com/link?url=FOnnUbOa6X590ao9mYca7Rgz_z5bLBtmMV0qwimHDZIsaZFTC5vztLLlPvOnzCo5hGU5loIN9zhxJDBBRaQeTa" target="_blank" rel="noopener">衬线字体</a>，在屏幕上显示时用无衬线字体。但是目前我发现很多网站都会直接省略screen,因为你的网站可能不需要考虑用户去打印时，你可以直接这样写：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> (max-width: <span class="number">960px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS2-Media用法"><a href="#CSS2-Media用法" class="headerlink" title="CSS2 Media用法"></a>CSS2 Media用法</h3><p>其实并不是只有CSS3才支持Media的用法，早在CSS2开始就已经支持Media，具体用法，就是在HTML页面的head标签中插入如下的一段代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面其实是CSS2实现的衬线用法，那CSS2的media难道就只能支持上面这一个功能吗？答案当然不是，他还有很多用法。</p><p>例如我们想知道现在的移动设备是不是纵向放置的显示屏，可以这样写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen and (orientation:portrait)"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们把第一段的代码也用CSS2来实现，让它一样可以让页面宽度小于960的执行指定的样式文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen and (max-width:960px)"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>既然CSS2可以实现CSS的这个效果为什么不用这个方法呢，很多人应该会问，但是上面这个方法，最大的弊端是他会增加页面http的请求次数，增加了页面负担，我们用CSS3把样式都写在一个文件里面才是最佳的方法。</p><h3 id="回归CSS3-Media"><a href="#回归CSS3-Media" class="headerlink" title="回归CSS3 Media"></a>回归CSS3 Media</h3><p>上面我们大概讲了下CSS2的媒体查询用法，现在我们重新回到CSS3的媒体查询，在第一段代码上面我用的是小于960px的尺寸的写法，那现在我们来实现等于960px尺寸的代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (max-device-width:<span class="number">960px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">background</span>:red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是当浏览器尺寸大于960px时候的代码了：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">960px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">background</span>:orange;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还可以混合使用上面的用法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">960px</span>) and (max-width:<span class="number">1200px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">background</span>:yellow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的这段代码的意思是当页面宽度大于960px小于1200px的时候执行下面的CSS。</p><h3 id="Media所有参数汇总"><a href="#Media所有参数汇总" class="headerlink" title="Media所有参数汇总"></a>Media所有参数汇总</h3><p>以上就是我们最常需要用到的媒体查询器的三个特性，大于，等于，小于的写法。媒体查询器的全部功能肯定不止这三个功能，下面是我总结的它的一些参数用法解释：</p><ul><li>width:浏览器可视宽度。</li><li>height:浏览器可视高度。</li><li>device-width:设备屏幕的宽度。</li><li>device-height:设备屏幕的高度。</li><li>orientation:检测设备目前处于横向还是纵向状态。</li><li>aspect-ratio:检测浏览器可视宽度和高度的比例。(例如：aspect-ratio:16/9)</li><li>device-aspect-ratio:检测设备的宽度和高度的比例。</li><li>color:检测颜色的位数。（例如：min-color:32就会检测设备是否拥有32位颜色）</li><li>color-index:检查设备颜色索引表中的颜色，他的值不能是负数。</li><li>monochrome:检测单色楨缓冲区域中的每个像素的位数。（这个太高级，估计咱很少会用的到）</li><li>resolution:检测屏幕或打印机的分辨率。(例如：min-resolution:300dpi或min-resolution:118dpcm)。</li><li>grid：检测输出的设备是网格的还是位图设备。</li></ul><hr><p>注意下顺序，如果你把@media (min-width: 768px)写在了下面那么很悲剧，</p><p>@media (min-width: 1200){ //&gt;=1200的设备 }</p><p>@media (min-width: 992px){ //&gt;=992的设备 }</p><p>@media (min-width: 768px){ //&gt;=768的设备 }</p><p>因为如果是1440,由于1440&gt;768那么你的1200就会失效。</p><p>所以我们用min-width时，小的放上面大的在下面，同理如果是用max-width那么就是大的在上面，小的在下面</p><p>@media (max-width: 1199){ //&lt;=1199的设备 }</p><p>@media (max-width: 991px){ //&lt;=991的设备 }</p><p>@media (max-width: 767px){ //&lt;=768的设备 }</p><p>1280分辨率以上（大于1200px）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">1200px</span>)&#123;</span><br><span class="line">    <span class="selector-id">#page</span>&#123; <span class="attribute">width</span>: <span class="number">1100px</span>; &#125;<span class="selector-id">#content</span>,<span class="selector-class">.div1</span>&#123;<span class="attribute">width</span>: <span class="number">730px</span>;&#125;<span class="selector-id">#secondary</span>&#123;<span class="attribute">width</span>:<span class="number">310px</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1100分辨率（大于960px，小于1199px）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">960px</span>) and (max-width: <span class="number">1199px</span>) &#123;</span><br><span class="line">    <span class="selector-id">#page</span>&#123; <span class="attribute">width</span>: <span class="number">960px</span>; &#125;<span class="selector-id">#content</span>,<span class="selector-class">.div1</span>&#123;<span class="attribute">width</span>: <span class="number">650px</span>;&#125;<span class="selector-id">#secondary</span>&#123;<span class="attribute">width</span>:<span class="number">250px</span>&#125;<span class="selector-tag">select</span>&#123;<span class="attribute">max-width</span>:<span class="number">200px</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>880分辨率（大于768px，小于959px）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">768px</span>) and (max-width: <span class="number">959px</span>) &#123;</span><br><span class="line">    <span class="selector-id">#page</span>&#123; <span class="attribute">width</span>: <span class="number">900px</span>; &#125;<span class="selector-id">#content</span>,<span class="selector-class">.div1</span>&#123;<span class="attribute">width</span>: <span class="number">620px</span>;&#125;<span class="selector-id">#secondary</span>&#123;<span class="attribute">width</span>:<span class="number">220px</span>&#125;<span class="selector-tag">select</span>&#123;<span class="attribute">max-width</span>:<span class="number">180px</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>720分辨率（大于480px，小于767px）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">480px</span>) and (max-width: <span class="number">767px</span>)&#123;</span><br><span class="line">    <span class="selector-id">#page</span>&#123; <span class="attribute">width</span>: <span class="number">450px</span>; &#125;<span class="selector-id">#content</span>,<span class="selector-class">.div1</span>&#123;<span class="attribute">width</span>: <span class="number">420px</span>;<span class="attribute">position</span>: relative; &#125;<span class="selector-id">#secondary</span>&#123;<span class="attribute">display</span>:none&#125;<span class="selector-id">#access</span>&#123;<span class="attribute">width</span>: <span class="number">450px</span>; &#125;<span class="selector-id">#access</span> <span class="selector-tag">a</span> &#123;<span class="attribute">padding-right</span>:<span class="number">5px</span>&#125;<span class="selector-id">#access</span> <span class="selector-tag">a</span> <span class="selector-tag">img</span>&#123;<span class="attribute">display</span>:none&#125;<span class="selector-id">#rss</span>&#123;<span class="attribute">display</span>:none&#125;<span class="selector-id">#branding</span> <span class="selector-id">#s</span>&#123;<span class="attribute">display</span>:none&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>440分辨率以下（小于479px）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">479px</span>) &#123;</span><br><span class="line">    <span class="selector-id">#page</span>&#123; <span class="attribute">width</span>: <span class="number">300px</span>; &#125;<span class="selector-id">#content</span>,<span class="selector-class">.div1</span>&#123;<span class="attribute">width</span>: <span class="number">300px</span>;&#125;<span class="selector-id">#secondary</span>&#123;<span class="attribute">display</span>:none&#125;<span class="selector-id">#access</span>&#123;<span class="attribute">width</span>: <span class="number">330px</span>;&#125; <span class="selector-id">#access</span> <span class="selector-tag">a</span> &#123;<span class="attribute">padding-right</span>:<span class="number">10px</span>;<span class="attribute">padding-left</span>:<span class="number">10px</span>&#125;<span class="selector-id">#access</span> <span class="selector-tag">a</span> <span class="selector-tag">img</span>&#123;<span class="attribute">display</span>:none&#125;<span class="selector-id">#rss</span>&#123;<span class="attribute">display</span>:none&#125;<span class="selector-id">#branding</span> <span class="selector-id">#s</span>&#123;<span class="attribute">display</span>:none&#125;<span class="selector-id">#access</span> <span class="selector-tag">ul</span> <span class="selector-tag">ul</span> <span class="selector-tag">a</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 竖屏 */</span></span><br><span class="line">@<span class="keyword">media</span> screen and (orientation: portrait) and (max-width: <span class="number">720px</span>) &#123; 对应样式 &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 横屏 */</span></span><br><span class="line">@<span class="keyword">media</span> screen and (orientation: landscape) &#123; 对应样式 &#125;</span><br></pre></td></tr></table></figure><p>上面的代码中用到了screen ，他的意思是在告知设备在打印页面时使用<a href="http://baike.baidu.com/link?url=FOnnUbOa6X590ao9mYca7Rgz_z5bLBtmMV0qwimHDZIsaZFTC5vztLLlPvOnzCo5hGU5loIN9zhxJDBBRaQeTa" target="_blank" rel="noopener">衬线字体</a>，在屏幕上显示时用无衬线字体。但是目前我发现很多网站都会直接省略screen,因为你的网站可能不需要考虑用户去打印时。</p><p>PC端按屏幕宽度大小排序</p><p>分辨率   比例 | 设备尺寸</p><p>1024<em>500 （8.9寸）<br>1024</em>768 （比例4：3  | 10.4寸、12.1寸、14.1寸、15寸; ）<br>1280<em>800（16：10  |15.4寸）<br>1280</em>1024(比例：5：4  | 14.1寸、15.0寸)<br>1280<em>854(比例：15：10 | 15.2）<br>1366</em>768 (比例：16：9 | 不常见）<br>1440<em>900 （16：10  17寸 仅苹果用）<br>1440</em>1050（比例：5：4  | 14.1寸、15.0寸）<br>1600<em>1024（14：9  不常见）<br>1600</em>1200 （4：3 | 15、16.1）<br>1680<em>1050（16：10 | 15.4寸、20.0寸）<br>1920</em>1200 (23寸）</p><p>通过上面的电脑屏蔽及尺寸的例表上我们得到了几个宽度<br>1024  1280  1366  1440  1680  1920  </p><p>CSS代码</p><p>@media (min-width: 1024px){<br>  body{font-size: 18px}<br>} /<em>&gt;=1024的设备</em>/<br>@media (min-width: 1100px) {<br>  body{font-size: 20px}<br>} /<em>&gt;=1024的设备</em>/<br>@media (min-width: 1280px) {<br>  body{font-size: 22px;}<br>}<br>@media (min-width: 1366px) {<br>  body{font-size: 24px;}<br>}<br>@media (min-width: 1440px) {<br>  body{font-size: 25px !important;}<br>}<br>@media (min-width: 1680px) {<br>  body{font-size: 28px;}<br>}<br>@media (min-width: 1920px) {<br>  body{font-size: 33px;}<br>} </p><p><img src="https://img-blog.csdn.net/20170109135106984?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSW51eWFzaGExMTIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery复习</title>
      <link href="/passages/jQuery%E5%A4%8D%E4%B9%A0/"/>
      <url>/passages/jQuery%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="一-选择器"><a href="#一-选择器" class="headerlink" title="一.选择器"></a>一.选择器</h2><h3 id="1-1-基本选择器"><a href="#1-1-基本选择器" class="headerlink" title="1.1 基本选择器"></a>1.1 基本选择器</h3><p>#id      id选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&apos;one&apos;&gt;AAA&lt;/div&gt;</span><br><span class="line">$(&quot;#one&quot;).css(&quot;background-color&quot;,&quot;red&quot;);</span><br></pre></td></tr></table></figure><p>element    标签选择器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;BBB&lt;/</span>div&gt;</span><br><span class="line">$(<span class="string">"div"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>.class     类选择器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">'mini'</span>&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$(".mini").css("background-color","blue");</span></span><br></pre></td></tr></table></figure><p>*     所有元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;span&gt;bbb&lt;/</span>span&gt;</span><br><span class="line">&lt;h1&gt;ccc&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">$("*").css("background-color","green");</span></span><br></pre></td></tr></table></figure><p>s1,s2,…  多选择器，将多个选择器的结果添加一个数组中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">'mini'</span>&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id='two'&gt;BBB&lt;/</span>div&gt;</span><br><span class="line">&lt;span&gt;CCC&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">$("span,#two,.mini").css("background-color","brown");</span></span><br></pre></td></tr></table></figure><h3 id="1-2-层级选择器"><a href="#1-2-层级选择器" class="headerlink" title="1.2 层级选择器"></a>1.2 层级选择器</h3><p>A  B  ，获得A元素内部所有的B元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">'mini'</span>&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">$(<span class="string">"body div"</span>).css(<span class="string">"background-color"</span>, <span class="string">"red"</span>);</span><br></pre></td></tr></table></figure><p>A &gt; B ，获得A元素内部所有的B子元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;BBB&lt;/</span>div&gt;</span><br><span class="line">&lt;span&gt;CCC&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">$(<span class="string">"body &gt; div"</span>).css(<span class="string">"background-color"</span>, <span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>A + B ，获得A元素后面的第一个兄弟B</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;BBB&lt;/</span>div&gt;</span><br><span class="line">$(<span class="string">"div + div"</span>).css(<span class="string">"background-color"</span>, <span class="string">"blue"</span>);</span><br></pre></td></tr></table></figure><p>A ~ B ，获得A元素后面的所有的兄弟B</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;AAA&lt;/div&gt;</span><br><span class="line">&lt;span&gt;BBB&lt;/span&gt;</span><br><span class="line">&lt;span&gt;ccc&lt;/span&gt;</span><br><span class="line">&lt;span&gt;ddd&lt;/span&gt;</span><br><span class="line">&lt;div&gt;eee&lt;/div&gt;</span><br><span class="line">$(&quot;div ~ span&quot;).css(&quot;background-color&quot;, &quot;green&quot;);</span><br></pre></td></tr></table></figure><p>A.siblings(“B”)，A的所有是B的兄弟</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;BBB&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;AAA&lt;/</span>div&gt;</span><br><span class="line">&lt;span&gt;ccc&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;span&gt;ddd&lt;/</span>span&gt;</span><br><span class="line">$(<span class="string">"div"</span>).siblings(<span class="string">"span"</span>).css(<span class="string">"background-color"</span>, <span class="string">"brown"</span>);</span><br></pre></td></tr></table></figure><h3 id="1-3-基本过滤选择器"><a href="#1-3-基本过滤选择器" class="headerlink" title="1.3 基本过滤选择器"></a>1.3 基本过滤选择器</h3><blockquote><p>过滤选择器都有 :</p></blockquote><p>:first         选中第一个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;BBB&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;CCC&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$("div:first").css("background-color", "red");</span></span><br></pre></td></tr></table></figure><p>:last         选中最后一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;BBB&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;CCC&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$("div:last").css("background-color", "yellow");</span></span><br></pre></td></tr></table></figure><p>:eq(index)    获得指定索引(从0开始)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;BBB&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;CCC&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$("div:eq(2)").css("background-color", "blue");</span></span><br></pre></td></tr></table></figure><p>:gt(index)    大于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;BBB&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;CCC&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$("div:gt(1)").css("background-color", "red");</span></span><br></pre></td></tr></table></figure><p>:lt(index)    小于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;BBB&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;CCC&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$("div:lt(1)").css("background-color", "green");</span></span><br></pre></td></tr></table></figure><p>:animated     获得所有在动画的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">":animated"</span>).css(<span class="string">"background-color"</span>, <span class="string">"green"</span>);</span><br></pre></td></tr></table></figure><p>:not(selector) 去除所有与给定选择器匹配的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"one"</span>&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class="two"&gt;BBB&lt;/</span>div&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"three"</span>&gt;CCC&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"> $("div:not('.one')").css("background-color", "blue");</span></span><br></pre></td></tr></table></figure><p>:header     获得所有标题元素    例如：</p><h1>…<h6><p></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;h1&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;h2&gt;h2&lt;/</span>h2&gt;</span><br><span class="line">&lt;h3&gt;h3&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">$(":header").css("background-color", "green").css("font-size","30px");</span></span><br></pre></td></tr></table></figure><p>:even      偶数，从 0 开始计数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;BBB&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;CCC&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;DDD&lt;/</span>div&gt;</span><br><span class="line">$(<span class="string">"div:even"</span>).css(<span class="string">"background-color"</span>, <span class="string">"brown"</span>);</span><br></pre></td></tr></table></figure><p>:odd       奇数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;BBB&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;CCC&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;DDD&lt;/</span>div&gt;</span><br><span class="line">$(<span class="string">"div:odd"</span>).css(<span class="string">"background-color"</span>, <span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><h3 id="1-4-内容过滤选择器"><a href="#1-4-内容过滤选择器" class="headerlink" title="1.4 内容过滤选择器"></a>1.4 内容过滤选择器</h3><blockquote><p>均要加冒号</p></blockquote><p>:empty  当前元素是否为空（是否有标签体–子元素、文本）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;DDD&lt;/</span>div&gt;</span><br><span class="line">$(<span class="string">"div:empty"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>:has(…)  当前元素，是否含有指定的子元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;DDD&lt;/</span>div&gt;</span><br><span class="line">$(<span class="string">"div:has('span')"</span>).css(<span class="string">"background-color"</span>,<span class="string">"blue"</span>);</span><br></pre></td></tr></table></figure><p>:parent    当前元素是否是父元素（自己是否拥有子元素）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;DDD&lt;/</span>div&gt;</span><br><span class="line">$(<span class="string">"div:parent"</span>).css(<span class="string">"background-color"</span>,<span class="string">"green"</span>);</span><br></pre></td></tr></table></figure><p>:contains( text ) 标签体是否含有指定的文本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;aaa&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;bbb&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;ddd&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$("div:contains('d')").css("background-color","red");</span></span><br></pre></td></tr></table></figure><h3 id="1-5-可见性过滤选择器"><a href="#1-5-可见性过滤选择器" class="headerlink" title="1.5 可见性过滤选择器"></a>1.5 可见性过滤选择器</h3><p>:hidden        隐藏。特指 <code>&lt;xxx style=&quot;display:none;&quot;&gt;</code> 或者 <code>&lt;input type=&quot;hidden&quot;&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">"display:none"</span>&gt;aaa&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;bbb&lt;/</span>div&gt;</span><br><span class="line">&lt;input type=<span class="string">"hidden"</span>&gt;</span><br><span class="line">$(<span class="string">"div:hidden"</span>).show(<span class="number">1000</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>:visible    可见（默认）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">"display:none"</span>&gt;aaa&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;bbb&lt;/</span>div&gt;</span><br><span class="line">&lt;input type=<span class="string">"hidden"</span>&gt;</span><br><span class="line">$(<span class="string">"div:visible"</span>).css(<span class="string">"background-color"</span>,<span class="string">"red"</span>);</span><br></pre></td></tr></table></figure><h3 id="1-6-属性选择器"><a href="#1-6-属性选择器" class="headerlink" title="1.6 属性选择器"></a>1.6 属性选择器</h3><p>[属性名]                 获得指定的属性名的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div title=<span class="string">'aaa'</span>&gt;aaa&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;bbb&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;ddd&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$("div[title]").css("background-color","red");</span></span><br></pre></td></tr></table></figure><p>[属性名=值]                获得属性名 等于 指定值的 的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div title=<span class="string">'aaa'</span>&gt;aaa&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;bbb&lt;/</span>div&gt;</span><br><span class="line">&lt;div title=<span class="string">'test'</span>&gt;ddd&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$("div[title='test']").css("background-color","blue");</span></span><br></pre></td></tr></table></figure><p>[属性名!=值]            获得属性名 不等于 指定值的 的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div title=<span class="string">'aaa'</span>&gt;aaa&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div title='test'&gt;ddd&lt;/</span>div&gt;</span><br><span class="line"> $(<span class="string">"div[title!='test']"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>[as1][as2][as3]….        复合选择器，多个条件同时成立。类似 where …and…and</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div title=<span class="string">'aes'</span> id=<span class="string">"aaa"</span>&gt;aaa&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div &gt;bbb&lt;/</span>div&gt;</span><br><span class="line">&lt;div title=<span class="string">'test'</span> id=<span class="string">'ddd'</span>&gt;ddd&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$("div[id][title*='es']").css("background-color","red");</span></span><br></pre></td></tr></table></figure><p>[属性名^=值]            获得以属性值 开头 的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div title=<span class="string">'test'</span>&gt;aaa&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div title='teve'&gt;bbb&lt;/</span>div&gt;</span><br><span class="line">&lt;div title=<span class="string">'txt'</span>&gt;ddd&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$("div[title^='te']").css("background-color","green");</span></span><br></pre></td></tr></table></figure><p>[属性名$=值]            获得以属性值 结尾 的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div title=<span class="string">'test'</span>&gt;aaa&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div title='teve'&gt;bbb&lt;/</span>div&gt;</span><br><span class="line">&lt;div title=<span class="string">'txt'</span>&gt;ddd&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$("div[title$='est']").css("background-color","brown");</span></span><br></pre></td></tr></table></figure><p>[属性名*=值]            获得 含有属性值  的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div title=<span class="string">'test'</span>&gt;aaa&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div title='teve'&gt;bbb&lt;/</span>div&gt;</span><br><span class="line">&lt;div title=<span class="string">'txt'</span>&gt;ddd&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$("div[title*='es']").css("background-color","yellow");</span></span><br></pre></td></tr></table></figure><h3 id="1-7-元素过滤选择器"><a href="#1-7-元素过滤选择器" class="headerlink" title="1.7 元素过滤选择器"></a>1.7 元素过滤选择器</h3><p>:nth-child(n)     第n个孩子(从1开始)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">$("body :nth-child(2)").css("background-color","yellow");</span></span><br></pre></td></tr></table></figure><p>:first-child   第一个孩子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line"> &lt;span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"> &lt;span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"> &lt;span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/注意空格的区别</span></span><br><span class="line"><span class="regexp">$("div :first-chlid").css("background-color","yellow");/</span><span class="regexp">/div里面的元素的第一个</span></span><br><span class="line"><span class="regexp">$("div:first-chlid").css("background-color","yellow");/</span><span class="regexp">/div的第一个</span></span><br></pre></td></tr></table></figure><p>:last-child    最后一个孩子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line"> &lt;span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"> &lt;span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"> &lt;span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/注意空格的区别</span></span><br><span class="line"><span class="regexp">$("div :last-chlid").css("background-color","yellow");/</span><span class="regexp">/div里面的元素的最后一个</span></span><br><span class="line"><span class="regexp">$("div:last-chlid").css("background-color","yellow");/</span><span class="regexp">/div的最后一个</span></span><br></pre></td></tr></table></figure><p>:only-child    仅有一个孩子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line"> &lt;span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"> &lt;span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">$("div :last-chlid").css("background-color","yellow");</span></span><br></pre></td></tr></table></figure><h3 id="1-8-表单过滤选择器"><a href="#1-8-表单过滤选择器" class="headerlink" title="1.8 表单过滤选择器"></a>1.8 表单过滤选择器</h3><p>:input           所有的表单元素。<code>&lt;input&gt; / &lt;select&gt; / &lt;textarea&gt; / &lt;button&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input&gt;</span><br><span class="line">&lt;select&gt;<span class="xml"><span class="tag">&lt;<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line">&lt;textarea&gt;<span class="xml"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line">&lt;button&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">$(<span class="string">":input"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>:text            文本框<code>&lt;input type=&quot;text&quot;&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span>&gt;</span><br><span class="line">$(<span class="string">":text"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>:password        密码框<code>&lt;input type=&quot; password &quot;&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"password"</span>&gt;</span><br><span class="line">$(<span class="string">":password"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>:radio            单选<code>&lt;input type=&quot;radio&quot;&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"Fruit"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span>苹果 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span> </span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"Fruit"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span>桃子 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span> </span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"Fruit"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span>香蕉 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span> </span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"Fruit"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span>梨 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span> </span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"Fruit"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span>其它 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span> </span><br><span class="line">&lt;input type=<span class="string">"radio"</span>&gt;</span><br><span class="line">$(<span class="string">":radio"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>:checkbox        复选框<code>&lt;input type=&quot;checkbox&quot;&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"今日话题"</span> /&gt;</span>今日话题 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>   </span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"视觉焦点"</span> /&gt;</span>视觉焦点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"财经"</span> /&gt;</span>财经<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>    </span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"汽车"</span> /&gt;</span>汽车<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>    </span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"科技"</span> /&gt;</span>科技<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>    </span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"房产"</span> /&gt;</span>房产<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>    </span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"旅游"</span> /&gt;</span>旅游<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span>&gt;</span><br><span class="line">$(<span class="string">":checkbox"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>:submit            提交按钮<code>&lt;input type=&quot;submit&quot;&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">$(<span class="string">":submit"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>:image            图片按钮<code>&lt;input type=&quot;image&quot; src=&quot;&quot;&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"image"</span> src=<span class="string">""</span>&gt;</span><br><span class="line">$(<span class="string">":image"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>:reset            重置按钮<code>&lt;input type=&quot;reset&quot;&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;reset&quot; src=&quot;&quot;&gt;</span><br><span class="line">$(&quot;:reset&quot;).css(&quot;background-color&quot;,&quot;yellow&quot;);</span><br></pre></td></tr></table></figure><p>:file            文件上传<code>&lt;input type=&quot;file&quot;&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"file"</span>&gt;</span><br><span class="line">$(<span class="string">":file"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>:hidden            隐藏域<code>&lt;input type=&quot;hidden&quot;&gt;</code> ,还可以获得<code>&lt;xxx style=&quot;display:none&quot;&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"hidden"</span>&gt;</span><br><span class="line">&lt;div style=<span class="string">"display:none"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">$(<span class="string">":hidden"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>:button            所有普通按钮。<code>&lt;button &gt;</code> 或 <code>&lt;input type=&quot;button&quot;&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button &gt;button&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;input type="button"&gt;</span></span><br><span class="line"><span class="regexp">$(":button").css("background-color","yellow");</span></span><br></pre></td></tr></table></figure><p>select           下拉列表  (没有:号）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select&gt;</span><br><span class="line">  &lt;option value =<span class="string">"volvo"</span>&gt;Volvo&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">  &lt;option value ="saab"&gt;Saab&lt;/</span>option&gt;</span><br><span class="line">  &lt;option value=<span class="string">"opel"</span>&gt;Opel&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">  &lt;option value="audi"&gt;Audi&lt;/</span>option&gt;</span><br><span class="line">&lt;<span class="regexp">/select&gt;</span></span><br><span class="line"><span class="regexp">$("select").css("background-color","yellow");</span></span><br></pre></td></tr></table></figure><p>textarea         多行文本框（没有:号）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea&gt;<span class="xml"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line">$(<span class="string">"textarea"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><h3 id="1-9-表单独享属性过滤选择器"><a href="#1-9-表单独享属性过滤选择器" class="headerlink" title="1.9 表单独享属性过滤选择器"></a>1.9 表单独享属性过滤选择器</h3><p>:enabled        可用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">'text'</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">'text'</span> disabled=<span class="string">"disabled"</span>&gt;</span><br><span class="line">$(<span class="string">"input:enabled"</span>).val(<span class="string">"aaaa"</span>);</span><br></pre></td></tr></table></figure><p>:disabled        不可用。<code>&lt;xxx disabled=&quot;disabled&quot;&gt;</code> 或<code>&lt;xxx disabled=&quot;&quot;&gt;</code> 或<code>&lt;xxx disabled&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">'text'</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">'text'</span> disable=<span class="string">""</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">'text'</span> disable&gt;</span><br><span class="line">&lt;input type=<span class="string">'text'</span> disabled=<span class="string">"disabled"</span>&gt;</span><br><span class="line">$(<span class="string">"input:disabled"</span>).val(<span class="string">"bbbb"</span>);</span><br></pre></td></tr></table></figure><p>:checked        选中（单选框radio、复选框 checkbox）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"今日话题"</span> /&gt;</span>今日话题 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>   </span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"视觉焦点"</span> /&gt;</span>视觉焦点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"财经"</span> /&gt;</span>财经<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>    </span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"汽车"</span> <span class="attr">checked</span>=<span class="string">""</span>/&gt;</span>汽车<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>    </span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"科技"</span> /&gt;</span>科技<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>    </span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"房产"</span> /&gt;</span>房产<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>    </span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"旅游"</span> /&gt;</span>旅游<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"Fruit"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span>  <span class="attr">checked</span>=<span class="string">""</span>/&gt;</span>苹果 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span> </span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"Fruit"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span>桃子 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span> </span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"Fruit"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span>香蕉 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span> </span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"Fruit"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span>梨 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span> </span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"Fruit"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span>其它 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span> </span><br><span class="line"></span><br><span class="line">$(<span class="string">":checked"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>:selected        选择（下拉列表 select option）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select&gt;</span><br><span class="line">  &lt;option value =<span class="string">"volvo"</span> selected=<span class="string">""</span>&gt;Volvo&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">  &lt;option value ="saab"&gt;Saab&lt;/</span>option&gt;</span><br><span class="line">  &lt;option value=<span class="string">"opel"</span>&gt;Opel&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">  &lt;option value="audi"&gt;Audi&lt;/</span>option&gt;</span><br><span class="line">&lt;<span class="regexp">/select&gt;</span></span><br><span class="line"><span class="regexp">$("selected").css("background-color","yellow");</span></span><br></pre></td></tr></table></figure><h2 id="二-jQuery属性和CSS"><a href="#二-jQuery属性和CSS" class="headerlink" title="二.jQuery属性和CSS"></a>二.jQuery属性和CSS</h2><h3 id="2-1-属性操作"><a href="#2-1-属性操作" class="headerlink" title="2.1 属性操作"></a>2.1 属性操作</h3><p>attr()</p><p>设置单个属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img title=<span class="string">""</span>&gt;</span><br><span class="line">$(<span class="string">'img'</span>).attr(<span class="string">'title'</span>,<span class="string">'哎哟，不错哦'</span>);</span><br></pre></td></tr></table></figure><p>设置多个属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;img title=<span class="string">""</span> alt=<span class="string">""</span> &gt;</span><br><span class="line">$(<span class="string">'img'</span>).attr(&#123;</span><br><span class="line">    title:<span class="string">'image'</span>,</span><br><span class="line">    alt:<span class="string">'缺省'</span>,</span><br><span class="line">    style:<span class="string">'opacity:.5'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>获取属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img title=<span class="string">"images"</span> alt=<span class="string">""</span> &gt;</span><br><span class="line"><span class="keyword">var</span> oTitle = $(<span class="string">'img'</span>).attr(<span class="string">'title'</span>);</span><br></pre></td></tr></table></figure><p>removeattr()</p><p>移除属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img title=<span class="string">"images"</span> alt=<span class="string">""</span> &gt;</span><br><span class="line">$(<span class="string">'img'</span>).removeAttr(<span class="string">'title'</span>);</span><br></pre></td></tr></table></figure><p>prop()</p><blockquote><p>在jQuery1.6之后，对于checked、selected、disabled这类boolean类型的属性来说，不能用attr方法，只能用prop方法。</p></blockquote><p>设置和获取属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"Fruit"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span>  <span class="attr">checked</span>=<span class="string">""</span>/&gt;</span>苹果 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span> </span><br><span class="line"><span class="comment">// 设置属性</span></span><br><span class="line">$(<span class="string">':checked'</span>).prop(<span class="string">'checked'</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 获取属性</span></span><br><span class="line">$(<span class="string">':checked'</span>).prop(<span class="string">'checked'</span>);<span class="comment">// 返回true或者false</span></span><br></pre></td></tr></table></figure><p>val()/text()/html()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$obj.val()获取或者设置表单元素的value属性的值</span><br><span class="line">$obj.html() 对应innerHTML</span><br><span class="line">$obj.text()对应innerText/textContent，处理了浏览器的兼容性。注意点：如果获取jquery对象text属性的时候jquery对象是一个数组，那么此时会把数组中所有元素的文本都获取到</span><br></pre></td></tr></table></figure><h3 id="2-2-CSS操作"><a href="#2-2-CSS操作" class="headerlink" title="2.2 CSS操作"></a>2.2 CSS操作</h3><p>css()</p><blockquote><p>css(name)  获得指定名称的css值<br>css(name ,value) 设置一对值<br>css(prop) 设置一组值</p></blockquote><p>操作单个样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">$(<span class="string">"div"</span>).css(<span class="string">"border"</span>,<span class="string">"1px solid red"</span>);</span><br></pre></td></tr></table></figure><p>操作多个样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">$(<span class="string">"div"</span>).css(&#123;</span><br><span class="line">    <span class="string">"width"</span>:<span class="string">"300px"</span>,</span><br><span class="line">    <span class="string">"height"</span>:<span class="string">"50px"</span>,</span><br><span class="line">    <span class="string">"font-size"</span>:<span class="string">"60px"</span>,</span><br><span class="line">    <span class="string">"color"</span>:<span class="string">"blue"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>获取样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">'background-color:'</span>red<span class="string">'&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">$('</span>div<span class="string">').css('</span>background-color<span class="string">');</span></span><br></pre></td></tr></table></figure><blockquote><ol><li>设置样式操作的时候，如果是多个元素，那么给所有的元素设置相同的值</li><li>获取样式操作的时候，如果是多个元素，那么只会返回第一个元素的值。</li></ol></blockquote><p>class类操作</p><blockquote><p>addClass(“A”)     追加一个类<br>removeClass(“A”)  将指定类移除<br>toggleClass(“A”)  如果有A将移除，如果没有将添加。<br>hasClass(“A”)     用于判断是否含有指定样式，返回值为true false</p></blockquote><h2 id="三-jQuery尺寸和位置操作"><a href="#三-jQuery尺寸和位置操作" class="headerlink" title="三. jQuery尺寸和位置操作"></a>三. jQuery尺寸和位置操作</h2><h3 id="3-1-CSS尺寸"><a href="#3-1-CSS尺寸" class="headerlink" title="3.1 CSS尺寸"></a>3.1 CSS尺寸</h3><blockquote><p>height() 获得 或 设置 高度    //不包括内边距、边框和外边距<br>width()获得 或 设置 宽度</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">"height:100px;width:110px"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">$(<span class="string">"div"</span>).css(<span class="string">"border"</span>,<span class="string">"1px solid red"</span>);</span><br><span class="line">alert($(<span class="string">"div"</span>).height()); <span class="comment">//数字类型</span></span><br><span class="line">alert($(<span class="string">"div"</span>).width());</span><br><span class="line">$(<span class="string">"div"</span>).height(<span class="string">"300px"</span>); <span class="comment">//设置高度，值可以是数字也可以是字符串</span></span><br></pre></td></tr></table></figure><p>获取可视区宽高度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取可视区宽度</span></span><br><span class="line">$(<span class="built_in">window</span>).width();</span><br><span class="line"><span class="comment">// 获取可视区高度</span></span><br><span class="line">$(<span class="built_in">window</span>).height();</span><br></pre></td></tr></table></figure><blockquote><p>css获取到的宽高是带 px 的,需要数值则需要用parseInt()转换</p><p>css设置样式可不加px</p></blockquote><h3 id="3-2-innerWidth-outerWidth"><a href="#3-2-innerWidth-outerWidth" class="headerlink" title="3.2 innerWidth/outerWidth"></a>3.2 innerWidth/outerWidth</h3><blockquote><p>innerWidth()/innerHeight()    方法返回元素的宽度/高度（包括内边距）。 —&gt;clientWidth<br>outerWidth()/outerHeight()  方法返回元素的宽度/高度（包括内边距和边框）。 —&gt;offsetWidth<br>outerWidth(true)/outerHeight(true)  方法返回元素的宽度/高度（包括内边距、边框和外边距）。</p></blockquote><h3 id="3-3-scrollTop与scrollLeft"><a href="#3-3-scrollTop与scrollLeft" class="headerlink" title="3.3 scrollTop与scrollLeft"></a>3.3 scrollTop与scrollLeft</h3><p>获取页面滚出的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取页面被滚出的高度</span></span><br><span class="line">$(<span class="built_in">window</span>).scrollTop();</span><br><span class="line"><span class="comment">// 获取页面被滚出的宽度</span></span><br><span class="line">$(<span class="built_in">window</span>).scrollLeft();</span><br></pre></td></tr></table></figure><h3 id="3-4-offset方法与position方法"><a href="#3-4-offset方法与position方法" class="headerlink" title="3.4 offset方法与position方法"></a>3.4 offset方法与position方法</h3><p>offset()</p><p>offset方法获取元素距离document的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取元素距离document的位置,返回值为对象：&#123;left:100, top:100&#125;</span></span><br><span class="line">$(selector).offset();</span><br><span class="line"><span class="comment">//设置位置</span></span><br><span class="line">$(<span class="string">"div"</span>).offset(&#123;<span class="string">"top"</span>:<span class="number">0</span>,<span class="string">"left"</span>:<span class="number">0</span>&#125;);<span class="comment">//不用加px</span></span><br></pre></td></tr></table></figure><p>position方法获取的是元素距离第一个定位了的父元素(offsetParent)的位置</p><p>获取相对于其最近的有定位的父元素的位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// position仅用于获取当前元素相对于父元素的位置，不可以设置。如果非要设置，需要引入jquery-ui.js</span><br><span class="line">$(selector).position();</span><br></pre></td></tr></table></figure><h2 id="四-jQuery文档处理"><a href="#四-jQuery文档处理" class="headerlink" title="四.jQuery文档处理"></a>四.jQuery文档处理</h2><h3 id="4-1-创建节点"><a href="#4-1-创建节点" class="headerlink" title="4.1 创建节点"></a>4.1 创建节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'&lt;span&gt;这是一个span元素&lt;/span&gt;'</span>);</span><br></pre></td></tr></table></figure><h3 id="4-2-内部插入-不可重复插入"><a href="#4-2-内部插入-不可重复插入" class="headerlink" title="4.2 内部插入(不可重复插入)"></a>4.2 内部插入(不可重复插入)</h3><p>第一种方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">A.append(B)  将B插入到A的内部后面（之后的串联操作，操作A）</span><br><span class="line">&lt;A&gt;</span><br><span class="line">&lt;C&gt;<span class="xml"><span class="tag">&lt;/<span class="name">C</span>&gt;</span></span></span><br><span class="line">&lt;C&gt;<span class="xml"><span class="tag">&lt;/<span class="name">C</span>&gt;</span></span></span><br><span class="line">&lt;C&gt;<span class="xml"><span class="tag">&lt;/<span class="name">C</span>&gt;</span></span></span><br><span class="line">&lt;B&gt;<span class="xml"><span class="tag">&lt;/<span class="name">B</span>&gt;</span></span></span><br><span class="line">&lt;A&gt;</span><br><span class="line"></span><br><span class="line">A.prepend(B) 将B插入到A的内部前面</span><br><span class="line">&lt;A&gt;</span><br><span class="line">&lt;B&gt;<span class="xml"><span class="tag">&lt;/<span class="name">B</span>&gt;</span></span></span><br><span class="line">&lt;C&gt;<span class="xml"><span class="tag">&lt;/<span class="name">C</span>&gt;</span></span></span><br><span class="line">&lt;C&gt;<span class="xml"><span class="tag">&lt;/<span class="name">C</span>&gt;</span></span></span><br><span class="line">&lt;C&gt;<span class="xml"><span class="tag">&lt;/<span class="name">C</span>&gt;</span></span></span><br><span class="line">&lt;A&gt;</span><br></pre></td></tr></table></figure><p>第二种方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">A.appendTo(B) 将A插入到B的内部后面 （之后的串联操作，操作A）</span><br><span class="line">&lt;A&gt;</span><br><span class="line">&lt;C&gt;<span class="xml"><span class="tag">&lt;/<span class="name">C</span>&gt;</span></span></span><br><span class="line">&lt;C&gt;<span class="xml"><span class="tag">&lt;/<span class="name">C</span>&gt;</span></span></span><br><span class="line">&lt;C&gt;<span class="xml"><span class="tag">&lt;/<span class="name">C</span>&gt;</span></span></span><br><span class="line">&lt;B&gt;<span class="xml"><span class="tag">&lt;/<span class="name">B</span>&gt;</span></span></span><br><span class="line">&lt;A&gt;</span><br><span class="line"></span><br><span class="line">A.prependTo(B) 将A插入到B的内部前面</span><br><span class="line">&lt;B&gt;</span><br><span class="line">&lt;A&gt;<span class="xml"><span class="tag">&lt;/<span class="name">A</span>&gt;</span></span></span><br><span class="line">....</span><br><span class="line">&lt;B&gt;</span><br></pre></td></tr></table></figure><h3 id="4-3-外部插入"><a href="#4-3-外部插入" class="headerlink" title="4.3 外部插入"></a>4.3 外部插入</h3><p>第一种方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A.insertAfter(B) , 将A插入到B后面（同级）</span><br><span class="line">......</span><br><span class="line">&lt;B&gt;&lt;/B&gt;</span><br><span class="line">&lt;A&gt;&lt;/A&gt;</span><br><span class="line">A.insertBefore(B) 将A插入到B前面</span><br><span class="line">&lt;A&gt;&lt;/A&gt;</span><br><span class="line">&lt;B&gt;&lt;/B&gt;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>第二种方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A.after(B)  , 将B插入到A后面（同级）</span><br><span class="line">......</span><br><span class="line">&lt;A&gt;&lt;/A&gt;</span><br><span class="line">&lt;B&gt;&lt;/B&gt;</span><br><span class="line">A.before(B) ，将B插入到A前面</span><br><span class="line">&lt;B&gt;&lt;/B&gt;</span><br><span class="line">&lt;A&gt;&lt;/A&gt;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h3 id="4-4-删除节点"><a href="#4-4-删除节点" class="headerlink" title="4.4 删除节点"></a>4.4 删除节点</h3><blockquote><p>empty()  清空标签体（清空文本节点和子节点）,自身保留(清理门户),会清除子元素上绑定的内容<br>remove() 删除当前对象。如果之后再使用，元素本身保留，绑定事件 或 绑定数据 都会被移除<br>detach() 删除当前对象。如果之后再使用，元素本身保留，绑定事件 或 绑定数据 都保留</p></blockquote><p>注意:$(‘div’).html(‘’);// 使用html方法来清空元素，不推荐使用，会造成内存泄漏，绑定的事件不会被清除。</p><h3 id="4-5-复制节点"><a href="#4-5-复制节点" class="headerlink" title="4.5 复制节点"></a>4.5 复制节点</h3><p>clone(even)</p><p>even ：指示事件处理函数是否会被复制。V1.5以上版本默认值是：false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">$("body").append($('div').clone(true));</span></span><br></pre></td></tr></table></figure><h3 id="4-6-替换节点"><a href="#4-6-替换节点" class="headerlink" title="4.6 替换节点"></a>4.6 替换节点</h3><p>A.replaceWith(B) ，使用B将A替换掉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;p&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">$("p").replaceWith("&lt;a&gt;xxxx&lt;/</span>a&gt;<span class="string">");</span></span><br></pre></td></tr></table></figure><p>A.replaceAll(B) ，使用A替换B</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;p&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;p&lt;/</span>p&gt;</span><br><span class="line">&lt;p&gt;p&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">$("&lt;a&gt;ssss&lt;/</span>a&gt;<span class="string">").replaceAll("</span>p<span class="string">");</span></span><br></pre></td></tr></table></figure></h6></h1>]]></content>
      
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript冒泡事件机制</title>
      <link href="/passages/Javascript%E5%86%92%E6%B3%A1%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
      <url>/passages/Javascript%E5%86%92%E6%B3%A1%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript冒泡事件机制"><a href="#Javascript冒泡事件机制" class="headerlink" title="Javascript冒泡事件机制"></a>Javascript冒泡事件机制</h1><h2 id="1-事件"><a href="#1-事件" class="headerlink" title="1.事件"></a>1.事件</h2><p>在浏览器端的应用平台，基本是都是用事件来驱动的</p><blockquote><p>事件：某个动作发生，然后做出相应的动作</p></blockquote><p>浏览器中，事件表示某些事情发生的信号。</p><h2 id="2-冒泡机制"><a href="#2-冒泡机制" class="headerlink" title="2.冒泡机制"></a>2.冒泡机制</h2><p>首先，什么是冒泡？</p><p>想象一下，当水底有气泡的时候，气泡是从最底部由深向浅向上上升，在这过程，气泡会经过不同深度的水。</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1555859925639&di=ca1d0178261109df7185451c3e7f2650&imgtype=0&src=http%3A%2F%2Fimage.tupian114.com%2F20121017%2F13495375.jpg" width="500"></p><p>联想：气泡就相当于事件，水就如同整个Dom树，事件从Dom树的底部层层向上传递，直到达到Dom的根节点</p><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><p>我们写一个HTML页面，其中包含三个Dom元素，div外，div中，span内，其中外包含中包含内。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">"body"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sapn</span> <span class="attr">id</span>=<span class="string">"span"</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">sapn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(0, 252, 134);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>界面如下：</p><p><img src="https://i.loli.net/2019/04/21/5cbc65d014077.png"></p><p>接下来我们实现如下功能：</p><blockquote><p>body添加click事件监听，当body捕获到event事件时，输出事件发生的事件和触发事件的节点信息</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"body"</span>).addEventListener(<span class="string">"click"</span>,eventHandler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eventHandler</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"时间："</span>+<span class="keyword">new</span> <span class="built_in">Date</span>(event.timeStamp)+<span class="string">" 产生事件的节点："</span> + event.target.id +<span class="string">"  当前节点："</span>+event.currentTarget.id);</span><br><span class="line">&#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>我们依次点击“这是span”，div中，div外和body，得到以下信息</p><p><img src="https://i.loli.net/2019/04/21/5cbc67a0af5e4.png"></p><p>我们可以得出结论：</p><p>无论是body，body的子元素div外，还是div外的子元素div中，以及span，当这些被点击时，会产生click事件，并且最后都会传到body被捕获，接着再调用相关处理时间函数。</p><p>示意图如下：</p><p><img src="https://i.loli.net/2019/04/21/5cbc68889eb48.png"></p><p>事件在传递过程中会传递以下信息：</p><blockquote><p>事件发生时间+事件发声地点+事件类型+事件当前处理者+其他</p></blockquote><p><img src="https://i.loli.net/2019/04/21/5cbc69384d962.png"></p><h2 id="3-终止事件冒泡"><a href="#3-终止事件冒泡" class="headerlink" title="3.终止事件冒泡"></a>3.终止事件冒泡</h2><p>现在，我们这样，当点击各自的部分时，我们让他们各自产生提示信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"box1"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是最外层div。"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"box2"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是中间div。"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"span"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是span。"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>当我们点击span时，会弹出以下信息</p><p><img src="https://i.loli.net/2019/04/21/5cbc6aea9450b.png"></p><p>显示我们并不想要这样，我们只想点击哪部分就显示哪部分的提示。那么为什么会这样呢？原因就在于冒泡的机制，当我们点击span时，span会将事件冒泡给div中，然后再冒泡给div外。当冒泡到相应的元素是会触发响应函数，在从内向外的传递过程中，依次打印了各自的信息。</p><p>原理清楚了，那么该如何阻止事件的冒泡呢？</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>我们想象一下，一个气泡正从水底向上冒，现在我们在水中，我们不想让他向上冒了怎么办？</p><p>对，把他扎破。没有了气泡自然也就不会有冒泡了。</p><p>类似，在某个节点中，如果不想让他处理向上传递，我们可以终止事件的冒泡：</p><p><code>event.stopPropagation()</code></p><p>这个函数可以终止事件的分发，使之不会向上层传递</p><p>我们修改script的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"box1"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是最外层div。"</span>);</span><br><span class="line">            event.stopPropagation();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"box2"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是中间div。"</span>);</span><br><span class="line">            event.stopPropagation();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"span"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是span。"</span>);</span><br><span class="line">            event.stopPropagation();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>当我们再次点击span时，只会有span提示。</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>讲方法二之前，我们先分清<strong>最初触发事件的节点引用</strong>和<strong>当前处理事件节点的引用 </strong></p><blockquote><p>最初触发事件的节点引用:即事件产生的节点</p><p>当前处理事件节点的引用 ：即处理当前事件的节点</p></blockquote><p>事件产生的节点只有一个，而在传递的过程中，节点都可以处理事件。那么我们可以设置：</p><blockquote><p>节点只处理自己触发的事件,不是自己产生的事件就不处理。</p></blockquote><p>event.target 引用了产生此event对象的dom 节点，而event.currrentTarget 则引用了当前处理节点，我们可以通过对比这两个target 是否相等来决定是否处理事件。</p><p>例如：当span 点击事件，产生一个event 事件对象，event.target 指向了span元素，span处理此事件时，event.currentTarget 指向的也是span元素，这时判断两者相等，则执行相应的处理函数。而事件传递给 div中 的时候，event.currentTarget变成 div中，这时候判断二者不相等，即事件不是div中本身产生的，就不作响应处理逻辑。 </p><p>因此我们修改script代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">   &lt;script&gt;</span><br><span class="line">       <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">document</span>.getElementById(<span class="string">"box1"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(event.target == event.currentTarget)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是最外层div。"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"box2"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(event.target == event.currentTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是中间div。"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"span"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(event.target == event.currentTarget)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是span。"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">   &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>同样可以达到我们想要的效果</p><p>那么这两个方法有什么不同呢？</p><h4 id="比较："><a href="#比较：" class="headerlink" title="比较："></a>比较：</h4><blockquote><p><strong>方法一在于取消事件冒泡，即当某些节点取消冒泡后，事件不会再传递；</strong></p><p><strong>方法二在于不阻止冒泡，过滤需要处理的事件，事件处理后还会继续传递；</strong></p></blockquote><h4 id="方法一缺点："><a href="#方法一缺点：" class="headerlink" title="方法一缺点："></a>方法一缺点：</h4><blockquote><p><strong>为了实现点击特定的元素显示对应的信息，方法一要求每个元素的子元素也必须终止事件的冒泡传递</strong> 。</p><p>比如，当span 元素的处理函数没有执行冒泡终止，则事件会传到div中上，这样会造成div中 的提示信息</p></blockquote><h4 id="方法二缺点："><a href="#方法二缺点：" class="headerlink" title="方法二缺点："></a>方法二缺点：</h4><blockquote><p><strong>增加了代码冗余和逻辑上的复杂度</strong></p><p>当有几十个，几百个，那么要求每一层都要有if(event.target == event.currentTarget) </p></blockquote><h3 id="方法改进"><a href="#方法改进" class="headerlink" title="方法改进"></a>方法改进</h3><p>我们看方法二，</p><p>方法二的原理是 <strong>元素收到事件后，判断事件是否符合要求，然后做相应的处理，然后事件继续冒泡往上传递；</strong> </p><p>既然事件是冒泡传递的，那可不可以让某个父节点统一处理事件，通过判断事件的发生地（即事件产生的节点），然后做出相应的处理呢？</p><p>答案是可以的，下面通过给body 元素添加事件监听，然后通过判断event.target 然后对不同的target产生不同的行为。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"body"</span>).addEventListener(<span class="string">"click"</span>,eventPerformed);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eventPerformed</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> target = event.target;</span><br><span class="line"><span class="keyword">switch</span> (target.id) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"span"</span>: </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是span。"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"box1"</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我是外层div。"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"box2"</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我是中间div。"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>结果是点击谁谁会提示！</p><blockquote><p>我们把本来每个元素都要有的处理函数，都交给了其祖父节点body 元素来完成了，也就是说，span,div中,div外 将自己的响应逻辑委托给body，让它来完成相应逻辑，自己不实现相应逻辑，这个模式，就是所谓的事件委托。</p></blockquote><p>如图</p><p><img src="https://i.loli.net/2019/04/21/5cbc72740fae8.png"></p><p>本篇博客参考    <a href="https://blog.csdn.net/u010349169/article/details/23927347" target="_blank" rel="noopener">https://blog.csdn.net/u010349169/article/details/23927347</a> </p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TODOS案例（二）</title>
      <link href="/passages/TODOS%E6%A1%88%E4%BE%8B%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/passages/TODOS%E6%A1%88%E4%BE%8B%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="TODOS案例（二）"><a href="#TODOS案例（二）" class="headerlink" title="TODOS案例（二）"></a>TODOS案例（二）</h1><h2 id="界面样式设计"><a href="#界面样式设计" class="headerlink" title="界面样式设计"></a>界面样式设计</h2><p>上一期我们简单对页面元素进行了添加，本篇将对界面样式进行设置和布局。</p><p>最终呈现的效果如下图</p><p><img src="https://i.loli.net/2019/04/17/5cb731f72abe4.png"></p><p>先对input框进行调节，给input框一个边框以及颜色，内外边距统一为20rpx，边框圆角统一为5rpx，盒子阴影设置为5rpx模糊程度。</p><p>考虑到内部图片和输入框的横向排列，我们采用flex布局方式，给<code>.search</code>的display设为flex，为了使内部组件在水平线上对齐，设置align-item为center</p><p>代码如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.search</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1</span>rpx solid <span class="number">#e0e0e0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20</span>rpx;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20</span>rpx;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5</span>rpx;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>rpx <span class="number">#e0e0e0</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再设置添加图片大小以及设置和右侧文本框的距离：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.search</span> <span class="selector-tag">image</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">45</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">45</span>rpx;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样input部分调整完成！！</p><p>下面开始调整中部的样式，我们同样给边框设置相同样式！</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.todos</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1</span>rpx solid <span class="number">#e0e0e0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20</span>rpx;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20</span>rpx;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5</span>rpx;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>rpx <span class="number">#e0e0e0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在对内部item组件进行调整，并且同样采取flex布局，两端的icon我们在属性里设置为30大小，中间文本框采用flex自动撑开</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.todos</span> <span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20</span>rpx;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1</span>rpx solid <span class="number">#e0e0e0</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.todos</span> <span class="selector-class">.item</span> <span class="selector-tag">text</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>:<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30</span>rpx;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#888</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">20</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/17/5cb734d179b2f.png"></p><p>为了样式美观，我们将最后一个item的下边框去除</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.todos</span> <span class="selector-class">.item</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后设置底部部分，简单采用flex布局，并使布局方式justify-content设置为space-between</p><p>至此样式布局完成！！！</p><p>下篇将介绍如何抽象数据模型。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TODOS案例（一）</title>
      <link href="/passages/TODOS%E6%A1%88%E4%BE%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/passages/TODOS%E6%A1%88%E4%BE%8B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="界面结构设计"><a href="#界面结构设计" class="headerlink" title="界面结构设计"></a>界面结构设计</h1><p>通过对微信小程序的学习，我们简单通过所学的知识设计一个TODOS案例，整个TODOS包括添加事件功能，标记功能，删除事件功能，标记所有功能，剩余事件提醒功能以及清除所有事件功能。</p><p><img src="https://i.loli.net/2019/04/17/5cb671b771703.png"></p><blockquote><blockquote><p>本片微博将分为14篇对本案例过程进行详细介绍。</p></blockquote></blockquote><p>下面开始第一部分：界面结构设计。</p><p>首先在pages中新建todos页面以及内容</p><p><img src="https://i.loli.net/2019/04/17/5cb671b70cb56.png"></p><p>在app.json中注册主页面以及导航栏的标题</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "pages": [</span><br><span class="line">        "pages/todos/todos"</span><br><span class="line">        </span><br><span class="line">    ],</span><br><span class="line">    "<span class="selector-tag">window</span>": &#123;</span><br><span class="line">        "backgroundTextStyle": "light",</span><br><span class="line">        "<span class="selector-tag">navigationBarBackgroundColor</span>": "<span class="selector-id">#fff</span>",</span><br><span class="line">        "<span class="selector-tag">navigationBarTitleText</span>": "<span class="selector-tag">TODOS</span>",</span><br><span class="line">        "<span class="selector-tag">navigationBarTextStyle</span>": "<span class="selector-tag">black</span>"</span><br><span class="line">    &#125;,</span><br><span class="line">    "<span class="selector-tag">sitemapLocation</span>": "<span class="selector-tag">sitemap</span><span class="selector-class">.json</span>"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们根据界面图先设计好框架</p><p>整个界面可分为上中下三部分：</p><p>第一部分包括添加事件按钮，input输入框</p><p>第二部分包括事件完成勾选icon，事件展示text，以及事件清除icon</p><p>第三部分为底部事件提醒以及功能按钮</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class="container"&gt;</span><br><span class="line">    &lt;view class="search"&gt;</span><br><span class="line">        &lt;image src="../../images/plus.png" &gt;&lt;/image&gt;</span><br><span class="line">        &lt;input type='text' placeholder='Anything here ...'&gt;&lt;/input&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">    &lt;view class="todos"&gt;</span><br><span class="line">        &lt;view class='item'&gt;</span><br><span class="line">            &lt;icon type='success'&gt;&lt;/icon&gt;</span><br><span class="line">            &lt;text&gt;Learning HTML&lt;/text&gt;</span><br><span class="line">            &lt;icon type='clear'&gt;&lt;/icon&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">        &lt;view class='item'&gt;</span><br><span class="line">            &lt;icon type='circle'&gt;&lt;/icon&gt;</span><br><span class="line">            &lt;text&gt;Learning CSS&lt;/text&gt;</span><br><span class="line">            &lt;icon type='clear'&gt;&lt;/icon&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">        &lt;view class='item'&gt;</span><br><span class="line">            &lt;icon type='success'&gt;&lt;/icon&gt;</span><br><span class="line">            &lt;text&gt;Learning JS&lt;/text&gt;</span><br><span class="line">            &lt;icon type='clear'&gt;&lt;/icon&gt;&lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">    &lt;view class="footer"&gt;</span><br><span class="line">        &lt;text&gt;Toggle ALL&lt;/text&gt;</span><br><span class="line">        &lt;text&gt;0 item left&lt;/text&gt;</span><br><span class="line">        &lt;text&gt;Clear&lt;/text&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>代码中的text文档暂时用文字代表，之后通过事件绑定进行渲染</p><p>整个框架搭建完成后如图所示</p><p><img src="https://i.loli.net/2019/04/17/5cb671b767724.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伸缩布局</title>
      <link href="/passages/%E4%BC%B8%E7%BC%A9%E5%B8%83%E5%B1%80/"/>
      <url>/passages/%E4%BC%B8%E7%BC%A9%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Flex伸缩布局"><a href="#Flex伸缩布局" class="headerlink" title="Flex伸缩布局"></a>Flex伸缩布局</h1><p>Flexible意为可伸缩的，Box意为盒子，可以理解为一种新式的盒模型——伸缩盒模型。由CSS3规范提出，这是在原有的大家非常熟悉的block, inline-block, inline的基础上延伸出的新一代布局模式。</p><h2 id="伸缩的基本概念"><a href="#伸缩的基本概念" class="headerlink" title="伸缩的基本概念"></a>伸缩的基本概念</h2><p><img src="/passages/伸缩布局/pic1.png" alt></p><h3 id="1-Flex-container"><a href="#1-Flex-container" class="headerlink" title="1.Flex container"></a>1.Flex container</h3><p>即伸缩盒容器，可以理解为将要被分的房子，分之前需要将display属性声明为flex或者inline-flex</p><h3 id="2-Flex-item"><a href="#2-Flex-item" class="headerlink" title="2.Flex item"></a>2.Flex item</h3><p>即伸缩项可以理解为房子里的居民，他们会占有一定的住房面积，我们先用代码来解释一下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>样式设置为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.container</span> &#123;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">     <span class="attribute">display</span>: flex;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">           <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">background-color</span>: blue;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-class">.item2</span> &#123;</span><br><span class="line">           <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">background-color</span>: yellow;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-class">.item3</span> &#123;</span><br><span class="line">           <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">background-color</span>: red;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>结果如图所示:</p><p><img src="/passages/伸缩布局/pic2.png" alt></p><p>可以看到房子被平分成三分！</p><p>但是有人如果想住大点的房子，我们可以直接改变flex的值来实现，例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.item1 &#123;</span><br><span class="line">         flex: 1;</span><br><span class="line">         width: 100px;</span><br><span class="line">         height: 100px;</span><br><span class="line">         background-color: blue;</span><br><span class="line">     &#125;</span><br><span class="line">     .item2 &#123;</span><br><span class="line">         flex: 1;</span><br><span class="line">         width: 100px;</span><br><span class="line">         height: 100px;</span><br><span class="line">         background-color: yellow;</span><br><span class="line">     &#125;</span><br><span class="line">     .item3 &#123;</span><br><span class="line">         flex: 2;</span><br><span class="line">         width: 100px;</span><br><span class="line">         height: 100px;</span><br><span class="line">         background-color: red;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h3 id="3-Axes轴"><a href="#3-Axes轴" class="headerlink" title="3.Axes轴"></a>3.Axes轴</h3><p>图中分别标注了主轴和次轴，但是事实上那一条是主轴可以由我们自己规定。</p><blockquote><p>flex-direction 此属性规定哪条轴为主轴。</p><p>justify-content 此属性设置了伸缩项在主轴方向上的排列方式，这个稍后解释。</p><p>align-items 此属性和上面的justify-content相对，表示伸缩项在次轴上的排列方式。</p><p>align-self 此属性规定某一个特定的伸缩项元素在次轴上的布局方式，在某个元素上设置该属性会覆盖它的align-items属性。也就是这个属性会让某个元素更有个性，不走寻常路~</p></blockquote><h3 id="4-flex-direction"><a href="#4-flex-direction" class="headerlink" title="4.flex-direction"></a>4.flex-direction</h3><p>当我们不想沿着默认的方向分房子的时候，我们可以改变<code>flex-direction</code>属性的值来改变主轴和方向，该属性默认的取值为row；</p><p>当取值为row-reverse时，伸缩项逆置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">display</span>: flex;</span><br><span class="line">            <span class="attribute">flex-direction</span>: row-reverse;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><img src="/passages/伸缩布局/pic3.png" alt></p><p>当此属性设置为<code>column</code>时，主次轴就会对调，元素的排列方向也会随之改变：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            display: flex;</span><br><span class="line">            flex-direction: column;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><img src="/passages/伸缩布局/pic5.png" alt></p><p>至于<code>flex: column-reverse</code>的含义和row-reverse类似</p><h3 id="5-justify-contents"><a href="#5-justify-contents" class="headerlink" title="5.justify-contents"></a>5.justify-contents</h3><p>有的时候，大家挨着住，一点空隙都没有也会很难受，连个过道都没有，隐私也不能保证对吧。这个时候，我们可以改变分配政策了，不再按比例分配，而是定额分配，每个人的面积是确定的。多出的房屋面积改成公共区域。</p><p>为了更好地看见区别，我们将每一个item宽度缩小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">           <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">background-color</span>: blue;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-class">.item2</span> &#123;</span><br><span class="line">           <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">background-color</span>: yellow;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-class">.item3</span> &#123;</span><br><span class="line">           <span class="attribute">flex</span>: <span class="number">2</span>;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">background-color</span>: red;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><blockquote><p>设定了<code>width</code>属性后也要记得去掉<code>flex</code>属性的声明，不然<code>flex</code>属性的效果仍然会把<code>width</code>覆盖掉<br>同时，如果<code>width</code>属性也不设定的话，元素宽度会表现为内容的宽度，即当伸缩项内部无内容时，将不会进行渲染，其表现就和<code>display: none;</code>一样。</p></blockquote><p>这时，在容器上声明<code>justify-content</code>属性就可以安排伸缩项的位置了：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.contianer</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/passages/伸缩布局/pic6.png" alt></p><h3 id="6-align-items"><a href="#6-align-items" class="headerlink" title="6.align-items"></a>6.align-items</h3><p>这项属性会改变次轴上元素排列的方式，对于本例来说原来次轴方向上元素的高度是表现为<code>height: 100%;</code>的，设定了<code>align-items</code>属性后，其高度表现就会发生改变了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于各项的作用，可以动手试试！</p><h3 id="7-order"><a href="#7-order" class="headerlink" title="7.order"></a>7.order</h3><p>在伸缩项上声明此属性，可以无视HTML结构的顺序而按照<code>order</code>从小到大的顺序沿<code>flex-direction</code>方向排列。比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">1</span>；</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item3</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/passages/伸缩布局/pic7.png" alt></p><h3 id="8-flex-wrap"><a href="#8-flex-wrap" class="headerlink" title="8.flex-wrap"></a>8.flex-wrap</h3><p>此属性的默认值为<code>nowrap</code>，也就是忽略伸缩项的宽度，管你要多少住房面积，通通按照<code>flex</code>属性说好的分配，不许换行。</p><p>为了方便观察，我们先将盒子宽度设为150px；</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: blue;</span><br><span class="line">        <span class="attribute">order</span>: <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">       <span class="selector-class">.container</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">flex-direction</span>: row;</span><br><span class="line">        flex-wrap: nowrap;//wrap</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/passages/伸缩布局/pic8.png" alt></p><p><img src="/passages/伸缩布局/pic9.png" alt></p><h3 id="9-flex-grow，flex-shrink-和-flex-basis"><a href="#9-flex-grow，flex-shrink-和-flex-basis" class="headerlink" title="9.flex-grow，flex-shrink 和 flex-basis"></a>9.flex-grow，flex-shrink 和 flex-basis</h3><p>上文提到的<code>flex</code>属性实际上是这三个属性的简写形式。这三个属性有相似性，都是表示项与项之间分配空间的相对比例关系，不同之处在于：</p><p><code>flex-grow</code>属性：属性值为该伸缩项所占空间相对于其他伸缩项（声明了<code>flex</code>相关属性的项）的比值。</p><p><code>flex-shrink</code>属性：该伸缩项相对于其他伸缩项缩小的比值，也就是说当<code>flex-shrink: 3;</code>时，该项所占空间为其他项的1/3。<br><code>flex-basis</code>属性：属性值为该项所占空间占容器空间的百分比。</p><p>注意：对于<code>flex-basis</code>属性，当所有项的属性值相加&lt;=100%时，会严格按照百分比值来渲染。当属性值相加&gt;100%时，元素并不会溢出，而是表现为两两之间所占空间大小遵循相互的百分比比值。也就是说当存在三个伸缩项且<code>flex-basis</code>值都为<code>50%</code>时，表现行为与三个项均为<code>flex: 1;</code>一样。</p><p>Flexible Boxes布局模式在响应式开发中尤其好用，对不同的终端，设置元素之间的空间分配关系将会变成一件非常简单的事。后期微信小程序中也是十分好用，伸缩盒布局和响应式布局中流行的流体布局哪种更好，还是可以结合起来，就看各位开发者发挥自己的聪明才智了！</p>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS学习总结（三）</title>
      <link href="/passages/JS%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/passages/JS%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="一，script标签书写位置"><a href="#一，script标签书写位置" class="headerlink" title="一，script标签书写位置"></a>一，script标签书写位置</h4><p><strong>js的代码可以分三个地方写:</strong></p><blockquote><h6 id="1-在html的文件中-script的标签中写js代码"><a href="#1-在html的文件中-script的标签中写js代码" class="headerlink" title="1.在html的文件中,script的标签中写js代码"></a>1.在html的文件中,script的标签中写js代码</h6><h6 id="2-js代码可以在html的标签中写—"><a href="#2-js代码可以在html的标签中写—" class="headerlink" title="2.js代码可以在html的标签中写—"></a>2.js代码可以在html的标签中写—</h6><h6 id="3-在js文件中可以写js代码-但是需要在html的页面中引入-script的标签中的src-”js的路径”"><a href="#3-在js文件中可以写js代码-但是需要在html的页面中引入-script的标签中的src-”js的路径”" class="headerlink" title="3.在js文件中可以写js代码,但是需要在html的页面中引入 script的标签中的src=”js的路径”"></a>3.在js文件中可以写js代码,但是需要在html的页面中引入 script的标签中的src=”js的路径”</h6></blockquote><h4 id="二，js代码的注意问题"><a href="#二，js代码的注意问题" class="headerlink" title="二，js代码的注意问题"></a>二，js代码的注意问题</h4><blockquote><h6 id="1-在一对script的标签中有错误的js代码-那么该错误的代码后面的js代码不会执行"><a href="#1-在一对script的标签中有错误的js代码-那么该错误的代码后面的js代码不会执行" class="headerlink" title="1.在一对script的标签中有错误的js代码,那么该错误的代码后面的js代码不会执行"></a>1.在一对script的标签中有错误的js代码,那么该错误的代码后面的js代码不会执行</h6><h6 id="2-如果第一对的script标签中有错误-不会影响后面的script标签中的js代码执行"><a href="#2-如果第一对的script标签中有错误-不会影响后面的script标签中的js代码执行" class="headerlink" title="2.如果第一对的script标签中有错误,不会影响后面的script标签中的js代码执行"></a>2.如果第一对的script标签中有错误,不会影响后面的script标签中的js代码执行</h6><h6 id="3-script的标签中可以写什么内容-type-”text-javascript”是标准写法或者写language-”JavaScript”都可以"><a href="#3-script的标签中可以写什么内容-type-”text-javascript”是标准写法或者写language-”JavaScript”都可以" class="headerlink" title="3.script的标签中可以写什么内容 type=”text/javascript”是标准写法或者写language=”JavaScript”都可以"></a>3.script的标签中可以写什么内容 type=”text/javascript”是标准写法或者写language=”JavaScript”都可以</h6><h6 id="但是-目前在我们的html页面中-type和language都可以省略-原因-html是遵循h5的标准"><a href="#但是-目前在我们的html页面中-type和language都可以省略-原因-html是遵循h5的标准" class="headerlink" title="但是,目前在我们的html页面中,type和language都可以省略,原因:html是遵循h5的标准"></a>但是,目前在我们的html页面中,type和language都可以省略,原因:html是遵循h5的标准</h6><h6 id="4-有可能会出现这种情况-script标签中可能同时出现type和language的写法"><a href="#4-有可能会出现这种情况-script标签中可能同时出现type和language的写法" class="headerlink" title="4.有可能会出现这种情况:script标签中可能同时出现type和language的写法."></a>4.有可能会出现这种情况:script标签中可能同时出现type和language的写法.</h6><h6 id="5-script标签在页面中可以出现多对"><a href="#5-script标签在页面中可以出现多对" class="headerlink" title="5.script标签在页面中可以出现多对"></a>5.script标签在页面中可以出现多对</h6><h6 id="6-script标签一般是放在body的标签的最后的-有的时候会在head标签中-目前讲课的时候都在body标签的后面-body中的最后"><a href="#6-script标签一般是放在body的标签的最后的-有的时候会在head标签中-目前讲课的时候都在body标签的后面-body中的最后" class="headerlink" title="6.script标签一般是放在body的标签的最后的,有的时候会在head标签中,目前讲课的时候都在body标签的后面(body中的最后)"></a>6.script标签一般是放在body的标签的最后的,有的时候会在head标签中,目前讲课的时候都在body标签的后面(body中的最后)</h6><h6 id="7-如果script标签是引入外部js文件的作用-那么这对标签中不要写任何的js代码-如果要写-重新写一对script标签-里面写代码"><a href="#7-如果script标签是引入外部js文件的作用-那么这对标签中不要写任何的js代码-如果要写-重新写一对script标签-里面写代码" class="headerlink" title="7.如果script标签是引入外部js文件的作用,那么这对标签中不要写任何的js代码,如果要写,重新写一对script标签,里面写代码"></a>7.如果script标签是引入外部js文件的作用,那么这对标签中不要写任何的js代码,如果要写,重新写一对script标签,里面写代码</h6></blockquote><h4 id="三，变量"><a href="#三，变量" class="headerlink" title="三，变量"></a>三，变量</h4><ul><li>变量:========&gt;</li><li>操作的数据都是在内存中操作</li><li>js中存储数据使用变量的方式(名字,值—&gt;数据)</li><li>js中声明变量都用var—-&gt;存储数据,数据应该有对应的数据类型</li><li>js中的字符串类型的值都用双引号或者单引号</li><li>存储一个数字10</li><li>变量的声明及赋值</li><li><code>var num=10;</code></li><li>存储一个名字</li><li><code>var name=&#39;小黑&#39;;</code><ul><li>变量—作用,存储数据的或者是操作数据<ul><li>变量声明(有var 有变量名字,没有值)</li><li>变量初始化(有var 有变量名字,有值)</li><li>变量声明的方式:</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//一次性声明多个变量</span></span><br><span class="line"> <span class="keyword">var</span> x,y,z,k,j;<span class="comment">//都是声明,没有赋值</span></span><br><span class="line"><span class="comment">//变量的初始化(变量声明的同时并且赋值了)</span></span><br><span class="line"><span class="comment">//   = 的意义:赋值的含义</span></span><br><span class="line"><span class="keyword">var</span> number = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//存储一个5</span></span><br><span class="line"><span class="keyword">var</span> number2 = <span class="number">5</span>;</span><br><span class="line"><span class="comment">//存储一个人的名字</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"小黑"</span>;</span><br><span class="line"><span class="comment">//存储真(true)</span></span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//存储一个null---&gt;相当于是</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// var 变量名字;</span></span><br></pre></td></tr></table></figure><h4 id="四，变量总结"><a href="#四，变量总结" class="headerlink" title="四，变量总结"></a>四，变量总结</h4><ul><li>变量作用:用来操作数据的(可以存储,可以读取)<ul><li>变量的声明:没有赋值</li><li>var 变量名;</li><li>变量的初始化:有赋值</li><li>var 变量名=值;</li><li>注意的基本的代码的规范</li><li>js中声明变量都用var</li><li>js中的每一行代码结束都应该有分号;(写代码有分号的习惯)</li><li>js中的大小写是区分的: var N=10; n</li><li>js中的字符串可以使用单引号,也可以使用双引号,目前我们暂时使用双引号</li><li>变量名的注意问题—变量名的命名规范,要遵循驼峰命名法</li><li>1.变量的名字要有意义,</li><li>2.变量名有一定的规范:一般以字母,$符号,下划线开头,中间或者后面可以有$符号,字母,数字</li><li>3.变量名一般都是小写的</li><li>4.变量名如果是多个单词,第一个单词的首字母是小写的,后面的所有的单词的首字母都是大写的,这种命名方式称为:驼峰命名法</li><li>5.不能使用关键字(系统自带的一些单词,不能使用)</li><li>6.不会单词用拼音,拼音也要遵循驼峰命名法</li><li>var bigNumber=10;</li><li>声明变量并初始化—变量的初始化—-声明变量赋值</li><li>声明多个变量然后一个一个的赋值</li></ul></li></ul><p>声明多个变量并且赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">100</span>;</span><br><span class="line"><span class="comment">//输出这个变量的值</span></span><br><span class="line">alert(num);<span class="comment">//弹框</span></span><br><span class="line"><span class="comment">//浏览器的控制台在浏览器中的开发人员工具中(快捷键:F12)的console的选项中</span></span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="comment">//把内容输出在浏览器的控制台中</span></span><br><span class="line"><span class="comment">//    //依次的赋值</span></span><br><span class="line">num1=<span class="number">10</span>;</span><br><span class="line">num2=<span class="number">20</span>;</span><br><span class="line">num3=<span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num1=<span class="number">10</span>,num2=<span class="number">20</span>,num3=<span class="number">30</span>;</span><br><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> $<span class="keyword">break</span>=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> shuZi=<span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="五，数字交换的三种方式"><a href="#五，数字交换的三种方式" class="headerlink" title="五，数字交换的三种方式"></a>五，数字交换的三种方式</h4><p>变量的交换的第一个思路:使用第三方的变量进行交换<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num2=<span class="number">20</span>;</span><br><span class="line"><span class="comment">//   //把num1这个变量的值取出来放在temp变量中</span></span><br><span class="line"><span class="keyword">var</span> temp=num1;</span><br><span class="line"><span class="comment">//   //把num2这个变量的值取出来放在num1变量中</span></span><br><span class="line">num1=num2;</span><br><span class="line"><span class="comment">//   //把temp变量的值取出来放在num2变量中</span></span><br><span class="line">num2=temp;</span><br><span class="line"><span class="built_in">console</span>.log(num1);<span class="comment">//20</span></span><br><span class="line"><span class="built_in">console</span>.log(num2);<span class="comment">//10</span></span><br></pre></td></tr></table></figure></p><p>第二种方式交换:一般适用于数字的交换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num2 = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//    //把num1的变量中的值和num2变量中的值,取出来相加,重新赋值给num1这个变量</span></span><br><span class="line">num1 = num1 + num2;<span class="comment">//30</span></span><br><span class="line"><span class="comment">//    //num1变量的值和num2变量的值取出来,相减的结果重新赋值给num2</span></span><br><span class="line">num2 = num1 - num2;<span class="comment">//10</span></span><br><span class="line"><span class="comment">//    //num1变量的值和num2变量的值取出来,相减的结果重新赋值给num1</span></span><br><span class="line">num1 = num1 - num2;<span class="comment">//20</span></span><br><span class="line"><span class="built_in">console</span>.log(num1, num2);</span><br></pre></td></tr></table></figure><p>Ctrl+Alt+L—–&gt;格式化代码的(设置代码有很好的格式,代码是错误的,这个快捷键是没有效果)</p><p>注意；变量的名字是不能重名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num1=<span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num1);</span><br></pre></td></tr></table></figure><p>扩展的变量的交换:只需要看代码,不需要理解—位运算<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num2 = <span class="number">20</span>;</span><br><span class="line">num1 = num1 ^ num2;</span><br><span class="line">num2 = num1 ^ num2;</span><br><span class="line">num1 = num1 ^ num2;</span><br><span class="line"><span class="built_in">console</span>.log(num1, num2);</span><br></pre></td></tr></table></figure></p><h4 id="六，数据类型"><a href="#六，数据类型" class="headerlink" title="六，数据类型"></a>六，数据类型</h4><p>声明变量并初始化<br>var num=10;<br>js中的数据类型有哪些?<br>js中的原始数据类型:number,string,boolean,null,undefined,object</p><ul><li>number:数字类型(整数和小数)</li><li>string:字符串类型(的值一般都是用单引号或者是双引号括起来)  “34”</li><li>boolean:布尔类型(值只有两个,true(真1),false(假0))</li><li>null:空类型,值只有一个:null,一个对象指向为空了,此时可以赋值为null</li><li>undefined:未定义,值只有一个:undefined</li><li>什么情况下的结果是undefined</li><li>变量声明了,没有赋值,结果是undefined</li><li>函数没有明确返回值,如果接收了,结果也是undefined</li><li>如果一个变量的结果是undefined和一个数字进行计算,结果:NaN不是一个数字,也没有意义</li><li>object:对象—-&gt;</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num;    <span class="keyword">var</span> num;</span><br><span class="line"><span class="built_in">console</span>.log(num+<span class="number">10</span>);<span class="comment">//NaN-----not an number----&gt;不是一个数字`</span></span><br><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="string">`</span></span><br></pre></td></tr></table></figure><p>如何获取这个变量的数据类型是什么? 使用typeof 来获取<br>typeof 的使用的语法</p><ul><li>都可以获取这个变量的数据类型是什么!</li><li>typeof 变量名</li><li>typeof(变量名)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"小白"</span>;</span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> nll = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> undef;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="comment">//是使用typeof 获取变量的类型</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num);<span class="comment">//number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str);<span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> flag);<span class="comment">//boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(nll));<span class="comment">//是null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> nll);<span class="comment">//不是null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> undef);<span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> obj);<span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num));</span><br><span class="line"><span class="comment">//    console.log("10");</span></span><br><span class="line"><span class="comment">//    console.log(10);</span></span><br></pre></td></tr></table></figure><h4 id="七，数字类型"><a href="#七，数字类型" class="headerlink" title="七，数字类型"></a>七，数字类型</h4><ul><li>数字类型:number类型</li><li>无论是整数还是小数都是数字类型</li><li>不要用小数验证小数</li><li>不要使用NaN判断是不是NaN，应该使用isNaN(值或者是变量)</li><li>想要表示十进制:就是正常的数字</li><li>想要表示八进制:以0开头</li><li>想要表示十六进制:0x开头</li></ul><h4 id="八，字符串类型"><a href="#八，字符串类型" class="headerlink" title="八，字符串类型"></a>八，字符串类型</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"10"</span>;<span class="comment">//字符串</span></span><br><span class="line"><span class="keyword">var</span> str2=<span class="string">'20'</span>;<span class="comment">//字符串</span></span><br></pre></td></tr></table></figure><p>字符串可以使用单引号,也可以使用双引号</p><p>字符串的长度如何获取? 变量名.length</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"what are you no sha lei"</span>;</span><br><span class="line"><span class="comment">//    //字符串的个数有多少个?这个字符串的长度是多少</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> str1=<span class="string">"fdshfjworwoijpfskj;akjfpojfiwnmoiwajdoiwajiwaewowj"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str1.length);</span><br></pre></td></tr></table></figure><p>html中的转义符: &lt;  &lt; &gt; &gt; 空格: &nbsp;<br>js中的字符串里也有转义符</p><p>tab键—-水平制表符</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"哈哈\t嘎嘎"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"哈哈\"嘎嘎"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'哈哈\'嘎嘎'</span>);<span class="string">`</span></span><br></pre></td></tr></table></figure><p>字符串的拼接: 使用+可以把多个字符串放在一起形成一个字符串<br>只要有一个是字符串,其他的是数字,那么结果也是拼接,不是相加<br>如果有一个是字符串,另一个不是字符串,使用- 号,此时会发生计算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1=<span class="string">"您好"</span>;</span><br><span class="line"><span class="keyword">var</span> str2=<span class="string">"我好"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str1+str2);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"哈哈"</span>+<span class="string">"嘎嘎"</span>+<span class="string">"嘿嘿"</span>);</span><br><span class="line"><span class="keyword">var</span> str1=<span class="string">"10"</span>;</span><br><span class="line"><span class="keyword">var</span> str2=<span class="string">"20"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str1+str2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1=<span class="string">"10"</span>;</span><br><span class="line"><span class="keyword">var</span> str2=<span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str1+str2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">"10"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="number">5</span>;</span><br><span class="line"><span class="comment">//    //浏览器帮助我们自动的把字符串类型转成了数字类型,这种方式叫:隐式转换</span></span><br><span class="line"><span class="built_in">console</span>.log(str1-str2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1=<span class="string">"10"</span>;</span><br><span class="line"><span class="keyword">var</span> str2=<span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str1*str2);</span><br></pre></td></tr></table></figure><h4 id="九，布尔类型"><a href="#九，布尔类型" class="headerlink" title="九，布尔类型"></a>九，布尔类型</h4><p>布尔类型:的值有两个,一个是true(真),一个是false(假)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flag=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fdf=<span class="literal">null</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><h4 id="十，类型转换"><a href="#十，类型转换" class="headerlink" title="十，类型转换"></a>十，类型转换</h4><p>其他类型转数字类型:三种方式:<br>   1.parseInt();//转整数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"10"</span>));<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"10afrswfdsf"</span>));<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"g10"</span>));<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"1fds0"</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"10.98"</span>));<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"10.98fdsfd"</span>));<span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>  2.parseFloat()//转小数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"10"</span>));<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"10afrswfdsf"</span>));<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"g10"</span>));<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"1fds0"</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"10.98"</span>));<span class="comment">//10.98</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"10.98fdsfd"</span>));<span class="comment">//10.98</span></span><br></pre></td></tr></table></figure><p>3.Number();//转数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"10"</span>));<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"10afrswfdsf"</span>));<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"g10"</span>));<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"1fds0"</span>));<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"10.98"</span>));<span class="comment">//10.98</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"10.98fdsfd"</span>));<span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><blockquote><p>总结:想要转整数用parseInt(),想要转小数用parseFloat()<br>想要转数字:Number();要比上面的两种方式严格</p></blockquote><p>   其他类型转字符串类型<br>    1.toString()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toString());<span class="comment">//字符串类型</span></span><br></pre></td></tr></table></figure><ol start="2"><li>String()</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var num1=20;</span><br><span class="line">console.log(String(num1));</span><br></pre></td></tr></table></figure><p> 如果变量有意义调用.toString()使用转换<br> 如果变量没有意义使用String()转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num2;</span><br><span class="line"><span class="built_in">console</span>.log(num2.toString());</span><br><span class="line"><span class="keyword">var</span> num3=<span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num3.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个可以</span></span><br><span class="line"><span class="keyword">var</span> num2;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(num2));</span><br><span class="line"><span class="keyword">var</span> num3=<span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(num3));</span><br></pre></td></tr></table></figure><p>其他类型转布尔类型</p><ol><li>Boolean(值);</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">1</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">11</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">-10</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">"哈哈"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">""</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">null</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">undefined</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(+str);</span><br></pre></td></tr></table></figure><h4 id="十一，操作符"><a href="#十一，操作符" class="headerlink" title="十一，操作符"></a>十一，操作符</h4><ul><li>操作符:一些符号—–用来计算<ul><li>算数运算符:  +  -  * / %</li><li>算数运算表达式:由算数运算符连接起来的表达式</li><li>一元运算符: 这个操作符只需要一个操作数就可以运算的符号  ++  –</li><li>二元运算符: 这个操作符需要两个操作数就可以运算,</li><li>三元运算符: —–不讲,明天讲</li><li>复合运算符: +=  -=  *= /= %=</li><li>复合运算表达式:由复合运算符连接起来的表达式</li><li><code>var num=10;</code></li><li><code>num+=10;------&gt;就是:num=num+10;</code></li><li><code>console.log(num);20</code></li><li>关系运算符: &gt;  &lt;  &gt;=  &lt;=  ==不严格的 ===严格的 !=不严格的不等 !==严格的不等</li><li>关系运算表达式:由关系运算符连接起来的表达式</li><li>关系运算表达式的结果是布尔类型</li><li>逻辑运算符:</li><li>&amp;&amp;—逻辑与–并且</li><li>||—逻辑或—或者</li><li>!—逻辑非—取反–取非</li><li>逻辑运算表达式:由逻辑运算符连接起来的表达式</li><li>表达式1&amp;&amp;表达式2</li><li>如果有一个为false,整个的结果就是false</li><li>表达式1||表达式2</li><li>如果有一个为true,整个的结果为true</li><li>!表达式1</li><li>表达式1的结果是true,整个结果为false</li><li>表达式1的结果是false,整个结果为true</li><li>赋值运算符:  =</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2=<span class="number">20</span>;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"><span class="built_in">console</span>.log(num1==num2&amp;&amp;<span class="number">5</span>&gt;<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> num=<span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num&gt;<span class="number">10</span>||<span class="number">5</span>&lt;<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flag=<span class="literal">false</span>;</span><br><span class="line"><span class="built_in">console</span>.log(!flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> sum=(num+<span class="number">10</span>)*<span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = (<span class="number">4</span> &gt;= <span class="number">6</span> || <span class="string">'人'</span> != <span class="string">'狗'</span> &amp;&amp; !(<span class="number">12</span> * <span class="number">2</span> == <span class="number">144</span>) &amp;&amp; <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> result2 =( <span class="number">5</span> == num / <span class="number">2</span> &amp;&amp; (<span class="number">2</span> + <span class="number">2</span> * num).toString() === <span class="string">'22'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> result=num/<span class="number">3</span>;<span class="comment">//num变量与3取余---&gt;10/3的余数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(result));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> result=num%<span class="number">3</span>;<span class="comment">//num变量与3取余---&gt;10/3的余数</span></span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> sum=(num+<span class="number">10</span>)+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">num %= <span class="number">5</span>;</span><br><span class="line">    <span class="comment">//    //    num=num-5;</span></span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"5"</span>;</span><br><span class="line"><span class="keyword">var</span> num=<span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str===num);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>&gt;<span class="number">10</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>&gt;=<span class="number">5</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>&gt;<span class="number">3</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>==<span class="number">10</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>字面量: 把一个值直接赋值给一个变量</p><p> 声明变量并初始化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> flag=<span class="literal">true</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"哈哈哈"</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> y=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> n=y;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html学习总结（一）</title>
      <link href="/passages/html%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/passages/html%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="一，浏览器内核"><a href="#一，浏览器内核" class="headerlink" title="一，浏览器内核"></a>一，浏览器内核</h3><h4 id="1-浏览器内核可分为渲染引擎和js引擎："><a href="#1-浏览器内核可分为渲染引擎和js引擎：" class="headerlink" title="1.浏览器内核可分为渲染引擎和js引擎："></a>1.浏览器内核可分为渲染引擎和js引擎：</h4><blockquote><p>渲染引擎:它负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。</p></blockquote><blockquote><p>JS 引擎:则是解析 Javascript 语言，执行 javascript语言来实现网页的动态效果。</p></blockquote><h4 id="2-常见浏览器分类"><a href="#2-常见浏览器分类" class="headerlink" title="2.常见浏览器分类"></a>2.常见浏览器分类</h4><p>（1） Trident（IE内核）</p><p>（2）Gecko（火狐）</p><p>（3）Webkit（Safari）</p><p>（4）Chromium（Chrome）</p><p>（5）Presto</p><h4 id="3-Web标准的构成"><a href="#3-Web标准的构成" class="headerlink" title="3.Web标准的构成"></a>3.Web标准的构成</h4><p>主要包括结构，样式和行为三个方面</p><blockquote><p>结构标准：结构用于对网页元素进行整理和分类，咱们主要学的是HTML。 最重要<br>表现标准：表现用于设置网页元素的版式、颜色、大小等外观样式，主要指的是CSS。<br>行为标准：行为是指网页模型的定义及交互的编写，咱们主要学的是 Javascript</p></blockquote><h4 id="4-Html语法骨架"><a href="#4-Html语法骨架" class="headerlink" title="4.Html语法骨架"></a>4.Html语法骨架</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HTML</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HTML</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>HTML标签：</p><p>作用所有HTML中标签的一个根节点。 最大的标签   根标签</p><p>head标签： 文档的头部</p><p>文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。</p><p>注意在head标签中我们必须要设置的标签是title</p><p>title标签： 文档的标题</p><p>作用：让页面拥有一个属于自己的标题。</p><p>body标签：文档的主体  以后我们的页面内容 基本都是放到body里面的</p><p>body 元素包含文档的所有内容（比如文本、超链接、图像、表格和列表等等。）</p></blockquote><h4 id="5-HTML标签分类"><a href="#5-HTML标签分类" class="headerlink" title="5.HTML标签分类"></a>5.HTML标签分类</h4><p>（1）双标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）单标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-HTML标签关系"><a href="#6-HTML标签关系" class="headerlink" title="6.HTML标签关系"></a>6.HTML标签关系</h4><p>（1）嵌套关系</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）并列关系</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7-文档类型-lt-DOCTYPE-gt"><a href="#7-文档类型-lt-DOCTYPE-gt" class="headerlink" title="7.文档类型&lt;!DOCTYPE&gt;"></a>7.文档类型&lt;!DOCTYPE&gt;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure><p>&lt;!DOCTYPE&gt; 标签位于文档的最前面，用于向浏览器说明当前文档使用哪种 HTML 或 XHTML 标准规范，必需在开头处使用&lt;!DOCTYPE&gt;标签为所有的XHTML文档指定XHTML版本和类型，只有这样浏览器才能按指定的文档类型进行解析。</p><h4 id="8-字符集"><a href="#8-字符集" class="headerlink" title="8.字符集"></a>8.字符集</h4><p>utf-8是目前最常用的字符集编码方式，常用的字符集编码方式还有gbk和gb2312。</p><p>gb2312 简单中文  包括6763个汉字</p><p>BIG5   繁体中文 港澳台等用</p><p>GBK包含全部中文字符    是GB2312的扩展，加入对繁体字的支持，兼容GB2312</p><p>UTF-8则包含全世界所有国家需要用到的字符</p><h4 id="9-HTML常用标签"><a href="#9-HTML常用标签" class="headerlink" title="9.HTML常用标签"></a>9.HTML常用标签</h4><h6 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;、&lt;h2&gt;、&lt;h3&gt;、&lt;h4&gt;、&lt;h5&gt;和&lt;h6&gt;</span><br></pre></td></tr></table></figure><p>标题标签语义：  作为标题使用，并且依据重要性递减</p><p>基本语法格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hn</span>&gt;</span>   标题文本   <span class="tag">&lt;/<span class="name">hn</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>  文本内容  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标签语义：文章分段</p><h6 id="水平线标签"><a href="#水平线标签" class="headerlink" title="水平线标签"></a>水平线标签</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标签语义：将段落与段落之间隔开，使得文档结构清晰，层次分明</p><h6 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="10-图像标签"><a href="#10-图像标签" class="headerlink" title="10.图像标签"></a>10.图像标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"图像URL"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h6 id="标签属性："><a href="#标签属性：" class="headerlink" title="标签属性："></a>标签属性：</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> 属性<span class="attr">1</span>=<span class="string">"属性值1"</span> 属性<span class="attr">2</span>=<span class="string">"属性值2"</span> …&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在上面的语法中：</span><br><span class="line">1.标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。</span><br><span class="line">2.属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</span><br><span class="line">3.任何标签的属性都有默认值，省略该属性则取默认值。</span><br><span class="line">采取  键值对 的格式   key="value"  的格式</span><br></pre></td></tr></table></figure><h6 id="img属性"><a href="#img属性" class="headerlink" title="img属性"></a>img属性</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">属性属性值描述</span><br><span class="line">src URL   路径</span><br><span class="line">alt 文本     不能显示时替换的文本</span><br><span class="line">title    文本       鼠标悬停的内容</span><br><span class="line">width  px        宽度</span><br><span class="line">height   px        高度</span><br><span class="line">border   数字       图像边框宽度</span><br></pre></td></tr></table></figure><h4 id="11-链接标签"><a href="#11-链接标签" class="headerlink" title="11.链接标签"></a>11.链接标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口的弹出方式&quot;&gt;文本或图像&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">href：用于指定链接目标的url地址，当为标签应用href属性时，它就具有了超链接的功能。  Hypertext Reference的缩写。意思是超文本引用</span><br><span class="line"></span><br><span class="line">target：用于指定链接页面的打开方式，其取值有self和blank两种，其中self为默认值，blank为在新窗口中打开方式</span><br></pre></td></tr></table></figure><blockquote><p>1.外部链接 需要添加 http:// <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p><p>2.内部链接 直接链接内部页面名称即可 比如 &lt; a href=”index.html”&gt; 首页 </p><p>3.如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=”#”)，表示该链接暂时为一个空链接。</p><p>4.不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。</p></blockquote><h4 id="12-base标签"><a href="#12-base标签" class="headerlink" title="12.base标签"></a>12.base标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">"blank/self"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标签语义：设置链接打开方式窗口是新建还是覆盖</p><h4 id="13-锚点定位"><a href="#13-锚点定位" class="headerlink" title="13.锚点定位"></a>13.锚点定位</h4><p>通过创建锚点，快速定位到目标内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.使用“a href=”#id名&gt;“链接文本"<span class="tag">&lt;/<span class="name">a</span>&gt;</span>创建链接文本（被点击的）</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#two"</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line">2.使用相应的id名标注跳转目标的位置。</span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"two"</span>&gt;</span>第2集<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="14-注释标签"><a href="#14-注释标签" class="headerlink" title="14.注释标签"></a>14.注释标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--注释语句--&gt; Ctrl+/</span><br></pre></td></tr></table></figure><p>注释的两个作用：</p><p>1.让部分代码不让浏览器执行</p><p>2.给程序员友好的提示</p><h4 id="15-列表标签"><a href="#15-列表标签" class="headerlink" title="15.列表标签"></a>15.列表标签</h4><h6 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ol><li><p><ul></ul>中只能嵌套<li></li>，直接在<ul></ul>标签中输入其他标签或者文字的做法是不被允许的。</p></li><li><p><li>与</li>之间相当于一个容器，可以容纳所有元素。</p></li><li><p>无序列表会带有自己样式属性，放下那个样式，一会让CSS来！</p></li></ol></blockquote><h6 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。</p><h4 id="16-表格"><a href="#16-表格" class="headerlink" title="16.表格"></a>16.表格</h4><h6 id="创建表格"><a href="#创建表格" class="headerlink" title="创建表格"></a>创建表格</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>1.table用于定义一个表格。</p><p>2.tr 用于定义表格中的一行，必须嵌套在 table标签中，在 table中包含几对 tr，就有几行表格。</p><p>3.td /td：用于定义表格中的单元格，必须嵌套在<tr></tr>标签中，一对 <tr> </tr>中包含几对<td></td>，就表示该行中有多少列（或多少个单元格）。</p></blockquote><p>注意：</p><ol><li><tr></tr>中只能嵌套<td></td></li><li><td></td>标签，他就像一个容器，可以容纳所有的元素</li></ol><h6 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h6><p>border：设置表格边框的宽度（默认border=’0’）</p><p>cellspacing：单元格与单元格之间的空白间距</p><p>cellspadding：单元格内容与边框之间的空白间距</p><p>width：表格宽度</p><p>height：表格高度</p><p>align：表格在网页中的水平对齐方式（left,right,center）</p><h6 id="表头标签"><a href="#表头标签" class="headerlink" title="表头标签"></a>表头标签</h6><p>表头一般位于表格的第一行或第一列，其文本加粗居中，如下图所示，即为设置了表头的表格。设置表头非常简单，只需用表头标签&lt;th&gt;&lt;/th&gt;替代相应的单元格标签&lt;td&gt;&lt;/td&gt;即可。</p><h6 id="表格结构"><a href="#表格结构" class="headerlink" title="表格结构"></a>表格结构</h6><blockquote><p>在使用表格进行布局时，可以将表格划分为头部、主体和页脚（页脚因为有兼容性问题，我们不在赘述），具体 如下所示：</p><p><thead></thead>：用于定义表格的头部。</p><p>必须位于<table></table> 标签中，一般包含网页的logo和导航等头部信息。</p><p><tbody></tbody>：用于定义表格的主体。</p><p>位于<table></table>标签中，一般包含网页中除头部和底部之外的其他内容。</p></blockquote><h6 id="表格标题"><a href="#表格标题" class="headerlink" title="表格标题"></a>表格标题</h6><p>caption</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">caption</span>&gt;</span>我是表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="合并表格"><a href="#合并表格" class="headerlink" title="合并表格"></a>合并表格</h6><p>跨行合并：rowspan（跨多少行删多少行）</p><p>跨列合并：colspan（跨多少行删多少行）</p><h4 id="17-div-span标签"><a href="#17-div-span标签" class="headerlink" title="17.div span标签"></a>17.div span标签</h4><blockquote><p>div在浏览器中表示一个小区域，不会增加任何的效果改变，而是语义变了，div中所有子元素是在一个小区域中。div是一个容器，里面什么都能放，设置包括它自己 。</p><p>span也是表示一个小区域，但是只能是文本级别的区域，也就是span中只能够放文字、图片、表单元素等信息。</p><p>现在的网页开发基本都是用div+css布局实现的。</p></blockquote><h6 id="div和span的使用"><a href="#div和span的使用" class="headerlink" title="div和span的使用"></a>div和span的使用</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>中国主要城市<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>美国主要城市<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>伦敦<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>纽约<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">   商品简介，商品简介</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">””</span>&gt;</span>详细信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">””</span>&gt;</span>购买<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="18-内联元素和块级元素"><a href="#18-内联元素和块级元素" class="headerlink" title="18.内联元素和块级元素"></a>18.内联元素和块级元素</h4><blockquote><ol><li>div标签（独占一行 block） （div,form,table,p,pre,h1~h6,dl,ol,ul）<br>特点：块级元素独占一行，可以设置宽度和高度。如果不设置宽度，则默认宽度为父元素的宽度。</li><li>span标签（占一块 inline）(span,a,label ,select)<br>特点：所有元素在一行显示。不能设置宽高。默认宽度为文字或者内容本身的宽度。</li><li>行内块元素（inline-block）  (image  input)<br>特点：所有元素在一行显示，可以设置宽高(具备块级元素的特征，也具备行内元素的特征)。</li></ol></blockquote><h4 id="19-表单标签"><a href="#19-表单标签" class="headerlink" title="19.表单标签"></a>19.表单标签</h4><blockquote><p>包括表单控件，提示信息，表单域</p></blockquote><blockquote><p>表单控件： 包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。</p><p>提示信息： 一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。</p><p>表单域： 他相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。</p></blockquote><h6 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h6><p>在HTML中，form标签被用于定义表单域，即创建一个表单，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。创建表单的基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"url地址"</span> <span class="attr">method</span>=<span class="string">"提交方式"</span> <span class="attr">name</span>=<span class="string">"表单名称"</span>&gt;</span></span><br><span class="line">  各种表单控件</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>常用属性：</p><ol><li><p>Action<br>在表单收集到信息后，需要将信息传递给服务器进行处理，action属性用于指定接收并处理表单数据的服务器程序的url地址。</p></li><li><p>method<br>用于设置表单数据的提交方式，其取值为get或post。</p></li><li><p>name绝对路径以Web站点根目录为参考基础的目录路径。之所以称为绝对，意指当所有网页引用同一个文件时，所使用的路径都是一样的</p><p>“D:\web\img\logo.gif”，或完整的网络地址，例如“<a href="http://www.igeek.cn/images/logo.gif”。" target="_blank" rel="noopener">http://www.igeek.cn/images/logo.gif”。</a></p></li><li><p>用于指定表单的名称，以区分同一个页面中的多个表单。</p></li></ol><p>注意：  每个表单都应该有自己表单域。</p><h6 id="input控件"><a href="#input控件" class="headerlink" title="input控件"></a>input控件</h6><p>text属性</p><p><code>&lt;input type=”text”&gt;</code></p><p>定义单行的输入字段，用户可在其中输入文本。默认宽度为 20 个字符。</p><p>其它常用属性:</p><p>l     name:定义标签名称</p><p>l     value:定义标签值</p><p>l     size:定义输入字符的长度（可以输入超过指定长度的字符，但只会显示指定个数）</p><p>l     maxlength:定义可输入最大字符个数</p><p>l     placeholder: 占位文字</p><hr><p>password</p><p><code>&lt;input type=”password”&gt;</code></p><p>定义密码字段。该字段中的字符被掩码.</p><p>其它常用属性:</p><p>l     name:定义标签名称</p><p>l     value:定义标签值</p><p>l     size:定义输入字段的长度</p><p>l     maxlength:定义可输入最大字符个数</p><hr><p>radio</p><p><code>&lt;input type=”radio”&gt;</code></p><p>定义单选按钮。</p><p>其它常用属性:</p><p>l     name:定义标签名称.注意，对于单选按钮，如果要想做到单一选择，多个radion的name值必一样。</p><p>l     value:定义标签值</p><p>l     checked:定义该标签默认被选中。</p><hr><p>checkbox</p><p><code>&lt;input type=”checkbox”&gt;</code></p><p>定义复选框。</p><p>其它常用属性:</p><p>l     name:定义标签名称.注意，一组的checkbox它们的name值应该是一样的。</p><p>l     value:定义标签值</p><p>l     checked:定义该标签默认被选中。</p><hr><p>file</p><p><code>&lt;input type=”file”&gt;</code></p><p>定义输入字段和 “浏览”按钮，供文件上传。</p><p>其它常用属性:</p><p>l     name:定义标签名称</p><hr><p>button</p><p><code>&lt;input type=”button”&gt;</code></p><p>定义可点击按钮（多数情况下，用于通过JavaScript 启动脚本，如果不写什么也不发生）</p><p>其它常用属性:</p><p>l     name:定义标签名称</p><p>l     value:按钮显示名称</p><hr><p>submit</p><input type="submit"><p>定义提交按钮。提交按钮会把表单数据发送到服务器。</p><p>其它常用属性:</p><p>l     name:定义标签名称</p><p>l     value:按钮显示名称</p><hr><p>reset</p><input type="reset"><p>定义重置按钮。重置按钮会清除表单中的所有数据。</p><p>其它常用属性:</p><p>l     name:定义标签名称</p><p>l     value:按钮显示名称</p><hr><p>img</p><p>定义图像形式的提交按钮。</p><p>这个标签主要是用了替换submit按钮，因为默认产生的提交按钮并不漂亮，这个标签允许你采用指定的图片做为提交按钮。</p><p>其它常用属性:</p><p>l     name:定义标签名称</p><p>l     src:定义作为提交按钮显示的图像的url</p><p>l     alt:定义作用图像的替代文本。</p><hr><p>绝对路径以Web站点根目录为参考基础的目录路径。之所以称为绝对，意指当所有网页引用同一个文件时，所使用的路径都是一样的</p><p>“D:\web\img\logo.gif”，或完整的网络地址，例如“<a href="http://www.igeek.cn/images/logo.gif”。hidden" target="_blank" rel="noopener">http://www.igeek.cn/images/logo.gif”。hidden</a></p><p>&lt;inputtype=”hidden”&gt;</p><p>定义隐藏的输入字段。提交时服务端需要用到的信息，但是又不想让用户看到</p><p>常用属性:</p><p>l     name: 定义标签名称</p><p>l     value:定义标签值</p><hr><h4 id="20-label标签"><a href="#20-label标签" class="headerlink" title="20.label标签"></a>20.label标签</h4><p>label 标签为 input 元素定义标注（标签）。</p><p>作用：  用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点</p><p>如何绑定元素呢？</p><p>for 属性规定 label 与哪个表单元素绑定。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"male"</span> <span class="attr">value</span>=<span class="string">"male"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="21-textarea控件"><a href="#21-textarea控件" class="headerlink" title="21.textarea控件"></a>21.textarea控件</h4><p>如果需要输入大量的信息，就需要用到&lt;textarea&gt;&lt;/textarea&gt;标签。通过textarea控件可以轻松地创建多行文本输入框，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"每行中的字符数"</span> <span class="attr">rows</span>=<span class="string">"显示的行数"</span>&gt;</span></span><br><span class="line">  文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="22-下拉菜单"><a href="#22-下拉菜单" class="headerlink" title="22.下拉菜单"></a>22.下拉菜单</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"select"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span> <span class="attr">size</span>=<span class="string">"6"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"wx"</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>无锡<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"wz"</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>苏州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"sh"</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"ks"</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>昆山<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>&lt;select&gt;&lt;/select&gt;中至少应包含一对&lt;option&gt;&lt;/option&gt;。</li><li>在option 中定义selected =” selected “时，当前项即为默认选中项。</li></ol><h4 id="23-其他标签"><a href="#23-其他标签" class="headerlink" title="23.其他标签"></a>23.其他标签</h4><h6 id="上标下标"><a href="#上标下标" class="headerlink" title="上标下标"></a>上标下标</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">This text contains <span class="tag">&lt;<span class="name">sub</span>&gt;</span>subscript<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">This text contains <span class="tag">&lt;<span class="name">sup</span>&gt;</span>superscript<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="pre标签（照原样输出）"><a href="#pre标签（照原样输出）" class="headerlink" title="pre标签（照原样输出）"></a>pre标签（照原样输出）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre&gt;</span><br><span class="line">        这是</span><br><span class="line">        预格式文本。</span><br><span class="line">        它保留了      空格</span><br><span class="line">        和换行。</span><br><span class="line">&lt;/pre&gt;</span><br></pre></td></tr></table></figure><h6 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h6><p>iframe 元素会创建包含另外一个文档的内联框架（即行内框架）。可以理解为浏览器中的浏览器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iframe 元素会创建包含另外一个文档的内联框架（即行内框架）。可以理解为浏览器中的浏览器</span><br></pre></td></tr></table></figure><h4 id="24-路径"><a href="#24-路径" class="headerlink" title="24.路径"></a>24.路径</h4><h6 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h6><p>以引用文件之网页所在位置为参考基础，而建立出的目录路径。因此，当保存于不同目录的网页引用同一个文件时，所使用的路径将不相同，故称之为相对路径。</p><ol><li><p>图像文件和HTML文件位于同一文件夹：只需输入图像文件的名称即可，如&lt;img src=”logo.gif” /&gt;。</p></li><li><p>图像文件位于HTML文件的下一级文件夹：输入文件夹名和文件名，之间用“/”隔开，如&lt;img src=”img/img01/logo.gif” /&gt;。</p></li><li><p>图像文件位于HTML文件的上一级文件夹：在文件名之前加入“../” ，如果是上两级，则需要使用 “../ ../”，以此类推，如&lt;img src=”../logo.gif” /&gt;。</p></li></ol><h6 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h6><p>绝对路径以Web站点根目录为参考基础的目录路径。之所以称为绝对，意指当所有网页引用同一个文件时，所使用的路径都是一样的</p><p>“D:\web\img\logo.gif”，或完整的网络地址，例如“<a href="http://www.igeek.cn/images/logo.gif”。" target="_blank" rel="noopener">http://www.igeek.cn/images/logo.gif”。</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建完整流程</title>
      <link href="/passages/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/"/>
      <url>/passages/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一，准备工作"><a href="#一，准备工作" class="headerlink" title="一，准备工作"></a>一，准备工作</h2><h5 id="1-了解Hexo"><a href="#1-了解Hexo" class="headerlink" title="1.了解Hexo"></a>1.了解Hexo</h5><p><a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">Hexo</a>是高效的静态站点生成框架，它基于Node.js。 通过 Hexo 你可以使用Markdown 编写文章。</p><h5 id="2-搭建Node-js环境"><a href="#2-搭建Node-js环境" class="headerlink" title="2.搭建Node.js环境"></a>2.搭建Node.js环境</h5><p>搭建博客网站首先需要安装Node.js环境。</p><p>下载地址：<a href="http://nodejs.cn/download" target="_blank" rel="noopener">http://nodejs.cn/download</a> </p><p>测试安装：命令行使用<code>node -v</code> 、<code>npm -v</code>，查看显示版本号即成功。</p><blockquote><p>Ps:大部分同学装的node版本是之前提供的5.0.0多的 hexo的初始化步骤中会出现报错，需要重新装最新的版本（10.0.0多的）</p></blockquote><h5 id="3-安装Hexo博客框架工具"><a href="#3-安装Hexo博客框架工具" class="headerlink" title="3.安装Hexo博客框架工具"></a>3.安装Hexo博客框架工具</h5><p>Hexo是一个建站工具，可以帮助我们快速生成基本的博客文件，安装它需要在控制台下（Windows+R+<code>cmd</code>）使用如下命令：</p><p><code>npm install hexo-cli -g</code></p><h5 id="4-安装Git版本工具"><a href="#4-安装Git版本工具" class="headerlink" title="4.安装Git版本工具"></a>4.安装Git版本工具</h5><p>Git是目前世界上最流行的分布式版本控制系统</p><p>使用Git可以帮助我们把本地的网页和文章等内容提交到Github上，实现同步。 </p><p>下载地址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a>  </p><p>测试安装:右击鼠标，如果有</p><p><code>Git GUI here</code></p><p><code>Git Bash here</code></p><p>两个选项 即安装成功。</p><h5 id="5-注册Github账号"><a href="#5-注册Github账号" class="headerlink" title="5.注册Github账号"></a>5.注册Github账号</h5><p>gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。这里用到Github，是因为我们需要通过Github得到自己的博客网站域名，而且需要使用gitHub同步我们个人博客的相关文件。 </p><p> 注册地址：<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a> </p><h2 id="二，开始搭建博客"><a href="#二，开始搭建博客" class="headerlink" title="二，开始搭建博客"></a>二，开始搭建博客</h2><h5 id="1-开启Github服务"><a href="#1-开启Github服务" class="headerlink" title="1.开启Github服务"></a>1.开启Github服务</h5><p>通过Github Pages获得一个免费使用的域名，这需要我们在Github上新建一个仓库，如下：</p><p><img src="/passages/Hexo博客搭建完整流程/p1.png" alt></p><blockquote><p>注意：新仓库的名字，最好是</p><p>UserName+“github.io”`</p><p>的形式。这也是之前强调的要起一个好的用户名的原因。这样之后我们最后的博客网站的链接就会是：<a href="https://UserName.github.io的形式。" target="_blank" rel="noopener">https://UserName.github.io的形式。</a></p></blockquote><p>点击<code>Create Repository</code>之后，随后选择<code>Setting</code>进入设置，找到<code>Github Pages</code>如下：</p><p><img src="/passages/Hexo博客搭建完整流程/p2.png" alt></p><p>这里我们需要点击<code>Choose a theme</code>任意选择一个选择主题，然后界面会跳转到仓库，我们看到有两个文件如下：</p><p><img src="/passages/Hexo博客搭建完整流程/p3.png" alt></p><p>再查看<code>setting</code>，我们会看到开启GitHub Pages之后得到的域名如下：</p><p><img src="/passages/Hexo博客搭建完整流程/p4.png" alt></p><p>现在，可以使用</p><p><a href>https://UserName.github.io</a></p><p>访问自己的博客网站了，打开链接我们会看到默认主题的个人博客样式如下(虽然点丑)：</p><p><img src="/passages/Hexo博客搭建完整流程/p5.png" alt></p><h5 id="2-创建本地博客站点"><a href="#2-创建本地博客站点" class="headerlink" title="2.创建本地博客站点"></a>2.创建本地博客站点</h5><p>上述的步骤相当于我们使用Github，创建了一个默认的博客页，并且得到了一个可外部访问的域名。但是这个博客页很丑。我们的目的是创建自己个性化的博客网站，所以我们使用Hexo在本地先创建一个本地博客站点，优化后再把它部署到github上。接下来我们使用控制台(Windows+R+<code>cmd</code>)命令在本地一个合适的位置右键<code>git bash here</code></p><p>输入<code>hexo init blog</code></p><p>创建博客站点文件夹如下：</p><p><img src="/passages/Hexo博客搭建完整流程/p6.png" alt></p><p>测试本地博客站点，进入blog文件夹（此即为本地博客根目录）右键<code>git bash here</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g //g是generetor的缩写，生成博客 </span><br><span class="line">hexo s //s是server的缩写，启动本地服务</span><br></pre></td></tr></table></figure><p>此时打开浏览器，输入 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，我们将会看到Hexo自带默认主题显示的博客样式如下:</p><p><img src="/passages/Hexo博客搭建完整流程/p7.png" alt></p><h5 id="3-同步Github，允许公共访问"><a href="#3-同步Github，允许公共访问" class="headerlink" title="3.同步Github，允许公共访问"></a>3.同步Github，允许公共访问</h5><blockquote><p>初次安装git需要配置用户名和邮箱，否则git会提示：</p><p>please tell me who you are.</p></blockquote><p>你需要运行命令来配置你的用户名和邮箱：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;name&quot;</span><br><span class="line">$ git config --global user.email &quot;email&quot;</span><br></pre></td></tr></table></figure><blockquote><p>注意：（引号内请输入你自己设置的名字，和你自己的邮箱）此用户名和邮箱是git提交代码时用来显示你身份和联系方式的，并不是github用户名和邮箱</p></blockquote><h5 id="4-Git配置ssh-key"><a href="#4-Git配置ssh-key" class="headerlink" title="4.Git配置ssh key"></a>4.Git配置ssh key</h5><p>在博客站点右键<code>Git bash here</code></p><p>输入<code>$  ssh-keygen -t rsa -C &quot;youremail&quot;</code></p><p>第一次生成的话，直接一路回车，不需要输入密码。不是第一次生成的话，会提示 overwrite (y/n)? 问你是否覆盖旧的 SSH Key ，直接填 y ，然后一直回车就行了，最后得到了两个文件：</p><p><strong>id_rsa和id_rsa.pub</strong>。</p><p><img src="/passages/Hexo博客搭建完整流程/p8.png" alt></p><p>记事本打开/C/Users/Administrator/.ssh/id_rsa.pub文件</p><p>复制该段信息；登录github账户，点击头像进入</p><p>Settings -&gt; SSH and GPG keys -&gt; New SSH key</p><p>将复制的信息粘贴到该处。</p><p><img src="/passages/Hexo博客搭建完整流程/p9.png" alt></p><p>测试是否成功</p><p><code>$ssh -T git@github.com</code></p><p>提示</p><p><code>Hi xxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></p><p>说明添加成功。</p><h5 id="5-部署博客"><a href="#5-部署博客" class="headerlink" title="5.部署博客"></a>5.部署博客</h5><p>在本地我们已经搭建了博客，但是还只能自己本地访问。若要别人也能看到，那就需要我们将其同步部署到GitHub上了。首先找到我们的博客仓库，并拷贝仓库地址：</p><p><img src="/passages/Hexo博客搭建完整流程/p10.png" alt></p><blockquote><p>注意：只需复制用户名之后字段</p></blockquote><p>然后修改本地博客目录的配置：<br>修改本次博客根目录下的<code>_config.yml</code>文件，修改<code>deploy</code>下的配置如下：</p><p><img src="/passages/Hexo博客搭建完整流程/p11.png" alt></p><blockquote><p>注意空格和单词不可以打错</p></blockquote><p>之后执行Git bash here命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git //安装部署插件</span><br><span class="line">hexo d //部署到github</span><br></pre></td></tr></table></figure><p>再次访问链接：<a href>https://userName.github.io</a>，就会发现这里的界面和本地的一样了。如此一来我们搭建的个人博客网站就基本完成了。</p><h2 id="三，发布博客"><a href="#三，发布博客" class="headerlink" title="三，发布博客"></a>三，发布博客</h2><h5 id="1-发布"><a href="#1-发布" class="headerlink" title="1.发布"></a>1.发布</h5><p>可以发布自己的第一篇博客了。来尝试一下以下的步骤：<br>在本地博客文件夹根目录(git bash here)输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;我个人博客的第一篇博客&quot; </span><br><span class="line">hexo g //生成网页 </span><br><span class="line">hexo d //部署到远端(github)</span><br></pre></td></tr></table></figure><p>生成的博客md文件会存放在<code>blog\source\_posts</code>文件夹内。</p><p>现在打开我们的博客网站：</p><p><a href="http://username.github.io/" target="_blank" rel="noopener">http://UserName.github.io</a></p><p>会看到网页</p><p>（显示可能有延迟 所以可以采用以下方法(git bash)：</p><p> hexo clean <em>//清理缓存</em> </p><p>hexo g <em>//重新生成博客代码</em> </p><p>hexo d <em>//部署到服务器</em></p><blockquote><p>可以用<code>hexo s</code>先查看本地情况再部署到服务器</p></blockquote><h5 id="2-Markdown写作语法"><a href="#2-Markdown写作语法" class="headerlink" title="2.Markdown写作语法"></a>2.Markdown写作语法</h5><p>推荐使用<code>Typora</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># 写作介绍</span><br><span class="line">## 1，字体介绍</span><br><span class="line">*这是斜体* 或 _这也是斜体_ </span><br><span class="line">**这是粗体**</span><br><span class="line">***这是加粗斜体***</span><br><span class="line">~~这是删除线~~</span><br><span class="line">## 2，分级标题</span><br><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br><span class="line">## 3，超链接</span><br><span class="line">写法：</span><br><span class="line"></span><br><span class="line">## 4,列表</span><br><span class="line">无序列表：</span><br><span class="line">写法：</span><br><span class="line"></span><br><span class="line">* 无序列表项1</span><br><span class="line">+ 无序列表项2</span><br><span class="line">- 无序列表项3</span><br><span class="line"></span><br><span class="line">有序列表：</span><br><span class="line">写法：</span><br><span class="line">1.有序列表项1</span><br><span class="line">2.有序列表项2</span><br><span class="line">3.有序列表项3</span><br><span class="line"></span><br><span class="line">## 5，插入图片</span><br><span class="line">在 Hexo 中插入图片，首先需要将图片放在 source/img/ 文件夹下，然后如下方式进行插入：</span><br><span class="line"></span><br><span class="line">![](url)</span><br><span class="line"></span><br><span class="line">## 6，表格</span><br><span class="line">| 表头1|表头2|表头3|表头4</span><br><span class="line">|-| :- | :-: | -: |</span><br><span class="line">|默认左对齐|左对齐|居中对其|右对齐|</span><br><span class="line">|默认左对齐|左对齐|居中对其|右对齐|</span><br><span class="line">|默认左对齐|左对齐|居中对其|右对齐|</span><br></pre></td></tr></table></figure><h2 id="四，更换主题"><a href="#四，更换主题" class="headerlink" title="四，更换主题"></a>四，更换主题</h2><p>为了让它看起来更美观一些，我们可以为其更换主题（当然也可以自己在默认主题下自己编写美化博客界面）。这里以使用github上的next主题为例</p><h5 id="1-下载主题"><a href="#1-下载主题" class="headerlink" title="1.下载主题"></a>1.下载主题</h5><p>切换到本地博客根目录下(git bash here)输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>下载成之后我们会看到next的主题已经存在thems里了如下：</p><p><img src="/passages/Hexo博客搭建完整流程/p12.png" alt></p><h5 id="2-修改博客配置文件，更换主题配置"><a href="#2-修改博客配置文件，更换主题配置" class="headerlink" title="2.修改博客配置文件，更换主题配置"></a>2.修改博客配置文件，更换主题配置</h5><p>修改博客根目录(不是next主题)下的<code>_config.yml</code>文件，搜索theme字段，并将其值修改为next</p><p><img src="/passages/Hexo博客搭建完整流程/p13.png" alt></p><p>然后在控制台（git bash）下输入如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean //清理缓存</span><br><span class="line">hexo g //重新生成博客代码 </span><br><span class="line">hexo d //部署到服务器</span><br></pre></td></tr></table></figure><p>再次打开我们的博客网站<a href>https://UserName.github.io</a>，将会看到更换的主题</p><p><img src="/passages/Hexo博客搭建完整流程/p14.png" alt></p><h2 id="主题美化后续更新……"><a href="#主题美化后续更新……" class="headerlink" title="主题美化后续更新……"></a><strong><em>主题美化后续更新……</em></strong></h2>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo搭建微博 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
