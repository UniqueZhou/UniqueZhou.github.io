<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue中的小技巧</title>
      <link href="/passages/Vue%E4%B8%AD%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/passages/Vue%E4%B8%AD%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-js适配经验："><a href="#一、-js适配经验：" class="headerlink" title="一、 js适配经验："></a>一、 js适配经验：</h2><p>在写代码的时候，很有可能写到这种代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].includes(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>或者是使用<code>promise</code>等es6的方法，但是我们的需求是在Android4.4上面完美运行。这样就会出现<code>includes is not undefied</code>等错误提示。我们可以通过webpack的插件来解决，具体的使用方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"babel-polyfill"</span></span><br><span class="line"><span class="keyword">import</span> es6Promise <span class="keyword">from</span> <span class="string">'es6-promise'</span></span><br><span class="line">es6Promise.polyfill()</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'es6-promise'</span>).polyfill()</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack配置文件处</span></span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: [<span class="string">'babel-polyfill'</span>, <span class="string">'./src/main.js'</span>]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="二、-全局定义"><a href="#二、-全局定义" class="headerlink" title="二、 全局定义"></a>二、 全局定义</h2><p>当我们写了很多库的时候，我们引入页面可能会变成这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue 1</span></span><br><span class="line"><span class="keyword">import</span> utils <span class="keyword">from</span> <span class="string">"library"</span></span><br><span class="line"><span class="comment">// vue 2</span></span><br><span class="line"><span class="keyword">import</span> utils <span class="keyword">from</span> <span class="string">"library"</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// vue n</span></span><br><span class="line"><span class="keyword">import</span> utils <span class="keyword">from</span> <span class="string">"library"</span></span><br></pre></td></tr></table></figure><p>可以这样处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">"http/http"</span></span><br><span class="line">Vue.prototype.$okhttp = http</span><br><span class="line"></span><br><span class="line"><span class="comment">// use</span></span><br><span class="line"><span class="keyword">this</span>.$okhttp</span><br></pre></td></tr></table></figure><p>这样会节省很多没有必要的代码量</p><h2 id="三、-自定义目录"><a href="#三、-自定义目录" class="headerlink" title="三、 自定义目录"></a>三、 自定义目录</h2><p>在写代码的时候，很多时候都存在这种情况 ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> component1 <span class="keyword">from</span> <span class="string">"../../../../component"</span></span><br><span class="line"><span class="keyword">import</span> component2 <span class="keyword">from</span> <span class="string">"../../../../../component"</span></span><br></pre></td></tr></table></figure><p>这样写的缺陷是一旦某个目录发生变化就会导致引入错误。可以通过webpack路径解决</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  context: path.resolve(__dirname, <span class="string">'../'</span>),</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: [<span class="string">'babel-polyfill'</span>, <span class="string">'./src/main.js'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;&#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</span><br><span class="line">      <span class="string">'@'</span>: resolve(<span class="string">'src'</span>),</span><br><span class="line">      <span class="string">'components'</span>: resolve(<span class="string">'src/components'</span>),</span><br><span class="line">      <span class="string">'pages'</span>: resolve(<span class="string">'src/pages'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">&#125;,</span><br><span class="line">  node: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在resolve-&gt;alias里面可以配置绝对相对路径，在使用的时候</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> component1 <span class="keyword">from</span> <span class="string">"pages/component"</span></span><br><span class="line"><span class="keyword">import</span> component2 <span class="keyword">from</span> <span class="string">"pages/component"</span></span><br></pre></td></tr></table></figure><h2 id="四、-路由懒加载"><a href="#四、-路由懒加载" class="headerlink" title="四、 路由懒加载"></a>四、 路由懒加载</h2><p>官方文档里面定义路由的时候都有两步：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> xxx <span class="keyword">from</span> <span class="string">'xxx'</span></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      component: xxx,</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在做大型项目的时候 很可能定义很多很多个路由，那样页面就会写的特别多。此时懒加载就会解决这个问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"xxx"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="五、-样式污染和样式覆盖的问题"><a href="#五、-样式污染和样式覆盖的问题" class="headerlink" title="五、 样式污染和样式覆盖的问题"></a>五、 样式污染和样式覆盖的问题</h2><p>在我们新建vue的时候，经常会看到<code>scoped</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span> <span class="selector-tag">scoped</span>&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>如果我们去掉<code>scoped</code>的时候会发现，在本vue项目内定义的css属性会影响到其他vue页面的css属性。这个就很坑了。所以，我们在使用的时候一定要用scoped</p><p>但是在实际的开发中，也会遇到这么个问题。比如elementUI](<a href="http://element-cn.eleme.io/#/zh-CN/component/changelog)，虽然里面的资源库很强大，但是里面的视图不能完全符合策划的需求，此时就需要进行微调。" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN/component/changelog)，虽然里面的资源库很强大，但是里面的视图不能完全符合策划的需求，此时就需要进行微调。</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang="stylus" scoped&gt;</span><br><span class="line">  <span class="selector-class">.custom-dialog</span></span><br><span class="line">    <span class="selector-class">.el-dialog__header</span></span><br><span class="line">      <span class="selector-tag">padding</span> 0</span><br><span class="line">    <span class="selector-class">.el-dialog__body</span></span><br><span class="line">      <span class="selector-tag">padding</span> 0</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>如果此时我们加上<code>scoped</code>标签的话，我们发现并没有效果，发现<code>去掉scoped</code>才会起作用。</p><h2 id="六、-mock、mock"><a href="#六、-mock、mock" class="headerlink" title="六、 mock、mock"></a>六、 mock、mock</h2><p>很多情况下，后台还没有搭建完成之前。可能前端没办法进行数据的接入。这种情况可能是一个大问题，这样会严重拖慢项目开发，此时就需要<code>mock</code><br> 首先在webpack.dev.conf.js里面配置express，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> appData = <span class="built_in">require</span>(<span class="string">'../static/data/user.json'</span>)</span><br><span class="line"><span class="keyword">const</span> apiRouter = express.Router()</span><br><span class="line">app.use(<span class="string">'/api'</span>,apiRouter)</span><br></pre></td></tr></table></figure><p>然后将接口通过<code>devServer</code>发布出去:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> before(app) &#123;</span><br><span class="line">  app.get(<span class="string">'/api/user'</span>,(req, res) =&gt; &#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      data: appData</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的时候就直接打开<a href>http://localhost:8080/api/user</a>,就可以了。</p><h2 id="六、-代理解决跨域"><a href="#六、-代理解决跨域" class="headerlink" title="六、 代理解决跨域"></a>六、 代理解决跨域</h2><p>有些时候，在进行本地开发的时候，可能会遇到跨域的问题。为了解决这个问题呢？主要有两种方法：<br> 1、 服务器设置<br> 服务端设置很简单，就是将本地开发的东西加上<code>“Access-Control-Allow-Origin”, “*”</code>,或者是直接将本地开发的ip直接设置成白名单，这样就可以了.<br> 2、 本地代理<br> 首先引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install http-proxy-middleware --save</span><br></pre></td></tr></table></figure><p>然后在<code>index.js</code>的标签下<code>proxyTable</code>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'/lesson'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://xxx/v2/webapi/lesson'</span>, <span class="comment">// 代理的网址</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span>, <span class="comment">// 允许跨域</span></span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">         <span class="string">'^/lesson'</span>: <span class="string">'/'</span></span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>使用的时候，就直接使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">       method: <span class="string">'get'</span>,</span><br><span class="line">       url:<span class="string">'/lesson'</span> ,</span><br><span class="line">       params: qs.stringify(data)</span><br><span class="line">     &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (res) &#123;</span><br><span class="line">         <span class="comment">//...</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.error(error);</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h2 id="七、-页面统一判断"><a href="#七、-页面统一判断" class="headerlink" title="七、 页面统一判断"></a>七、 页面统一判断</h2><p>在开发中经常会遇到权限判断的问题，我们又不可能在每一个页面的生命周期中去判断一下，可以这样处理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  myAccess.checkhaveAccess(to.path) === <span class="literal">true</span> ? next() : next(<span class="string">'/forbid'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="八、-事件的传递："><a href="#八、-事件的传递：" class="headerlink" title="八、 事件的传递："></a>八、 事件的传递：</h2><p>一般来说事件的传递有很多种，比如父子之间传递数据就可以直接用<code>props</code>，和<code>emit</code>来做关联。<br> 父组件给子组件传递</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;child :datas=<span class="string">"content"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span> </span><br><span class="line">&lt;<span class="regexp">/parent&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">data()&#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">        content:'sichaoyun'</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 子组件</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">props:["datas"];</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 或者是 </span></span><br><span class="line"><span class="regexp">props: &#123;</span></span><br><span class="line"><span class="regexp"> datas: String</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>子组件给父组件传递</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div @click=<span class="string">"open"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">methods: &#123;</span></span><br><span class="line"><span class="regexp">   open() &#123;</span></span><br><span class="line"><span class="regexp">        this.$emit('showbox','the msg'); /</span><span class="regexp">/触发showbox方法，'the msg'为向父组件传递的数据</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 父组件</span></span><br><span class="line"><span class="regexp">&lt;child @showbox="toshow" :msg="msg"&gt;&lt;/</span>child&gt; <span class="comment">//监听子组件触发的showbox事件,然后调用toshow方法</span></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    toshow(msg) &#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>兄弟组件之间的传递一般有几种方式：<br> 1、 注册全局事件<br> 2、 vuex<br> 3、 localstorage</p><p> 使用全局事件则代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(); <span class="comment">//创建实例</span></span><br><span class="line"></span><br><span class="line">&lt;div @click=<span class="string">"ge"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">methods: &#123;</span><br><span class="line">    ge() &#123;</span><br><span class="line">        vm.$emit(<span class="string">'click'</span>,data); <span class="comment">//触发事件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">created() &#123;</span><br><span class="line">  vm.$on(<span class="string">'click'</span>, (arg) =&gt; &#123; </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="九、-列表渲染"><a href="#九、-列表渲染" class="headerlink" title="九、 列表渲染"></a>九、 列表渲染</h2><h3 id="v-for循环绑定model"><a href="#v-for循环绑定model" class="headerlink" title="v-for循环绑定model:"></a>v-for循环绑定model:</h3><p>这个是我在一个微信公众号上面看到的写法，很新颖:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据    </span></span><br><span class="line">     data() &#123;</span><br><span class="line">         <span class="keyword">return</span>&#123;</span><br><span class="line">          obj: &#123;</span><br><span class="line">             ob: <span class="string">"OB"</span>,</span><br><span class="line">             koro1: <span class="string">"Koro1"</span></span><br><span class="line">           &#125;,</span><br><span class="line">           model: &#123;</span><br><span class="line">             ob: <span class="string">"默认ob"</span>,</span><br><span class="line">             koro1: <span class="string">"默认koro1"</span></span><br><span class="line">           &#125;   </span><br><span class="line">         &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">   <span class="comment">// html模板</span></span><br><span class="line">   &lt;div v-<span class="keyword">for</span>=<span class="string">"(value,key) in obj"</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"model[key]"</span>&gt;</span><br><span class="line">   &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">     /</span><span class="regexp">/ input就跟数据绑定在一起了，那两个默认数据也会在input中显示</span></span><br></pre></td></tr></table></figure><h3 id="v-if尽量不要与v-for在同一节点使用"><a href="#v-if尽量不要与v-for在同一节点使用" class="headerlink" title="v-if尽量不要与v-for在同一节点使用:"></a>v-if尽量不要与v-for在同一节点使用:</h3><p>v-for 的优先级比 v-if 更高,如果它们处于同一节点的话，那么每一个循环都会运行一遍v-if。</p><p>如果想根据循环中的每一项的数据来判断是否渲染，可以这么做:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=&quot;index in datas&quot; v-if=&quot;Object.is(index,0)&quot;&gt;</span><br><span class="line">  &#123;&#123; index &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>如果你想要根据某些条件跳过循环，而又跟将要渲染的每一项数据没有关系的话，可以将v-if放在v-for的父节点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 根据elseData是否为true 来判断是否渲染，跟每个元素没有关系    </span><br><span class="line">    &lt;ul v-if=&quot;condition&quot;&gt;</span><br><span class="line">     &lt;li v-for=&quot;index in datas&quot;&gt;</span><br><span class="line">       &#123;&#123; index &#125;&#125;</span><br><span class="line">     &lt;/li&gt;</span><br><span class="line">   &lt;/ul&gt;</span><br><span class="line">   // 数组是否有数据 跟每个元素没有关系</span><br><span class="line">   &lt;ul v-if=&quot;datas.length&quot;&gt;</span><br><span class="line">     &lt;li v-for=&quot;index in datas&quot;&gt;</span><br><span class="line">       &#123;&#123; index &#125;&#125;</span><br><span class="line">     &lt;/li&gt;</span><br><span class="line">   &lt;/ul&gt;</span><br><span class="line">   &lt;p v-else&gt;没有更多数据&lt;/p&gt;</span><br></pre></td></tr></table></figure><h2 id="十、-深度watch与watch立即触发回调"><a href="#十、-深度watch与watch立即触发回调" class="headerlink" title="十、 深度watch与watch立即触发回调"></a>十、 深度watch与watch立即触发回调</h2><p>watch有两个可选参数<br> <strong>选项：deep</strong><br> 在选项参数中指定 deep: true，可以监听对象中属性的变化。<br> <strong>选项：immediate</strong><br> 在选项参数中指定 immediate: true, 将立即以表达式的当前值触发回调，也就是默认触发一次。</p><h2 id="十一、-路由的项目启动页和404页面"><a href="#十一、-路由的项目启动页和404页面" class="headerlink" title="十一、 路由的项目启动页和404页面"></a>十一、 路由的项目启动页和404页面</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/'</span>, <span class="comment">// 项目启动页</span></span><br><span class="line">        redirect:<span class="string">'/login'</span>  <span class="comment">// 重定向到下方声明的路由 </span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'*'</span>, <span class="comment">// 404 页面 </span></span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./notfind'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>比如你的域名为:<code>www.baidu.com</code></p><p>项目启动页指的是: 当你进入<code>www.baidu.com</code>，会自动跳转到login登录页。</p><p>404页面指的是: 当进入一个没有 声明/没有匹配 的路由页面时就会跳转到404页面。</p><p>比如进入<code>www.baidu.com/testRouter</code>,就会自动跳转到notFind页面。</p><p>当你没有声明一个404页面，进入<code>www.baidu.com/testRouter</code>，显示的页面是一片空白。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从输入URL到页面呈现发生了什么？</title>
      <link href="/passages/%E4%BB%8E%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%91%88%E7%8E%B0%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
      <url>/passages/%E4%BB%8E%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%91%88%E7%8E%B0%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="从用户输入URL开始，到页面呈现在眼前，这其中发生了什么？"><a href="#从用户输入URL开始，到页面呈现在眼前，这其中发生了什么？" class="headerlink" title="从用户输入URL开始，到页面呈现在眼前，这其中发生了什么？"></a>从用户输入URL开始，到页面呈现在眼前，这其中发生了什么？</h2><p>总体来说分为以下几个过程:</p><ol><li>DNS解析</li><li>TCP连接</li><li>发送HTTP请求</li><li>服务器处理请求并返回HTTP报文</li><li>浏览器解析渲染页面</li><li>连接结束</li></ol><h2 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h2><h3 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h3><p>DNS解析的过程就是寻找哪台机器上有你需要资源的过程。当你在浏览器中输入一个地址时，例如<a href="http://www.baidu.com，其实不是百度网站真正意义上的地址。互联网上每一台计算机的唯一标识是它的IP地址，但是IP地址并不方便记忆。用户更喜欢用方便记忆的网址去寻找互联网上的其它计算机，也就是上面提到的百度的网址。所以互联网设计者需要在用户的方便性与可用性方面做一个权衡，这个权衡就是一个网址到IP地址的转换，这个过程就是DNS解析。它实际上充当了一个翻译的角色，实现了网址到IP地址的转换。网址到IP地址转换的过程是如何进行的" target="_blank" rel="noopener">www.baidu.com，其实不是百度网站真正意义上的地址。互联网上每一台计算机的唯一标识是它的IP地址，但是IP地址并不方便记忆。用户更喜欢用方便记忆的网址去寻找互联网上的其它计算机，也就是上面提到的百度的网址。所以互联网设计者需要在用户的方便性与可用性方面做一个权衡，这个权衡就是一个网址到IP地址的转换，这个过程就是DNS解析。它实际上充当了一个翻译的角色，实现了网址到IP地址的转换。网址到IP地址转换的过程是如何进行的</a>?</p><h4 id="解析过程"><a href="#解析过程" class="headerlink" title="解析过程"></a>解析过程</h4><p>DNS解析是一个递归查询的过程。</p><p><img src="https://img-blog.csdn.net/20180802185633775?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xhbW1vbnBldGVy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>上述图片是查找<a href="http://www.google.com的IP地址过程。首先在本地域名服务器中查询IP地址，如果没有找到的情况下，本地域名服务器会向根域名服务器发送一个请求，如果根域名服务器也不存在该域名时，本地域名会向com顶级域名服务器发送一个请求，依次类推下去。直到最后本地域名服务器得到google的IP地址并把它缓存到本地，供下次查询使用。从上述过程中，可以看出网址的解析是一个从右向左的过程" target="_blank" rel="noopener">www.google.com的IP地址过程。首先在本地域名服务器中查询IP地址，如果没有找到的情况下，本地域名服务器会向根域名服务器发送一个请求，如果根域名服务器也不存在该域名时，本地域名会向com顶级域名服务器发送一个请求，依次类推下去。直到最后本地域名服务器得到google的IP地址并把它缓存到本地，供下次查询使用。从上述过程中，可以看出网址的解析是一个从右向左的过程</a>: com -&gt; google.com -&gt; <a href="http://www.google.com。但是你是否发现少了点什么，根域名服务器的解析过程呢？事实上，真正的网址是www.google.com.，并不是我多打了一个.，这个.对应的就是根域名服务器，默认情况下所有的网址的最后一位都是.，既然是默认情况下，为了方便用户，通常都会省略，浏览器在请求DNS的时候会自动加上，所有网址真正的解析过程为" target="_blank" rel="noopener">www.google.com。但是你是否发现少了点什么，根域名服务器的解析过程呢？事实上，真正的网址是www.google.com.，并不是我多打了一个.，这个.对应的就是根域名服务器，默认情况下所有的网址的最后一位都是.，既然是默认情况下，为了方便用户，通常都会省略，浏览器在请求DNS的时候会自动加上，所有网址真正的解析过程为</a>: . -&gt; .com -&gt; google.com. -&gt; <a href="http://www.google.com.。" target="_blank" rel="noopener">www.google.com.。</a></p><h4 id="DNS优化"><a href="#DNS优化" class="headerlink" title="DNS优化"></a>DNS优化</h4><p>了解了DNS的过程，可以为我们带来哪些？上文中请求到google的IP地址时，经历了8个步骤，这个过程中存在多个请求(同时存在UDP和TCP请求，为什么有两种请求方式，请自行查找)。如果每次都经过这么多步骤，是否太耗时间？如何减少该过程的步骤呢？那就是DNS缓存。</p><h5 id="DNS缓存"><a href="#DNS缓存" class="headerlink" title="DNS缓存"></a>DNS缓存</h5><p>DNS存在着多级缓存，从离浏览器的距离排序的话，有以下几种: 浏览器缓存，系统缓存，路由器缓存，IPS服务器缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存。</p><ul><li>在你的chrome浏览器中输入:chrome://dns/，你可以看到chrome浏览器的DNS缓存。</li><li>系统缓存主要存在/etc/hosts(Linux系统)中:</li></ul><h5 id="DNS负载均衡"><a href="#DNS负载均衡" class="headerlink" title="DNS负载均衡"></a>DNS负载均衡</h5><p>不知道大家有没有思考过一个问题: DNS返回的IP地址是否每次都一样？如果每次都一样是否说明你请求的资源都位于同一台机器上面，那么这台机器需要多高的性能和储存才能满足亿万请求呢？其实真实的互联网世界背后存在成千上百台服务器，大型的网站甚至更多。但是在用户的眼中，它需要的只是处理他的请求，哪台机器处理请求并不重要。DNS可以返回一个合适的机器的IP给用户，例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等，这种过程就是DNS负载均衡，又叫做DNS重定向。大家耳熟能详的CDN(Content Delivery Network)就是利用DNS的重定向技术，DNS服务器会返回一个跟用户最接近的点的IP地址给用户，CDN节点的服务器负责响应用户的请求，提供所需的内容。在这里打个免费的广告，我平时使用的比较多的是七牛云的CDN(免费)储存图片，作为我个人博客的图床使用。</p><h3 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h3><p>HTTP协议是使用TCP作为其传输层协议的，当TCP出现瓶颈时，HTTP也会受到影响。但由于TCP优化这一块我平常接触的并不是很多，再加上大学时的计算机网络的基础基本上忘完，所以这一部分我也就不在这里分析了。</p><h4 id="HTTPS协议"><a href="#HTTPS协议" class="headerlink" title="HTTPS协议"></a>HTTPS协议</h4><p>我不知道把HTTPS放在这个部分是否合适，但是放在这里好像又说的过去。HTTP报文是包裹在TCP报文中发送的，服务器端收到TCP报文时会解包提取出HTTP报文。但是这个过程中存在一定的风险，HTTP报文是明文，如果中间被截取的话会存在一些信息泄露的风险。那么在进入TCP报文之前对HTTP做一次加密就可以解决这个问题了。HTTPS协议的本质就是HTTP + SSL(or TLS)。在HTTP报文进入TCP报文之前，先使用SSL对HTTP报文进行加密。从网络的层级结构看它位于HTTP协议与TCP协议之间。</p><p><img src="https://images2018.cnblogs.com/blog/801336/201806/801336-20180601074503147-1608088059.png" alt="img"></p><h4 id="HTTPS过程"><a href="#HTTPS过程" class="headerlink" title="HTTPS过程"></a>HTTPS过程</h4><p>HTTPS在传输数据之前需要客户端与服务器进行一个握手(TLS/SSL握手)，在握手过程中将确立双方加密传输数据的密码信息。TLS/SSL使用了非对称加密，对称加密以及hash等。具体过程请参考经典的阮一峰先生的博客TLS/SSL握手过程。HTTPS相比于HTTP，虽然提供了安全保证，但是势必会带来一些时间上的损耗，如握手和加密等过程，是否使用HTTPS需要根据具体情况在安全和性能方面做出权衡。</p><h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3><p>其实这部分又可以称为前端工程师眼中的HTTP，它主要发生在客户端。发送HTTP请求的过程就是构建HTTP请求报文并通过TCP协议中发送到服务器指定端口(HTTP协议80/8080, HTTPS协议443)。HTTP请求报文是由三部分组成: <strong>请求行</strong>, <strong>请求报头</strong>和<strong>请求正文</strong>。</p><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p>格式如下: <code>Method Request-URL HTTP-VersionCRLF</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eg: GET index.html HTTP/1.1</span><br></pre></td></tr></table></figure><p>常用的方法有: GET, POST, PUT, DELETE, OPTIONS, HEAD。</p><p>TODO：</p><h4 id="请求报头"><a href="#请求报头" class="headerlink" title="请求报头"></a>请求报头</h4><p>请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。PS: 客户端不一定特指浏览器，有时候也可使用Linux下的CURL命令以及HTTP客户端测试工具等。常见的请求报头有: Accept, Accept-Charset, Accept-Encoding, Accept-Language, Content-Type, Authorization, Cookie, User-Agent等。</p><p><img src="http://dl.iteye.com/upload/attachment/0069/3451/412b4451-2738-3ebc-b1f6-a0cc13b9697b.jpg" alt="img"></p><h4 id="请求正文"><a href="#请求正文" class="headerlink" title="请求正文"></a>请求正文</h4><p>当使用POST, PUT等方法时，通常需要客户端向服务器传递数据。这些数据就储存在请求正文中。在请求包头中有一些与请求正文相关的信息，例如: 现在的Web应用通常采用Rest架构，请求的数据格式一般为json。这时就需要设置Content-Type: application/json。</p><h3 id="服务器处理请求并返回HTTP报文"><a href="#服务器处理请求并返回HTTP报文" class="headerlink" title="服务器处理请求并返回HTTP报文"></a>服务器处理请求并返回HTTP报文</h3><p>自然而然这部分对应的就是后端工程师眼中的HTTP。后端从在固定的端口接收到TCP报文开始，这一部分对应于编程语言中的socket。它会对TCP连接进行处理，对HTTP协议进行解析，并按照报文格式进一步封装成HTTP Request对象，供上层使用。这一部分工作一般是由Web服务器去进行，我使用过的Web服务器有Tomcat, Jetty和Netty等等。</p><p>HTTP响应报文也是由三部分组成: <strong>状态码</strong>, <strong>响应报头</strong>和<strong>响应报文</strong>。</p><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><p>状态码是由3位数组成，第一个数字定义了响应的类别，且有五种可能取值:</p><ul><li>1xx：指示信息–表示请求已接收，继续处理。</li><li>2xx：成功–表示请求已被成功接收、理解、接受。</li><li>3xx：重定向–要完成请求必须进行更进一步的操作。</li><li>4xx：客户端错误–请求有语法错误或请求无法实现。</li><li>5xx：服务器端错误–服务器未能实现合法的请求。平时遇到比较常见的状态码有:200, 204, 301, 302, 304, 400, 401, 403, 404, 422, 500(分别表示什么请自行查找)。</li></ul><p>TODO:</p><p><img src="/passages/从输入URL到页面呈现发生了什么？/D:/myblog\blog\source\_posts\从输入URL到页面呈现发生了什么？\Snipaste_2019-08-22_12-46-38.png" alt="img"></p><p>该图是本公司对状态码的一个总结，绘制而成的status code map，请大家参考。</p><h4 id="响应报头"><a href="#响应报头" class="headerlink" title="响应报头"></a>响应报头</h4><p>常见的响应报头字段有: Server, Connection…。</p><h4 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h4><p>服务器返回给浏览器的文本信息，通常HTML, CSS, JS, 图片等文件就放在这一部分。</p><h3 id="浏览器解析渲染页面"><a href="#浏览器解析渲染页面" class="headerlink" title="浏览器解析渲染页面"></a>浏览器解析渲染页面</h3><p>浏览器在收到HTML,CSS,JS文件后，它是如何把页面呈现到屏幕上的？下图对应的就是WebKit渲染的过程。</p><p><img src="https://images2018.cnblogs.com/blog/1028513/201805/1028513-20180530154313816-1498972038.png" alt="img"></p><p>浏览器是一个边解析边渲染的过程。首先浏览器解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。页面在首次加载时必然会经历reflow和repain。reflow和repain过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少reflow和repain。</p><p><img src="https://img-blog.csdn.net/20160708162153924" alt="img"></p><p>JS的解析是由浏览器中的JS解析引擎完成的。JS是单线程运行，也就是说，在同一个时间内只能做一件事，所有的任务都需要排队，前一个任务结束，后一个任务才能开始。但是又存在某些任务比较耗时，如IO读写等，所以需要一种机制可以先执行排在后面的任务，这就是：同步任务(synchronous)和异步任务(asynchronous)。JS的执行机制就可以看做是一个主线程加上一个任务队列(task queue)。同步任务就是放在主线程上执行的任务，异步任务是放在任务队列中的任务。所有的同步任务在主线程上执行，形成一个执行栈;异步任务有了运行结果就会在任务队列中放置一个事件；脚本运行时先依次运行执行栈，然后会从任务队列里提取事件，运行任务队列中的任务，这个过程是不断重复的，所以又叫做事件循环(Event loop)。</p><p>浏览器在解析过程中，如果遇到请求外部资源时，如图像,iconfont,JS等。浏览器将重复1-6过程下载该资源。请求过程是异步的，并不会影响HTML文档进行加载，但是当文档加载过程中遇到JS文件，HTML文档会挂起渲染过程，不仅要等到文档中JS文件加载完毕还要等待解析执行完毕，才会继续HTML的渲染过程。原因是因为JS有可能修改DOM结构，这就意味着JS执行完成前，后续所有资源的下载是没有必要的，这就是JS阻塞后续资源下载的根本原因。CSS文件的加载不影响JS文件的加载，但是却影响JS文件的执行。JS代码执行前浏览器必须保证CSS文件已经下载并加载完毕。</p><h2 id="Web优化"><a href="#Web优化" class="headerlink" title="Web优化"></a>Web优化</h2><p>上面部分主要介绍了一次完整的请求对应的过程，了解该过程的目的无非就是为了Web优化。在谈到Web优化之前，我们回到一个更原始的问题，Web前端的本质是什么。我的理解是: 将信息快速并友好的展示给用户并能够与用户进行交互。快速的意思就是在尽可能短的时间内完成页面的加载，试想一下当你在淘宝购买东西的时候，淘宝页面加载了10几秒才显示出物品，这个时候你还有心情去购买吗？怎么快速的完成页面的加载呢？优雅的学院派雅虎给出了常用的一些手段，也就是我们熟悉的雅虎34条军规。这34军规实际上就是围绕请求过程进行的一些优化方式。</p><p>如何尽快的加载资源？答案就是能不从网络中加载的资源就不从网络中加载，当我们合理使用缓存，将资源放在浏览器端，这是最快的方式。如果资源必须从网络中加载，则要考虑缩短连接时间，即DNS优化部分;减少响应内容大小，即对内容进行压缩。另一方面，如果加载的资源数比较少的话，也可以快速的响应用户。当资源到达浏览器之后，浏览器开始进行解析渲染，浏览器中最耗时的部分就是reflow，所以围绕这一部分就是考虑如何减少reflow的次数。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS中的this指向</title>
      <link href="/passages/JS%E4%B8%AD%E7%9A%84this%E6%8C%87%E5%90%91/"/>
      <url>/passages/JS%E4%B8%AD%E7%9A%84this%E6%8C%87%E5%90%91/</url>
      
        <content type="html"><![CDATA[<p>首先，必须搞清楚在JS里面，函数的几种调用方式:</p><ul><li>普通函数调用</li><li>作为方法来调用</li><li>作为构造函数来调用</li><li>使用apply/call方法来调用</li><li>Function.prototype.bind方法</li><li>es6箭头函数</li></ul><p>但是不管函数是按哪种方法来调用的，请记住一点：谁调用这个函数或方法,this关键字就指向谁。</p><p>接下来就分情况来讨论下这些不同的情况：</p><h2 id="普通函数调用"><a href="#普通函数调用" class="headerlink" title="普通函数调用"></a>普通函数调用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>     <span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="number">2</span>         <span class="keyword">this</span>.name=<span class="string">"xl"</span>;</span><br><span class="line"><span class="number">3</span>         <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line"><span class="number">4</span>         <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line"><span class="number">5</span>     &#125;</span><br><span class="line"><span class="number">6</span>     </span><br><span class="line"><span class="number">7</span>     person();  <span class="comment">//输出  window  xl   </span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><p>在这段代码中<code>person</code>函数作为普通函数调用，实际上<code>person</code>是作为全局对象<code>window</code>的一个方法来进行调用的,即<code>window.person()</code>;<br>所以这个地方是<code>window</code>对象调用了<code>person</code>方法,那么<code>person</code>函数当中的<code>this</code>即指<code>window</code>,同时<code>window</code>还拥有了另外一个属性<code>name</code>,值为<code>xl</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>     <span class="keyword">var</span> name=<span class="string">"xl"</span>;</span><br><span class="line"><span class="number">2</span>     <span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="number">3</span>         <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line"><span class="number">4</span>     &#125;</span><br><span class="line"><span class="number">5</span>     person(); <span class="comment">//输出 xl</span></span><br></pre></td></tr></table></figure><p>同样这个地方<code>person</code>作为<code>window</code>的方法来调用，在代码的一开始定义了一个全局变量<code>name</code>，值为<code>xl</code>,它相当于<code>window</code>的一个属性,即<code>window.name=&quot;xl&quot;</code>,又因为在调用<code>person</code>的时候<code>this</code>是指向<code>window</code>的，因此这里会输出<code>xl</code>.</p><h2 id="作为方法来调用"><a href="#作为方法来调用" class="headerlink" title="作为方法来调用"></a>作为方法来调用</h2><p>在上面的代码中，普通函数的调用即是作为<code>window</code>对象的方法进行调用。显然<code>this</code>关键字指向了<code>window</code>对象.</p><p>再来看下其他的形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> name=<span class="string">"XL"</span>;</span><br><span class="line"> <span class="keyword">var</span> person=&#123;</span><br><span class="line">     name:<span class="string">"xl"</span>,</span><br><span class="line">     showName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> person.showName();  <span class="comment">//输出  xl</span></span><br><span class="line"><span class="comment">//这里是person对象调用showName方法，很显然this关键字是指向person对象的，所以会输出name</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> showNameA=person.showName;</span><br><span class="line"> showNameA();    <span class="comment">//输出  XL</span></span><br><span class="line"> <span class="comment">//这里将person.showName方法赋给showNameA变量，此时showNameA变量相当于window对象的一个属性，因此showNameA()执行的时候相当于window.showNameA(),即window对象调用showNameA这个方法，所以this关键字指向window</span></span><br></pre></td></tr></table></figure><p>再换种形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> personA=&#123;</span><br><span class="line">    name:<span class="string">"xl"</span>,</span><br><span class="line">    showName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> personB=&#123;</span><br><span class="line">    name:<span class="string">"XL"</span>,</span><br><span class="line">    sayName:personA.showName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">personB.sayName();  <span class="comment">//输出 XL</span></span><br><span class="line"><span class="comment">//虽然showName方法是在personA这个对象中定义，但是调用的时候却是在personB这个对象中调用，因此this对象指向</span></span><br></pre></td></tr></table></figure><h2 id="作为构造函数来调用"><a href="#作为构造函数来调用" class="headerlink" title="作为构造函数来调用"></a>作为构造函数来调用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span>     <span class="function"><span class="keyword">function</span>  <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"> <span class="number">2</span>         <span class="keyword">this</span>.name=name;</span><br><span class="line"> <span class="number">3</span>     &#125;</span><br><span class="line"> <span class="number">4</span>     <span class="keyword">var</span> personA=Person(<span class="string">"xl"</span>);   </span><br><span class="line"> <span class="number">5</span>     <span class="built_in">console</span>.log(personA.name); <span class="comment">// 输出  undefined</span></span><br><span class="line"> <span class="number">6</span>     <span class="built_in">console</span>.log(<span class="built_in">window</span>.name);<span class="comment">//输出  xl</span></span><br><span class="line"> <span class="number">7</span>     <span class="comment">//上面代码没有进行new操作，相当于window对象调用Person("xl")方法，那么this指向window对象，并进行赋值操作window.name="xl".</span></span><br><span class="line"> <span class="number">8</span>     </span><br><span class="line"> <span class="number">9</span>     <span class="keyword">var</span> personB=<span class="keyword">new</span> Person(<span class="string">"xl"</span>);</span><br><span class="line"><span class="number">10</span>     <span class="built_in">console</span>.log(personB.name);<span class="comment">// 输出 xl</span></span><br><span class="line"><span class="number">11</span>     <span class="comment">//这部分代码的解释见下</span></span><br></pre></td></tr></table></figure><h3 id="new操作符"><a href="#new操作符" class="headerlink" title="new操作符"></a>new操作符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面这段代码模拟了new操作符(实例化对象)的内部过程</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> o=&#123;&#125;;</span><br><span class="line">      o.__proto__=Person.prototype;  <span class="comment">//原型继承</span></span><br><span class="line">      Person.call(o,name);</span><br><span class="line">      <span class="keyword">return</span> o;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> personB=person(<span class="string">"xl"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(personB.name);  <span class="comment">// 输出  xl</span></span><br></pre></td></tr></table></figure><p>​     这段代码涉及到了<em>proto</em>及prototype的概念，如果有需要了解，请<a href="https://github.com/dreamapplehappy/hacking-with-javascript/blob/master/points/understand-prototype-__proto__.md" target="_blank" rel="noopener">点击链接</a></p><ul><li><p>在<code>person</code>里面首先创建一个空对象o，将o的proto指向Person.prototype完成对原型的属性和方法的继承</p></li><li><p><code>Person.call(o,name)</code>这里即函数<code>Person</code>作为<code>apply/call</code>调用(具体内容下方)，将<code>Person</code>对象里的<code>this</code>改为o，即完成了<code>o.name=name</code>操作</p></li><li><p>返回对象o。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">因此<span class="string">`person("xl")`</span>返回了一个继承了<span class="string">`Person.prototype`</span>对象上的属性和方法，以及拥有<span class="string">`name`</span>属性为<span class="string">"xl"</span>的对象，并将它赋给变量<span class="string">`personB`</span>.</span><br><span class="line">所以<span class="string">`console.log(personB.name)`</span>会输出<span class="string">"xl"</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="call-apply方法的调用"><a href="#call-apply方法的调用" class="headerlink" title="call/apply方法的调用"></a>call/apply方法的调用</h2><p>在JS里函数也是对象，因此函数也有方法。从Function.prototype上继承到<code>Function.prototype.call/Function.prototype.apply</code>方法<br><code>call/apply</code>方法最大的作用就是能改变<code>this</code>关键字的指向.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Obj.method.apply(AnotherObj,<span class="built_in">arguments</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span>     <span class="keyword">var</span> name=<span class="string">"XL"</span>;</span><br><span class="line"> <span class="number">2</span>     <span class="keyword">var</span> Person=&#123;</span><br><span class="line"> <span class="number">3</span>         name:<span class="string">"xl"</span>,</span><br><span class="line"> <span class="number">4</span>         showName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="number">5</span>             <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line"> <span class="number">6</span>         &#125;</span><br><span class="line"> <span class="number">7</span>     &#125;</span><br><span class="line"> <span class="number">8</span>     Person.showName.call(); <span class="comment">//输出 "XL"</span></span><br><span class="line"> <span class="number">9</span>     <span class="comment">//这里call方法里面的第一个参数为空，默认指向window。</span></span><br><span class="line"><span class="number">10</span>     <span class="comment">//虽然showName方法定义在Person对象里面，但是使用call方法后，将showName方法里面的this指向了window。因此最后会输出"XL";</span></span><br><span class="line"><span class="number">11</span>     funtion FruitA(n1,n2)&#123;</span><br><span class="line"><span class="number">12</span>         <span class="keyword">this</span>.n1=n1;</span><br><span class="line"><span class="number">13</span>         <span class="keyword">this</span>.n2=n2;</span><br><span class="line"><span class="number">14</span>         <span class="keyword">this</span>.change=<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line"><span class="number">15</span>             <span class="keyword">this</span>.n1=x;</span><br><span class="line"><span class="number">16</span>             <span class="keyword">this</span>.n2=y;</span><br><span class="line"><span class="number">17</span>         &#125;</span><br><span class="line"><span class="number">18</span>     &#125;</span><br><span class="line"><span class="number">19</span>     </span><br><span class="line"><span class="number">20</span>     <span class="keyword">var</span> fruitA=<span class="keyword">new</span> FruitA(<span class="string">"cheery"</span>,<span class="string">"banana"</span>);</span><br><span class="line"><span class="number">21</span>     <span class="keyword">var</span> FruitB=&#123;</span><br><span class="line"><span class="number">22</span>         n1:<span class="string">"apple"</span>,</span><br><span class="line"><span class="number">23</span>         n2:<span class="string">"orange"</span></span><br><span class="line"><span class="number">24</span>     &#125;;</span><br><span class="line"><span class="number">25</span>     fruitA.change.call(FruitB,<span class="string">"pear"</span>,<span class="string">"peach"</span>);</span><br><span class="line"><span class="number">26</span>     </span><br><span class="line"><span class="number">27</span>     <span class="built_in">console</span>.log(FruitB.n1); <span class="comment">//输出 pear</span></span><br><span class="line"><span class="number">28</span>     <span class="built_in">console</span>.log(FruitB.n2);<span class="comment">// 输出 peach</span></span><br></pre></td></tr></table></figure><p><code>FruitB</code>调用<code>fruitA</code>的<code>change</code>方法，将<code>fruitA</code>中的<code>this</code>绑定到对象<code>FruitB</code>上。</p><h2 id="Function-prototype-bind-方法"><a href="#Function-prototype-bind-方法" class="headerlink" title="Function.prototype.bind()方法"></a>Function.prototype.bind()方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">"XL"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"my name is "</span>+<span class="keyword">this</span>.name);</span><br><span class="line">        &#125;,<span class="number">50</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> Person(<span class="string">"xl"</span>);</span><br><span class="line">person.sayName()  <span class="comment">//输出  “my name is XL”;</span></span><br><span class="line">                   <span class="comment">//这里的setTimeout()定时函数,相当于window.setTimeout(),由window这个全局对象对调用,因此this的指向为window, 则this.name则为XL</span></span><br></pre></td></tr></table></figure><p>那么如何才能输出<code>&quot;my name is xl&quot;</code>呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">"XL"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"my name is "</span>+<span class="keyword">this</span>.name);</span><br><span class="line">        &#125;.bind(<span class="keyword">this</span>),<span class="number">50</span>)  <span class="comment">//注意这个地方使用的bind()方法，绑定setTimeout里面的匿名函数的this一直指向Person对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> Person(<span class="string">"xl"</span>);</span><br><span class="line">person.sayName(); <span class="comment">//输出 “my name is xl”;</span></span><br></pre></td></tr></table></figure><p>这里<code>setTimeout(function(){console.log(this.name)}.bind(this),50);</code>,匿名函数使用<code>bind(this)</code>方法后创建了新的函数，这个新的函数不管在什么地方执行，<code>this</code>都指向的<code>Person</code>,而非<code>window</code>,因此最后的输出为”my name is xl”而不是”my name is XL”</p><p>另外几个需要注意的地方：<br><code>setTimeout/setInterval/匿名函数执行</code>的时候，<code>this</code>默认指向<code>window对象</code>，除非手动改变this的指向。在《javascript高级程序设计》当中，写到：“超时调用的代码(<code>setTimeout</code>)都是在全局作用域中执行的，因此函数中的this的值，在非严格模式下是指向window对象，在严格模式下是指向undefined”。本文都是在非严格模式下的情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">"XL"</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name=<span class="string">"xl"</span>;</span><br><span class="line">      <span class="keyword">this</span>.showName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">      &#125;</span><br><span class="line">      setTimeout(<span class="keyword">this</span>.showName,<span class="number">50</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> person=<span class="keyword">new</span> Person(); <span class="comment">//输出 "XL"</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//在setTimeout(this.showName,50)语句中，会延时执行this.showName方法</span></span><br><span class="line">  <span class="comment">//this.showName方法即构造函数Person()里面定义的方法。50ms后，执行this.showName方法，this.showName里面的this此时便指向了window对象。则会输出"XL";</span></span><br></pre></td></tr></table></figure><p>修改上面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span>   <span class="keyword">var</span> name=<span class="string">"XL"</span>;</span><br><span class="line"> <span class="number">2</span>     <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="number">3</span>         <span class="keyword">this</span>.name=<span class="string">"xl"</span>;</span><br><span class="line"> <span class="number">4</span>         <span class="keyword">var</span> that=<span class="keyword">this</span>;</span><br><span class="line"> <span class="number">5</span>         <span class="keyword">this</span>.showName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="number">6</span>             <span class="built_in">console</span>.log(that.name);</span><br><span class="line"> <span class="number">7</span>         &#125;</span><br><span class="line"> <span class="number">8</span>         setTimeout(<span class="keyword">this</span>.showName,<span class="number">50</span>)</span><br><span class="line"> <span class="number">9</span>     &#125;</span><br><span class="line"><span class="number">10</span>     <span class="keyword">var</span> person=<span class="keyword">new</span> Person(); <span class="comment">//输出 "xl"</span></span><br><span class="line"><span class="number">11</span> </span><br><span class="line"><span class="number">12</span> </span><br><span class="line"><span class="number">13</span> </span><br><span class="line"><span class="number">14</span>     <span class="comment">//这里在Person函数当中将this赋值给that，即让that保存Person对象，因此在setTimeout(this.showName,50)执行过程当中，console.log(that.name)即会输出Person对象的属性"xl"</span></span><br></pre></td></tr></table></figure><p>匿名函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span>   <span class="keyword">var</span> name=<span class="string">"XL"</span>;</span><br><span class="line"> <span class="number">2</span>     <span class="keyword">var</span> person=&#123;</span><br><span class="line"> <span class="number">3</span>         name:<span class="string">"xl"</span>,</span><br><span class="line"> <span class="number">4</span>         showName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="number">5</span>             <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line"> <span class="number">6</span>         &#125;</span><br><span class="line"> <span class="number">7</span>         sayName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="number">8</span>             (<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line"> <span class="number">9</span>                 callback();</span><br><span class="line"><span class="number">10</span>             &#125;)(<span class="keyword">this</span>.showName)</span><br><span class="line"><span class="number">11</span>         &#125;</span><br><span class="line"><span class="number">12</span>     &#125;</span><br><span class="line"><span class="number">13</span>     person.sayName();  <span class="comment">//输出 XL</span></span><br><span class="line"><span class="number">14</span>     <span class="keyword">var</span> name=<span class="string">"XL"</span>;</span><br><span class="line"><span class="number">15</span>     <span class="keyword">var</span> person=&#123;</span><br><span class="line"><span class="number">16</span>         name:<span class="string">"xl"</span>,</span><br><span class="line"><span class="number">17</span>         showName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="number">18</span>             <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line"><span class="number">19</span>         &#125;</span><br><span class="line"><span class="number">20</span>         sayName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="number">21</span>             <span class="keyword">var</span> that=<span class="keyword">this</span>;</span><br><span class="line"><span class="number">22</span>             (<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line"><span class="number">23</span>                 callback();</span><br><span class="line"><span class="number">24</span>             &#125;)(that.showName)</span><br><span class="line"><span class="number">25</span>         &#125;</span><br><span class="line"><span class="number">26</span>     &#125;</span><br><span class="line"><span class="number">27</span>     person.sayName() ;  <span class="comment">//输出  "xl"</span></span><br><span class="line"><span class="number">28</span>     <span class="comment">//匿名函数的执行同样在默认情况下this是指向window的，除非手动改变this的绑定对象</span></span><br></pre></td></tr></table></figure><h2 id="Eval函数"><a href="#Eval函数" class="headerlink" title="Eval函数"></a>Eval函数</h2><p>该函数执行的时候，this绑定到当前作用域的对象上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">"XL"</span>;</span><br><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    name:<span class="string">"xl"</span>,</span><br><span class="line">    showName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">eval</span>(<span class="string">"console.log(this.name)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.showName();  <span class="comment">//输出  "xl"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a=person.showName;</span><br><span class="line">a();  <span class="comment">//输出  "XL"</span></span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p><code>es6</code>里面<code>this</code>指向固定化，始终指向外部对象，因为箭头函数没有<code>this</code>,因此它自身不能进行<code>new</code>实例化,同时也不能使用<code>call, apply, bind</code>等方法来改变<code>this</code>的指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.seconds = <span class="number">0</span>;</span><br><span class="line">     setInterval( <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.seconds ++, <span class="number">1000</span>);</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> timer = <span class="keyword">new</span> Timer();</span><br><span class="line"> </span><br><span class="line"> setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(timer.seconds), <span class="number">3100</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 在构造函数内部的setInterval()内的回调函数，this始终指向实例化的对象，并获取实例化对象的seconds的属性,每1s这个属性的值都会增加1。否则最后在3s后执行setTimeOut()函数执行后输出的是0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请求方法总结</title>
      <link href="/passages/%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/passages/%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a><strong>XMLHttpRequest</strong></h2><p>　　XMLHttpRequest是最早出现的与服务器交换数据的方案，有了XMLHttpRequest，开发者终于可以在不重新加载页面的情况下更新网页，可以在页面加载后请求接受以及发送数据。而所有浏览器均可以获取XMLHttpRequest对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest(); <span class="comment">//获取xhr对象</span></span><br></pre></td></tr></table></figure><p>　　但是XMLHttpRequest是个比较粗燥的底层对象，各个浏览器对其的创建方法也不同，以下是兼容方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123; </span><br><span class="line">    <span class="comment">// Mozilla, Safari...  </span></span><br><span class="line">    xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123; </span><br><span class="line">    <span class="comment">// IE  </span></span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">    xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Msxml2.XMLHTTP'</span>); </span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123; </span><br><span class="line">        <span class="keyword">try</span> &#123;   </span><br><span class="line">            xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);  <span class="comment">//IE5,6 </span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;&#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　使用XMLHttpRequest发起一个get请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//get请求</span></span><br><span class="line">xhr.open(<span class="string">"GET"</span>,<span class="string">"test1.txt"</span>,<span class="literal">true</span>);xhr.send();</span><br></pre></td></tr></table></figure><p>　　完整的post请求代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123; </span><br><span class="line">    <span class="comment">// Mozilla, Safari...  </span></span><br><span class="line">    xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;</span><br><span class="line">    <span class="comment">// IE  </span></span><br><span class="line">    <span class="keyword">try</span> &#123;    </span><br><span class="line">        xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Msxml2.XMLHTTP'</span>); </span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123; </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;&#125;<span class="keyword">if</span> (xhr) &#123;</span><br><span class="line">        xhr.onreadystatechange = onReadyStateChange;</span><br><span class="line">        xhr.open(<span class="string">'POST'</span>, <span class="string">'/api'</span>, <span class="literal">true</span>);  </span><br><span class="line">        <span class="comment">// 设置 Content-Type 为 application/x-www-form-urlencoded  </span></span><br><span class="line">        <span class="comment">// 以表单的形式传递数据  </span></span><br><span class="line">        xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>); </span><br><span class="line">        xhr.send(<span class="string">'username=admin&amp;password=root'</span>);&#125;</span><br><span class="line"><span class="comment">// onreadystatechange 方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onReadyStateChange</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="comment">// 该函数会被调用四次  </span></span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp;xhr.status === <span class="number">200</span>) &#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'执行成功'</span>);  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'执行出错'</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Jquery-Ajax"><a href="#Jquery-Ajax" class="headerlink" title="　Jquery Ajax"></a>　<strong>Jquery Ajax</strong></h2><p>　　说到Jquery，这是一个时代，几乎统治了前端10年有余，彻底解决了UI层与数据层交互的问题，直到三大框架(Angular/React/Vue）的出现，前端进入MVVM浪潮。而Ajax将XHR进行封装，让开发者可以更加便捷方便进行使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;   </span><br><span class="line">    <span class="comment">//标准写法 </span></span><br><span class="line">    type: <span class="string">'POST'</span>, </span><br><span class="line">    url: url,   </span><br><span class="line">    data: data, </span><br><span class="line">    dataType: dataType, </span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, </span><br><span class="line">    error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;&#125;);</span><br><span class="line">$.<span class="keyword">get</span>(url,function()&#123;&#125;); </span><br><span class="line"><span class="comment">//get请求</span></span><br><span class="line">$.post(url,body,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br><span class="line"><span class="comment">//post请求</span></span><br><span class="line">$.getJSON(url,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);  </span><br><span class="line"><span class="comment">//get请求从服务器加载Json编码</span></span><br></pre></td></tr></table></figure><p>　　优点：</p><ul><li>对原生XHR的封装</li><li>针对MVC的编程</li><li>完美的兼容性</li><li>支持jsonp</li></ul><p>　　缺点：</p><ul><li>不符合MVVM</li><li>异步模型不够现代，不支持链式，代码可读性差</li><li>整个Jquery太大，引入成本过高</li></ul><h2 id="Fetch"><a href="#Fetch" class="headerlink" title="　Fetch"></a>　<strong>Fetch</strong></h2><p>　　fetch其实是一个新世界，脱离的XHR，完全是基于Promise的异步处理机制，使用起来会比起ajax更加简单。</p><p>　　使用fetch的代码会相比xhr来说更具有条理性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fetch(url).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> response.json();&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Oops, error"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>　　在使用ES6的箭头函数后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetch(url).then(<span class="function"><span class="params">response</span> =&gt;</span> response.json()) </span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data))</span><br><span class="line">    .catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Oops, error"</span>, e))</span><br></pre></td></tr></table></figure><p>　　优点：</p><ul><li>更加底层，提供的API丰富（request, response）</li><li>语法简单，脱离了XHR，基于ES新的Promise设计</li></ul><p>　　看到以上，或许你会觉得fetch真的很美好，但是请了解，fetch本身是一个 low-level 的 API，它注定不会像你习惯的 $.ajax 或是 axios 等库帮你封装各种各样的功能或实现。</p><p>　　所以它是存在一定的缺点：</p><ul><li>兼容性比较凄惨，低级别浏览器均不支持，需要实现fetch的polyfill了。思路其实很简单，就是判断浏览器是否支持原生的fetch，不支持的话，就仍然使用XMLHttpRequest的方式实现，同时结合Promise来进行封装。常见的polyfill就有：es6-promise,babel-polyfill,fetch-ie8等</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_png/0tIK8YmulicN48qhw6ydiaVMWpRPpr58nQL4hZNttODAgria0qgoQIrOxklUM7rsMIeVGLeeYRd4icUUXdPCXQ5WFQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><ul><li>不支持jsonp，可以引入fetch-jsonp `javascript //安装 npm install fetch-jsonp –save-dev</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用 </span></span><br><span class="line">fetchJsonp(url, &#123; </span><br><span class="line">    timeout: <span class="number">3000</span>, </span><br><span class="line">    jsonpCallback: <span class="string">'callback'</span> </span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.json());</span><br><span class="line">&#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(e) </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>没有拦截器，需要额外再封装一层或者fetch-interceptor- 默认不带cookie，需要添加配置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">javascriptfetch(url,&#123;  </span><br><span class="line">    credentials: <span class="string">'include'</span> <span class="comment">//include表示cookie既可同域，也可跨域，‘same-origin’表示只可同域</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>没有abort，不支持timeout超时处理</li></ul><p>　　可以用Promise.race()实现，Promise.race(iterable) 方法返回一个Promise对象，只要 iterable 中任意一个Promise 被 resolve 或者 reject 后，外部的Promise 就会以相同的值被 resolve 或者 reject。</p><ul><li>无法获取progress状态</li></ul><p>　　fetch中的Response.body 中实现了getReader()方法用于读取原始字节流, 该字节流可以循环读取。参考：</p><p><em><a href="https://stackoverflow.com/questions/35711724/upload-progress-indicators-for-fetch" target="_blank" rel="noopener">https://stackoverflow.com/questions/35711724/upload-progress-indicators-for-fetch</a></em></p><p><em><a href="https://jakearchibald.com/2016/streams-ftw/" target="_blank" rel="noopener">https://jakearchibald.com/2016/streams-ftw/</a></em></p><h2 id="Axios"><a href="#Axios" class="headerlink" title="　Axios"></a>　<strong>Axios</strong></h2><p>　　axios也是比较新的网络请求的类库，并且被尤雨溪尤大推荐，已成为VUE的网络请求标配，也是十分的火爆。它本身也是对原生XHR的封装。</p><ul><li>支持node，创建http请求</li><li>支持Promise API</li><li>客户端防止CSRF：每个请求带一个cookie拿到的key</li><li>拦截请求和响应</li><li>可取消请求</li></ul><p>　　兼容性上虽然axios本质上也是对原生XHR的封装，但是它也依赖原生ES6 Promise的实现，和fetch一样需要polyfill的兼容。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/0tIK8YmulicN48qhw6ydiaVMWpRPpr58nQ5hvtOMZcavWS8bvwx0QJV2a63A22GxVhCaaYfBM4re4naOp4uib1Hpg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>　　安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//npmnpm install axios</span></span><br><span class="line"><span class="comment">//cdn&lt;script src="https://unpkg.com/axios/dist/axios.min.js"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>　　基本使用如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;    </span><br><span class="line">    method: <span class="string">'GET'</span>,  </span><br><span class="line">    url: url,&#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// get请求</span></span><br><span class="line">axios.get(url)  </span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(response);  </span><br><span class="line">&#125;)  </span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(error);  </span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// post请求</span></span><br><span class="line">axios.post(‘/user’, &#123;  </span><br><span class="line">    name: <span class="string">'Jerry'</span>, </span><br><span class="line">    lastName: <span class="string">'Liang'</span> </span><br><span class="line">&#125;) </span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(response); </span><br><span class="line">&#125;) </span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(error); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="特殊场景的处理"><a href="#特殊场景的处理" class="headerlink" title="　特殊场景的处理"></a>　<strong>特殊场景的处理</strong></h2><p>　　在开发过程中，经常会遇到比较尴尬的场景就是多请求的串行与并发，并发比较容易解决，不存在回调地狱，但是代码可读性就会容易变得很渣，而串行问题对于前端是绝望的，最好的办法是后端来做合并，如果后端不做这块的处理，前端就必须来面对回调地狱。</p><h3 id="多请求串行"><a href="#多请求串行" class="headerlink" title="　　多请求串行"></a>　　<strong>多请求串行</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ajax</span></span><br><span class="line">$.ajax(&#123; </span><br><span class="line">    url: <span class="string">''</span>,</span><br><span class="line">    data: <span class="string">''</span>,   </span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;   </span><br><span class="line">        $.ajax(&#123;       </span><br><span class="line">            url: <span class="string">''</span>, </span><br><span class="line">            data: <span class="string">''</span>,      </span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span></span></span><br><span class="line"><span class="function"><span class="params">            </span>) </span>&#123;   </span><br><span class="line">                $.ajax(&#123;    </span><br><span class="line">                    <span class="comment">// 如此一层嵌套一层    </span></span><br><span class="line">                &#125;)     </span><br><span class="line">            &#125;       </span><br><span class="line">        &#125;)   </span><br><span class="line">    &#125;&#125;)</span><br><span class="line"><span class="comment">//axios</span></span><br><span class="line">axios.get(url).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123; </span><br><span class="line">    <span class="keyword">return</span> axios.get(url,&#123;  </span><br><span class="line">        &#123;<span class="attr">name</span>:result.name&#125;  </span><br><span class="line">                     &#125;);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;    </span><br><span class="line">    <span class="comment">//如此一层层嵌套</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="多请求并行"><a href="#多请求并行" class="headerlink" title="　　多请求并行"></a>　　<strong>多请求并行</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ajax 通过计数器实现（虽然Jquery支持$.when的方式，但此处不做案例）</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">all</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    num++;   </span><br><span class="line">    <span class="keyword">if</span>(n&gt;=<span class="number">3</span>)<span class="built_in">console</span>.log(<span class="string">'三个请求全部完成'</span>)；</span><br><span class="line">&#125;</span><br><span class="line">$.ajax(&#123; </span><br><span class="line">    url: <span class="string">''</span>, </span><br><span class="line">    data: <span class="string">''</span>,  </span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"ajax请求1 完成"</span>);  </span><br><span class="line">        all();  </span><br><span class="line">    &#125;&#125;)</span><br><span class="line">$.ajax(&#123;  </span><br><span class="line">    url: <span class="string">''</span>, </span><br><span class="line">    data: <span class="string">''</span>,   </span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;    </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"ajax请求2 完成"</span>);   </span><br><span class="line">        all();</span><br><span class="line">    &#125;&#125;)</span><br><span class="line">$.ajax(&#123;  </span><br><span class="line">    url: <span class="string">''</span>, </span><br><span class="line">    data: <span class="string">''</span>,  </span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;    </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"ajax请求3 完成"</span>);  </span><br><span class="line">        all();   </span><br><span class="line">    &#125;&#125;)</span><br><span class="line"><span class="comment">//axios</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> axios.get(url);</span><br><span class="line">&#125;<span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> axios.get(url);</span><br><span class="line">&#125;axios.all([getInfo(),</span><br><span class="line">            getUser()]) </span><br><span class="line">    .then(axios.spread(<span class="function"><span class="keyword">function</span> (<span class="params">info, user</span>) </span>&#123;   </span><br><span class="line">    <span class="comment">// 两个请求现在都执行完成 </span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue性能优化</title>
      <link href="/passages/vue%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/passages/vue%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>VUE的性能优化主要分为三部分：</p><ul><li>Vue代码层面的优化</li><li>webpack配置层面优化</li><li>基础Web技术层面优化</li></ul><h2 id="一、代码层面的优化"><a href="#一、代码层面的优化" class="headerlink" title="一、代码层面的优化"></a><strong>一、代码层面的优化</strong></h2><h3 id="1-1、v-if-和-v-show-区分使用场景"><a href="#1-1、v-if-和-v-show-区分使用场景" class="headerlink" title="1.1、v-if 和 v-show 区分使用场景"></a><strong>1.1、v-if 和 v-show 区分使用场景</strong></h3><p><strong>v-if</strong> 是 <strong>真正</strong> 的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p><strong>v-show</strong> 就简单得多， 不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 的 display 属性进行切换。</p><p>所以，v-if 适用于在运行时很少改变条件，不需要频繁切换条件的场景；v-show 则适用于需要非常频繁切换条件的场景。</p><h3 id="1-2、computed-和-watch-区分使用场景"><a href="#1-2、computed-和-watch-区分使用场景" class="headerlink" title="1.2、computed 和 watch  区分使用场景"></a><strong>1.2、computed 和 watch  区分使用场景</strong></h3><p><strong>computed：</strong> 是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed  的值；</p><p><strong>watch：</strong> 更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；</p><p><strong>运用场景：</strong></p><ul><li>当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；</li><li>当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</li></ul><h3 id="1-3、v-for-遍历必须为-item-添加-key，且避免同时使用-v-if"><a href="#1-3、v-for-遍历必须为-item-添加-key，且避免同时使用-v-if" class="headerlink" title="1.3、v-for 遍历必须为 item 添加 key，且避免同时使用 v-if"></a>1.3、v-for 遍历必须为 item 添加 key，且避免同时使用 v-if</h3><p><strong>（1）v-for 遍历必须为 item 添加 key</strong></p><p>在列表数据进行遍历渲染时，需要为每一项 item 设置唯一 key 值，方便 Vue.js 内部机制精准找到该条列表数据。当 state 更新时，新的状态值和旧的状态值对比，较快地定位到 diff 。</p><p><strong>（2）v-for 遍历避免同时使用 v-if</strong></p><p>v-for 比 v-if 优先级高，如果每一次都需要遍历整个数组，将会影响速度，尤其是当之需要渲染很小一部分的时候，必要情况下应该替换成 computed 属性。</p><p><strong>推荐：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt; </span><br><span class="line">    &lt;li  </span><br><span class="line">        v-for=&quot;user in activeUsers&quot;  </span><br><span class="line">        :key=&quot;user.id&quot;&gt;  </span><br><span class="line">        &#123;&#123; user.name &#125;&#125;  </span><br><span class="line">    &lt;/li&gt;&lt;/ul&gt;</span><br><span class="line">computed: &#123; </span><br><span class="line">activeUsers: function () &#123;  </span><br><span class="line">return this.users.filter(function (user) &#123;  </span><br><span class="line">return user.isActive   </span><br><span class="line">&#125;) </span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>不推荐：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;  </span><br><span class="line">    &lt;li   </span><br><span class="line">        v-for=&quot;user in users&quot;  </span><br><span class="line">        v-if=&quot;user.isActive&quot; </span><br><span class="line">        :key=&quot;user.id&quot;&gt;  </span><br><span class="line">        &#123;&#123; user.name &#125;&#125; </span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h3 id="1-4、长列表性能优化"><a href="#1-4、长列表性能优化" class="headerlink" title="1.4、长列表性能优化"></a><strong>1.4、长列表性能优化</strong></h3><p>Vue 会通过 Object.defineProperty 对数据进行劫持，来实现视图响应数据的变化，然而有些时候我们的组件就是纯粹的数据展示，不会有任何改变，我们就不需要 Vue 来劫持我们的数据，在大量数据展示的情况下，这能够很明显的减少组件初始化的时间，那如何禁止 Vue 劫持我们的数据呢？可以通过 Object.freeze 方法来冻结一个对象，一旦被冻结的对象就再也不能被修改了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;  </span><br><span class="line">data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;    </span><br><span class="line">users: &#123;&#125; </span><br><span class="line">&#125;), </span><br><span class="line"><span class="keyword">async</span> created() &#123;  </span><br><span class="line"><span class="keyword">const</span> users = <span class="keyword">await</span> axios.get(<span class="string">"/api/users"</span>); </span><br><span class="line"><span class="keyword">this</span>.users = <span class="built_in">Object</span>.freeze(users);  </span><br><span class="line">&#125;&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-5、事件的销毁"><a href="#1-5、事件的销毁" class="headerlink" title="1.5、事件的销毁"></a><strong>1.5、事件的销毁</strong></h3><p>Vue 组件销毁时，会自动清理它与其它实例的连接，解绑它的全部指令及事件监听器，但是仅限于组件本身的事件。如果在 js 内使用 addEventListene 等方式是不会自动销毁的，我们需要在组件销毁时手动移除这些事件的监听，以免造成内存泄露，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">created() &#123; </span><br><span class="line">    addEventListener(<span class="string">'click'</span>, <span class="keyword">this</span>.click, <span class="literal">false</span>)</span><br><span class="line">&#125;,</span><br><span class="line">beforeDestroy() &#123;  </span><br><span class="line">    removeEventListener(<span class="string">'click'</span>, <span class="keyword">this</span>.click, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6、图片资源懒加载"><a href="#1-6、图片资源懒加载" class="headerlink" title="1.6、图片资源懒加载"></a><strong>1.6、图片资源懒加载</strong></h3><p>对于图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内未出现在可视区域内的图片先不做加载， 等到滚动到可视区域后再去加载。这样对于页面加载性能上会有很大的提升，也提高了用户体验。我们在项目中使用 Vue 的 vue-lazyload 插件：</p><p>（1）安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-lazyload --save-dev</span><br></pre></td></tr></table></figure><p>（2）在入口文件 man.js 中引入并使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import VueLazyload from &apos;vue-lazyload&apos;</span><br></pre></td></tr></table></figure><p>然后再 vue 中直接使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(VueLazyload)</span><br></pre></td></tr></table></figure><p>或者添加自定义选项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(VueLazyload, &#123;</span><br><span class="line">    preLoad: <span class="number">1.3</span>,</span><br><span class="line">    error: <span class="string">'dist/error.png'</span>,</span><br><span class="line">    loading: <span class="string">'dist/loading.gif'</span>,</span><br><span class="line">    attempt: <span class="number">1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>（3）在 vue 文件中将 img 标签的 src 属性直接改为 v-lazy ，从而将图片显示方式更改为懒加载显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img v-lazy=&quot;/static/img/1.png&quot;&gt;</span><br></pre></td></tr></table></figure><p>以上为 vue-lazyload 插件的简单使用，如果要看插件的更多参数选项，可以查看 vue-lazyload 的 github 地址。</p><h3 id="1-7、路由懒加载"><a href="#1-7、路由懒加载" class="headerlink" title="1.7、路由懒加载"></a><strong>1.7、路由懒加载</strong></h3><p>Vue  是单页面应用，可能会有很多的路由引入 ，这样使用 webpcak 打包后的文件很大，当进入首页时，加载的资源过多，页面会出现白屏的情况，不利于用户体验。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应的组件，这样就更加高效了。这样会大大提高首屏显示的速度，但是可能其他的页面的速度就会降下来。</p><p><strong>路由懒加载：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./Foo.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;  </span><br><span class="line">    routes: [    </span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: Foo &#125; </span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-8、第三方插件的按需引入"><a href="#1-8、第三方插件的按需引入" class="headerlink" title="1.8、第三方插件的按需引入"></a><strong>1.8、第三方插件的按需引入</strong></h3><p>我们在项目中经常会需要引入第三方插件，如果我们直接引入整个插件，会导致项目的体积太大，我们可以借助 <code>babel-plugin-component</code> ，然后可以只引入需要的组件，以达到减小项目体积的目的。以下为项目中引入 element-ui 组件库为例：</p><p>（1）首先，安装 <code>babel-plugin-component</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-plugin-component -D</span><br></pre></td></tr></table></figure><p>（2）然后，将 .babelrc 修改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    <span class="string">"presets"</span>: [[<span class="string">"es2015"</span>, &#123; <span class="string">"modules"</span>: <span class="literal">false</span> &#125;]],  </span><br><span class="line">        <span class="string">"plugins"</span>: [   </span><br><span class="line">            [   </span><br><span class="line">                <span class="string">"component"</span>,   </span><br><span class="line">                &#123;      </span><br><span class="line">                    <span class="string">"libraryName"</span>: <span class="string">"element-ui"</span>,   </span><br><span class="line">                    <span class="string">"styleLibraryName"</span>: <span class="string">"theme-chalk"</span>   </span><br><span class="line">                &#125; </span><br><span class="line">            ]  </span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）在 main.js 中引入部分组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Button, Select &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span>; </span><br><span class="line">Vue.use(Button) </span><br><span class="line">Vue.use(Select)</span><br></pre></td></tr></table></figure><h3 id="1-9、优化无限列表性能"><a href="#1-9、优化无限列表性能" class="headerlink" title="1.9、优化无限列表性能"></a><strong>1.9、优化无限列表性能</strong></h3><p>如果你的应用存在非常长或者无限滚动的列表，那么需要采用 窗口化 的技术来优化性能，只需要渲染少部分区域的内容，减少重新渲染组件和创建 dom 节点的时间。你可以参考以下开源项目 vue-virtual-scroll-list 和 vue-virtual-scroller  来优化这种无限列表的场景的。</p><h3 id="1-10、服务端渲染-SSR-or-预渲染"><a href="#1-10、服务端渲染-SSR-or-预渲染" class="headerlink" title="1.10、服务端渲染 SSR or 预渲染"></a><strong>1.10、服务端渲染 SSR or 预渲染</strong></h3><p>服务端渲染是指 Vue 在客户端将标签渲染成的整个 html 片段的工作在服务端完成，服务端形成的 html 片段直接返回给客户端这个过程就叫做服务端渲染。</p><p><strong>（1）服务端渲染的优点：</strong></p><ul><li>更好的 SEO：因为 SPA 页面的内容是通过 Ajax 获取，而搜索引擎爬取工具并不会等待 Ajax 异步完成后再抓取页面内容，所以在 SPA 中是抓取不到页面通过 Ajax 获取到的内容；而 SSR 是直接由服务端返回已经渲染好的页面（数据已经包含在页面中），所以搜索引擎爬取工具可以抓取渲染好的页面；</li><li>更快的内容到达时间（首屏加载更快）：SPA 会等待所有 Vue 编译后的 js 文件都下载完成后，才开始进行页面的渲染，文件下载等需要一定的时间等，所以首屏渲染需要一定的时间；SSR 直接由服务端渲染好页面直接返回显示，无需等待下载 js 文件及再去渲染等，所以 SSR 有更快的内容到达时间；</li></ul><p><strong>（2）服务端渲染的缺点：</strong></p><ul><li>更多的开发条件限制：例如服务端渲染只支持 beforCreate 和 created 两个钩子函数，这会导致一些外部扩展库需要特殊处理，才能在服务端渲染应用程序中运行；并且与可以部署在任何静态文件服务器上的完全静态单页面应用程序 SPA 不同，服务端渲染应用程序，需要处于 Node.js server 运行环境；</li><li>更多的服务器负载：在 Node.js 中渲染完整的应用程序，显然会比仅仅提供静态文件的 server 更加大量占用CPU 资源，因此如果你预料在高流量环境下使用，请准备相应的服务器负载，并明智地采用缓存策略。</li></ul><p>如果你的项目的 SEO 和 首屏渲染是评价项目的关键指标，那么你的项目就需要服务端渲染来帮助你实现最佳的初始加载性能和 SEO，具体的 Vue SSR 如何实现，可以参考作者的另一篇文章《Vue SSR 踩坑之旅》。如果你的 Vue 项目只需改善少数营销页面（例如  <code>/， /about， /contac</code>t 等）的 SEO，那么你可能需要<strong>预渲染</strong>，在构建时 (build time) 简单地生成针对特定路由的静态 HTML 文件。优点是设置预渲染更简单，并可以将你的前端作为一个完全静态的站点，具体你可以使用 prerender-spa-plugin 就可以轻松地添加预渲染 。</p><h2 id="二、Webpack-层面的优化"><a href="#二、Webpack-层面的优化" class="headerlink" title="二、Webpack 层面的优化"></a><strong>二、Webpack 层面的优化</strong></h2><h3 id="2-1、Webpack-对图片进行压缩"><a href="#2-1、Webpack-对图片进行压缩" class="headerlink" title="2.1、Webpack 对图片进行压缩"></a><strong>2.1、Webpack 对图片进行压缩</strong></h3><p>在 vue 项目中除了可以在 <code>webpack.base.conf.js</code> 中 url-loader 中设置 limit 大小来对图片处理，对小于 limit 的图片转化为 base64 格式，其余的不做操作。所以对有些较大的图片资源，在请求资源的时候，加载会很慢，我们可以用 <code>image-webpack-loader</code>来压缩图片：</p><p>（1）首先，安装 image-webpack-loader  ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install image-webpack-loader --save-dev</span><br></pre></td></tr></table></figure><p>（2）然后，在 webpack.base.conf.js  中进行配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    test: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,  </span><br><span class="line">        use:[  </span><br><span class="line">            &#123;   </span><br><span class="line">                loader: <span class="string">'url-loader'</span>,  </span><br><span class="line">                options: &#123;    </span><br><span class="line">                    limit: <span class="number">10000</span>,   </span><br><span class="line">                    name: utils.assetsPath(<span class="string">'img/[name].[hash:7].[ext]'</span>)   </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;,   </span><br><span class="line">            &#123;    </span><br><span class="line">                loader: <span class="string">'image-webpack-loader'</span>,  </span><br><span class="line">                options: &#123;       </span><br><span class="line">                    bypassOnDebug: <span class="literal">true</span>,   </span><br><span class="line">                &#125;   </span><br><span class="line">            &#125; </span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2、减少-ES6-转为-ES5-的冗余代码"><a href="#2-2、减少-ES6-转为-ES5-的冗余代码" class="headerlink" title="2.2、减少 ES6 转为 ES5 的冗余代码"></a><strong>2.2、减少 ES6 转为 ES5 的冗余代码</strong></h3><p>Babel 插件会在将 ES6 代码转换成 ES5 代码时会注入一些辅助函数，例如下面的 ES6 代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWebpack</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>这段代码再被转换成能正常运行的 ES5 代码时需要以下两个辅助函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel-runtime/helpers/createClass  <span class="comment">// 用于实现 class 语法babel-runtime/helpers/inherits  // 用于实现 extends 语法</span></span><br></pre></td></tr></table></figure><p>在默认情况下， Babel 会在每个输出文件中内嵌这些依赖的辅助函数代码，如果多个源代码文件都依赖这些辅助函数，那么这些辅助函数的代码将会出现很多次，造成代码冗余。为了不让这些辅助函数的代码重复出现，可以在依赖它们时通过 <code>require(&#39;babel-runtime/helpers/createClass&#39;)</code> 的方式导入，这样就能做到只让它们出现一次。<code>babel-plugin-transform-runtime</code> 插件就是用来实现这个作用的，将相关辅助函数进行替换成导入语句，从而减小 babel 编译出来的代码的文件大小。</p><p>（1）首先，安装 <code>babel-plugin-transform-runtime</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-plugin-transform-runtime --save-dev</span><br></pre></td></tr></table></figure><p>（2）然后，修改 .babelrc  配置文件为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;plugins&quot;: [    &quot;transform-runtime&quot;]</span><br></pre></td></tr></table></figure><p>如果要看插件的更多详细内容，可以查看babel-plugin-transform-runtime 的 详细介绍。</p><h3 id="2-3、提取公共代码"><a href="#2-3、提取公共代码" class="headerlink" title="2.3、提取公共代码"></a><strong>2.3、提取公共代码</strong></h3><p>如果项目中没有去将每个页面的第三方库和公共模块提取出来，则项目会存在以下问题：</p><ul><li>相同的资源被重复加载，浪费用户的流量和服务器的成本。</li><li>每个页面需要加载的资源太大，导致网页首屏加载缓慢，影响用户体验。</li></ul><p>所以我们需要将多个页面的公共代码抽离成单独的文件，来优化以上问题 。Webpack 内置了专门用于提取多个Chunk 中的公共部分的插件 CommonsChunkPlugin，我们在项目中 CommonsChunkPlugin 的配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有在 package.json 里面依赖的包，都会被打包进 vendor.js 这个文件中。</span></span><br><span class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;  </span><br><span class="line">    name: <span class="string">'vendor'</span>, </span><br><span class="line">    minChunks: <span class="function"><span class="keyword">function</span>(<span class="params">module, count</span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> (     </span><br><span class="line">            <span class="built_in">module</span>.resource &amp;&amp;    </span><br><span class="line">            /\.js$/.test(<span class="built_in">module</span>.resource) &amp;&amp; </span><br><span class="line">            <span class="built_in">module</span>.resource.indexOf(   </span><br><span class="line">                path.join(__dirname, <span class="string">'../node_modules'</span>)  </span><br><span class="line">            ) === <span class="number">0</span>  </span><br><span class="line">        );  </span><br><span class="line">    &#125;&#125;),</span><br><span class="line">    <span class="comment">// 抽取出代码模块的映射关系</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123; </span><br><span class="line">    name: <span class="string">'manifest'</span>, </span><br><span class="line">    chunks: [<span class="string">'vendor'</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果要看插件的更多详细内容，可以查看 CommonsChunkPlugin 的 详细介绍。</p><h3 id="2-4、模板预编译"><a href="#2-4、模板预编译" class="headerlink" title="2.4、模板预编译"></a><strong>2.4、模板预编译</strong></h3><p>当使用 DOM 内模板或 JavaScript 内的字符串模板时，模板会在运行时被编译为渲染函数。通常情况下这个过程已经足够快了，但对性能敏感的应用还是最好避免这种用法。</p><p>预编译模板最简单的方式就是使用单文件组件——相关的构建设置会自动把预编译处理好，所以构建好的代码已经包含了编译出来的渲染函数而不是原始的模板字符串。</p><p>如果你使用 webpack，并且喜欢分离 JavaScript 和模板文件，你可以使用 vue-template-loader，它也可以在构建过程中把模板文件转换成为 JavaScript 渲染函数。</p><h3 id="2-5、提取组件的-CSS"><a href="#2-5、提取组件的-CSS" class="headerlink" title="2.5、提取组件的 CSS"></a><strong>2.5、提取组件的 CSS</strong></h3><p>当使用单文件组件时，组件内的 CSS 会以 style 标签的方式通过 JavaScript 动态注入。这有一些小小的运行时开销，如果你使用服务端渲染，这会导致一段 “无样式内容闪烁 (fouc) ” 。将所有组件的 CSS 提取到同一个文件可以避免这个问题，也会让 CSS 更好地进行压缩和缓存。</p><p>查阅这个构建工具各自的文档来了解更多：</p><ul><li>webpack + vue-loader ( vue-cli 的 webpack 模板已经预先配置好)</li><li>Browserify + vueify</li><li>Rollup + rollup-plugin-vue</li></ul><h3 id="2-6、优化-SourceMap"><a href="#2-6、优化-SourceMap" class="headerlink" title="2.6、优化 SourceMap"></a><strong>2.6、优化 SourceMap</strong></h3><p>我们在项目进行打包后，会将开发中的多个文件代码打包到一个文件中，并且经过压缩、去掉多余的空格、babel编译化后，最终将编译得到的代码会用于线上环境，那么这样处理后的代码和源代码会有很大的差别，当有 bug的时候，我们只能定位到压缩处理后的代码位置，无法定位到开发环境中的代码，对于开发来说不好调式定位问题，因此 sourceMap 出现了，它就是为了解决不好调式代码问题的。</p><p>SourceMap 的可选值如下（+ 号越多，代表速度越快，- 号越多，代表速度越慢, o 代表中等速度 ）</p><p><img src="https://mmbiz.qpic.cn/mmbiz/vO7l6lQ0Bwp93bVxQ1x6g02QAATHctkZHo5EINF8AyZbqInFLsk7YQlHxxIU7FsQ3JvyTXqEohf9wj1iauYsQjQ/640?wx_fmt=other&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p><strong>开发环境推荐：cheap-module-eval-source-map</strong></p><p><strong>生产环境推荐：cheap-module-source-map</strong></p><p>原因如下：</p><ul><li><strong>cheap</strong>：源代码中的列信息是没有任何作用，因此我们打包后的文件不希望包含列相关信息，只有行信息能建立打包前后的依赖关系。因此不管是开发环境或生产环境，我们都希望添加 cheap 的基本类型来忽略打包前后的列信息；</li><li><strong>module</strong> ：不管是开发环境还是正式环境，我们都希望能定位到bug的源代码具体的位置，比如说某个 Vue 文件报错了，我们希望能定位到具体的 Vue 文件，因此我们也需要 module 配置；</li><li><strong>soure-map</strong> ：source-map 会为每一个打包后的模块生成独立的 soucemap 文件 ，因此我们需要增加source-map 属性；</li><li><strong>eval-source-map</strong>：eval 打包代码的速度非常快，因为它不生成 map 文件，但是可以对 eval 组合使用 eval-source-map 使用会将 map 文件以 DataURL 的形式存在打包后的 js 文件中。在正式环境中不要使用 eval-source-map, 因为它会增加文件的大小，但是在开发环境中，可以试用下，因为他们打包的速度很快。</li></ul><h3 id="2-7、构建结果输出分析"><a href="#2-7、构建结果输出分析" class="headerlink" title="2.7、构建结果输出分析"></a><strong>2.7、构建结果输出分析</strong></h3><p>Webpack 输出的代码可读性非常差而且文件非常大，让我们非常头疼。为了更简单、直观地分析输出结果，社区中出现了许多可视化分析工具。这些工具以图形的方式将结果更直观地展示出来，让我们快速了解问题所在。接下来讲解我们在 Vue 项目中用到的分析工具：<code>webpack-bundle-analyzer</code> 。</p><p>我们在项目中 <code>webpack.prod.conf.js</code> 进行配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (config.build.bundleAnalyzerReport) &#123; </span><br><span class="line">    <span class="keyword">var</span> BundleAnalyzerPlugin =  </span><br><span class="line">       <span class="built_in">require</span>(<span class="string">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin; </span><br><span class="line">    webpackConfig.plugins.push(<span class="keyword">new</span> BundleAnalyzerPlugin());&#125;</span><br></pre></td></tr></table></figure><p>执行  <code>$ npm run build --report</code>  后生成分析报告如下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_gif/vO7l6lQ0Bwp93bVxQ1x6g02QAATHctkZfCgCkS90NhQlgRfnG7NoT4yIZPaj5ykAnOuVibVhT1ibZbmBdrrU91cg/640?wx_fmt=gif&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="img"></p><h3 id="2-8、Vue-项目的编译优化"><a href="#2-8、Vue-项目的编译优化" class="headerlink" title="2.8、Vue 项目的编译优化"></a><strong>2.8、Vue 项目的编译优化</strong></h3><p>如果你的 Vue 项目使用 Webpack 编译，需要你喝一杯咖啡的时间，那么也许你需要对项目的 Webpack 配置进行优化，提高 Webpack 的构建效率。具体如何进行 Vue 项目的 Webpack 构建优化，可以参考作者的另一篇文章《 Vue 项目 Webpack 优化实践》</p><h2 id="三、基础的-Web-技术优化"><a href="#三、基础的-Web-技术优化" class="headerlink" title="三、基础的 Web 技术优化"></a><strong>三、基础的 Web 技术优化</strong></h2><h3 id="3-1、开启-gzip-压缩"><a href="#3-1、开启-gzip-压缩" class="headerlink" title="3.1、开启 gzip 压缩"></a><strong>3.1、开启 gzip 压缩</strong></h3><p>gzip 是 GNUzip 的缩写，最早用于 UNIX 系统的文件压缩。HTTP 协议上的 gzip 编码是一种用来改进 web 应用程序性能的技术，web 服务器和客户端（浏览器）必须共同支持 gzip。目前主流的浏览器，Chrome，firefox，IE等都支持该协议。常见的服务器如 Apache，Nginx，IIS 同样支持，gzip 压缩效率非常高，通常可以达到 70% 的压缩率，也就是说，如果你的网页有 30K，压缩之后就变成了 9K 左右</p><p>以下我们以服务端使用我们熟悉的 express 为例，开启 gzip 非常简单，相关步骤如下：</p><ul><li>安装：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install compression --save</span><br></pre></td></tr></table></figure><ul><li>添加代码逻辑：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> compression = <span class="built_in">require</span>(<span class="string">'compression'</span>);<span class="keyword">var</span> app = express();app.use(compression())</span><br></pre></td></tr></table></figure><ul><li>重启服务，观察网络面板里面的 response header，如果看到如下红圈里的字段则表明 gzip 开启成功 ：</li></ul><p>  <img src="https://mmbiz.qpic.cn/mmbiz/vO7l6lQ0Bwp93bVxQ1x6g02QAATHctkZATvt3MWPPtg5ibn4ACkyclpL93EOTC4hF4WOa8T3uLfBCrRIwq6jUMA/640?wx_fmt=other&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><h3 id="3-2、浏览器缓存"><a href="#3-2、浏览器缓存" class="headerlink" title="3.2、浏览器缓存"></a><strong>3.2、浏览器缓存</strong></h3><p>为了提高用户加载页面的速度，对静态资源进行缓存是非常必要的，根据是否需要重新向服务器发起请求来分类，将 HTTP 缓存规则分为两大类（强制缓存，对比缓存），如果对缓存机制还不是了解很清楚的，可以参考作者写的关于 HTTP 缓存的文章《深入理解HTTP缓存机制及原理》，这里不再赘述。</p><h3 id="3-3、CDN-的使用"><a href="#3-3、CDN-的使用" class="headerlink" title="3.3、CDN 的使用"></a><strong>3.3、CDN 的使用</strong></h3><p>浏览器从服务器上下载 CSS、js 和图片等文件时都要和服务器连接，而大部分服务器的带宽有限，如果超过限制，网页就半天反应不过来。而 CDN 可以通过不同的域名来加载文件，从而使下载文件的并发连接数大大增加，且CDN 具有更好的可用性，更低的网络延迟和丢包率 。</p><h3 id="3-4、使用-Chrome-Performance-查找性能瓶颈"><a href="#3-4、使用-Chrome-Performance-查找性能瓶颈" class="headerlink" title="3.4、使用 Chrome Performance 查找性能瓶颈"></a><strong>3.4、使用 Chrome Performance 查找性能瓶颈</strong></h3><p>Chrome 的 Performance 面板可以录制一段时间内的 js 执行细节及时间。使用 Chrome 开发者工具分析页面性能的步骤如下。</p><ol><li>打开 Chrome 开发者工具，切换到 Performance 面板</li><li>点击 Record 开始录制</li><li>刷新页面或展开某个节点</li><li>点击 Stop 停止录制</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz/vO7l6lQ0Bwp93bVxQ1x6g02QAATHctkZCgv6IpOYAwWAuia0MY9hj6eXpQNNpbAHVdsGoUu3kibLrhY7jbBrQBBg/640?wx_fmt=other&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS常用公具</title>
      <link href="/passages/JS%E5%B8%B8%E7%94%A8%E5%85%AC%E5%85%B7/"/>
      <url>/passages/JS%E5%B8%B8%E7%94%A8%E5%85%AC%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p><strong>1、isStatic：</strong> <strong>检测数据是不是除了symbol外的原始数据</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isStatic</span>(<span class="params">value</span>) </span>&#123;   </span><br><span class="line">    <span class="keyword">return</span>(      </span><br><span class="line">        <span class="keyword">typeof</span> value === <span class="string">'string'</span> ||     </span><br><span class="line">        <span class="keyword">typeof</span> value === <span class="string">'number'</span> ||    </span><br><span class="line">        <span class="keyword">typeof</span> value === <span class="string">'boolean'</span> ||      </span><br><span class="line">        <span class="keyword">typeof</span> value === <span class="string">'undefined'</span> ||     </span><br><span class="line">        value === <span class="literal">null</span>   </span><br><span class="line">    )&#125;</span><br></pre></td></tr></table></figure><h2 id="2、isPrimitive：-检测数据是不是原始数据"><a href="#2、isPrimitive：-检测数据是不是原始数据" class="headerlink" title="2、isPrimitive： 检测数据是不是原始数据"></a><strong>2、isPrimitive：</strong> <strong>检测数据是不是原始数据</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrimitive</span>(<span class="params">value</span>) </span>&#123;   </span><br><span class="line">    <span class="keyword">return</span> isStatic(value) || <span class="keyword">typeof</span> value === <span class="string">'symbol'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、isObject：-判断数据是不是引用类型的数据-例如：-arrays-functions-objects-regexes-new-Number-0-以及-new-String-‘’"><a href="#3、isObject：-判断数据是不是引用类型的数据-例如：-arrays-functions-objects-regexes-new-Number-0-以及-new-String-‘’" class="headerlink" title="3、isObject： 判断数据是不是引用类型的数据 (例如： arrays, functions, objects, regexes, new Number(0),以及 new String(‘’))"></a><strong>3、isObject：</strong> <strong>判断数据是不是引用类型的数据 (例如：</strong> <strong>arrays, functions, objects, regexes, new Number(0),以及 new String(‘’))</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">value</span>) </span>&#123;     </span><br><span class="line">    <span class="keyword">let</span> type = <span class="keyword">typeof</span> value;   </span><br><span class="line">    <span class="keyword">return</span> value != <span class="literal">null</span> &amp;&amp; (type == <span class="string">'object'</span> || type == <span class="string">'function'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、isObjectLike：-检查-value-是否是-类对象。-如果一个值是类对象，那么它不应该是-null，而且-typeof-后的结果是-“object”"><a href="#4、isObjectLike：-检查-value-是否是-类对象。-如果一个值是类对象，那么它不应该是-null，而且-typeof-后的结果是-“object”" class="headerlink" title="4、isObjectLike：  检查 value 是否是 类对象。 如果一个值是类对象，那么它不应该是 null，而且 typeof 后的结果是 “object”"></a><strong>4、isObjectLike： </strong> <strong>检查 value 是否是 类对象。</strong> <strong>如果一个值是类对象，那么它不应该是 null，而且 typeof 后的结果是 “object”</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObjectLike</span>(<span class="params">value</span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">return</span> value != <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> value == <span class="string">'object'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、getRawType：-获取数据类型，返回结果为-Number、String、Object、Array等"><a href="#5、getRawType：-获取数据类型，返回结果为-Number、String、Object、Array等" class="headerlink" title="5、getRawType： 获取数据类型，返回结果为 Number、String、Object、Array等"></a><strong>5、getRawType：</strong> <strong>获取数据类型，返回结果为 Number、String、Object、Array等</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRawType</span>(<span class="params">value</span>) </span>&#123;   </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value).slice(<span class="number">8</span>, <span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//getoRawType([]) ==&gt; Array</span></span><br></pre></td></tr></table></figure><h2 id="6、isPlainObject：-判断数据是不是Object类型的数据"><a href="#6、isPlainObject：-判断数据是不是Object类型的数据" class="headerlink" title="6、isPlainObject：  判断数据是不是Object类型的数据"></a><strong>6、isPlainObject： </strong> <strong>判断数据是不是Object类型的数据</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPlainObject</span>(<span class="params">obj</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Object]'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、isArray：-判断数据是不是数组类型的数据"><a href="#7、isArray：-判断数据是不是数组类型的数据" class="headerlink" title="7、isArray： 判断数据是不是数组类型的数据"></a><strong>7、isArray：</strong> <strong>判断数据是不是数组类型的数据</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arr</span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(arr) === <span class="string">'[object Array]'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将isArray挂载到Array上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray = <span class="built_in">Array</span>.isArray || isArray;</span><br></pre></td></tr></table></figure><h2 id="8、isRegExp：-判断数据是不是正则对象"><a href="#8、isRegExp：-判断数据是不是正则对象" class="headerlink" title="8、isRegExp： 判断数据是不是正则对象"></a><strong>8、isRegExp：</strong> <strong>判断数据是不是正则对象</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isRegExp</span>(<span class="params">value</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) === <span class="string">'[object RegExp]'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9、isDate：-判断数据是不是时间对象"><a href="#9、isDate：-判断数据是不是时间对象" class="headerlink" title="9、isDate： 判断数据是不是时间对象"></a><strong>9、isDate：</strong> <strong>判断数据是不是时间对象</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDate</span>(<span class="params">value</span>) </span>&#123;    </span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) === <span class="string">'[object Date]'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10、isNative：-判断-value-是不是浏览器内置函数"><a href="#10、isNative：-判断-value-是不是浏览器内置函数" class="headerlink" title="10、isNative： 判断 value 是不是浏览器内置函数"></a><strong>10、isNative：</strong> <strong>判断 value 是不是浏览器内置函数</strong></h2><p>内置函数toString后的主体代码块为 [native code] ，而非内置函数则为相关代码，所以非内置函数可以进行拷贝(toString后掐头去尾再由Function转)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNative</span>(<span class="params">value</span>) </span>&#123;   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">'function'</span> &amp;&amp; <span class="regexp">/native code/</span>.test(value.toString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11、isFunction：-检查-value-是不是函数"><a href="#11、isFunction：-检查-value-是不是函数" class="headerlink" title="11、isFunction： 检查 value 是不是函数"></a><strong>11、isFunction：</strong> <strong>检查 value 是不是函数</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">value</span>) </span>&#123;   </span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) === <span class="string">'[object Function]'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12、isLength：-检查-value-是否为有效的类数组长度"><a href="#12、isLength：-检查-value-是否为有效的类数组长度" class="headerlink" title="12、isLength： 检查 value 是否为有效的类数组长度"></a><strong>12、isLength：</strong> <strong>检查 value 是否为有效的类数组长度</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isLength</span>(<span class="params">value</span>) </span>&#123;    </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">typeof</span> value == <span class="string">'number'</span> &amp;&amp; value &gt; <span class="number">-1</span> &amp;&amp; value % <span class="number">1</span> == <span class="number">0</span> &amp;&amp; value &lt;= <span class="built_in">Number</span>.MAX_SAFE_INTEGER;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13、isArrayLike：-检查-value-是否是类数组"><a href="#13、isArrayLike：-检查-value-是否是类数组" class="headerlink" title="13、isArrayLike： 检查 value 是否是类数组"></a><strong>13、isArrayLike：</strong> <strong>检查 value 是否是类数组</strong></h2><p>如果一个值被认为是类数组，那么它不是一个函数，并且value.length是个整数，大于等于 0，小于或等于 Number.MAX_SAFE_INTEGER。这里字符串也将被当作类数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArrayLike</span>(<span class="params">value</span>) </span>&#123;      </span><br><span class="line">    <span class="keyword">return</span> value != <span class="literal">null</span> &amp;&amp; isLength(value.length) &amp;&amp; !isFunction(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14、isEmpty：-检查-value-是否为空"><a href="#14、isEmpty：-检查-value-是否为空" class="headerlink" title="14、isEmpty： 检查 value 是否为空"></a><strong>14、isEmpty：</strong> <strong>检查 value 是否为空</strong></h2><p>如果是null，直接返回true；如果是类数组，判断数据长度；如果是Object对象，判断是否具有属性；如果是其他数据，直接返回false(也可改为返回true)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span>(<span class="params">value</span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;       </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">if</span> (isArrayLike(value)) &#123;   </span><br><span class="line">        <span class="keyword">return</span> !value.length;   </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(isPlainObject(value))&#123;   </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> value) &#123;       </span><br><span class="line">            <span class="keyword">if</span> (hasOwnProperty.call(value, key)) &#123;    </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;       </span><br><span class="line">            &#125;     </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15、cached：-记忆函数：-缓存函数的运算结果"><a href="#15、cached：-记忆函数：-缓存函数的运算结果" class="headerlink" title="15、cached： 记忆函数：**缓存函数的运算结果**"></a><strong>15、cached：</strong> <strong>记忆函数：**</strong>缓存函数的运算结果**</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cached</span>(<span class="params">fn</span>) </span>&#123;   </span><br><span class="line">    <span class="keyword">let</span> cache = <span class="built_in">Object</span>.create(<span class="literal">null</span>);   </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">cachedFn</span>(<span class="params">str</span>) </span>&#123;    </span><br><span class="line">        <span class="keyword">let</span> hit = cache[str];    </span><br><span class="line">        <span class="keyword">return</span> hit || (cache[str] = fn(str))  </span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="16、camelize：-横线转驼峰命名"><a href="#16、camelize：-横线转驼峰命名" class="headerlink" title="16、camelize： 横线转驼峰命名"></a><strong>16、camelize：</strong> <strong>横线转驼峰命名</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> camelizeRE = <span class="regexp">/-(w)/g</span>;<span class="function"><span class="keyword">function</span> <span class="title">camelize</span>(<span class="params">str</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> str.replace(camelizeRE, <span class="function"><span class="keyword">function</span>(<span class="params">_, c</span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> c ? c.toUpperCase() : <span class="string">''</span>; </span><br><span class="line">    &#125;)&#125;<span class="comment">//ab-cd-ef ==&gt; abCdEf//使用记忆函数let _camelize = cached(camelize)</span></span><br></pre></td></tr></table></figure><h2 id="17、hyphenate：-驼峰命名转横线命名：-拆分字符串，使用-相连，并且转换为小写"><a href="#17、hyphenate：-驼峰命名转横线命名：-拆分字符串，使用-相连，并且转换为小写" class="headerlink" title="17、hyphenate： 驼峰命名转横线命名： 拆分字符串，使用 - 相连，并且转换为小写"></a><strong>17、hyphenate：</strong> <strong>驼峰命名转横线命名：</strong> <strong>拆分字符串，使用 - 相连，并且转换为小写</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hyphenateRE = <span class="regexp">/B([A-Z])/g</span>;<span class="function"><span class="keyword">function</span> <span class="title">hyphenate</span>(<span class="params">str</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> str.replace(hyphenateRE, <span class="string">'-$1'</span>).toLowerCase()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//abCd ==&gt; ab-cd//使用记忆函数let _hyphenate = cached(hyphenate);</span></span><br></pre></td></tr></table></figure><h2 id="18、capitalize：-字符串首位大写"><a href="#18、capitalize：-字符串首位大写" class="headerlink" title="18、capitalize： 字符串首位大写"></a><strong>18、capitalize：</strong> <strong>字符串首位大写</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">capitalize</span>(<span class="params">str</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> str.charAt(<span class="number">0</span>).toUpperCase() + str.slice(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// abc ==&gt; Abc//使用记忆函数let _capitalize = cached(capitalize)</span></span><br></pre></td></tr></table></figure><h2 id="19、extend：-将属性混合到目标对象中"><a href="#19、extend：-将属性混合到目标对象中" class="headerlink" title="19、extend： 将属性混合到目标对象中"></a><strong>19、extend：</strong> <strong>将属性混合到目标对象中</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">to, _from</span>) </span>&#123;   </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> _from) &#123;      </span><br><span class="line">        to[key] = _from[key]; </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> to</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="20、Object-assign：-对象属性复制，浅拷贝"><a href="#20、Object-assign：-对象属性复制，浅拷贝" class="headerlink" title="20、Object.assign： 对象属性复制，浅拷贝"></a><strong>20、Object.assign：</strong> <strong>对象属性复制，浅拷贝</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign = <span class="built_in">Object</span>.assign || <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Cannot convert undefined or null to object'</span>); </span><br><span class="line">    <span class="keyword">let</span> target = <span class="built_in">arguments</span>[<span class="number">0</span>],       </span><br><span class="line">        args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>),     </span><br><span class="line">        key    </span><br><span class="line">    args.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">for</span>(key <span class="keyword">in</span> item)&#123;      </span><br><span class="line">            item.hasOwnProperty(key) &amp;&amp; ( target[key] = item[key] )   </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;)   </span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Object.assign可以浅克隆一个对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> clone = <span class="built_in">Object</span>.assign(&#123;&#125;, target)</span><br></pre></td></tr></table></figure><p>简单的深克隆可以使用JSON.parse()和JSON.stringify()，这两个api是解析json数据的，所以只能解析除symbol外的原始类型及数组和对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> clone = <span class="built_in">JSON</span>.parse( <span class="built_in">JSON</span>.stringify(target) )</span><br></pre></td></tr></table></figure><h2 id="21、clone：-克隆数据，可深度克隆"><a href="#21、clone：-克隆数据，可深度克隆" class="headerlink" title="21、clone：  克隆数据，可深度克隆"></a><strong>21、clone：</strong>  <strong>克隆数据，可深度克隆</strong></h2><p>这里列出了原始类型，时间、正则、错误、数组、对象的克隆规则，其他的可自行补充</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">value, deep</span>)</span>&#123;   </span><br><span class="line">    <span class="keyword">if</span>(isPrimitive(value))&#123;  </span><br><span class="line">        <span class="keyword">return</span> value   </span><br><span class="line">    &#125;       </span><br><span class="line">    <span class="keyword">if</span> (isArrayLike(value)) &#123; </span><br><span class="line">        <span class="comment">//是类数组        </span></span><br><span class="line">        alue = <span class="built_in">Array</span>.prototype.slice.call(value)       </span><br><span class="line">        <span class="keyword">return</span> value.map(<span class="function"><span class="params">item</span> =&gt;</span> deep ? clone(item, deep) : item)   </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(isPlainObject(value))&#123; </span><br><span class="line">        <span class="comment">//是对象     </span></span><br><span class="line">        <span class="keyword">let</span> target = &#123;&#125;, key; </span><br><span class="line">        <span class="keyword">for</span> (key <span class="keyword">in</span> value) &#123;     </span><br><span class="line">            value.hasOwnProperty(key) &amp;&amp; ( target[key] = deep ? clone(value[key], deep) : value[key] )  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;       </span><br><span class="line">    <span class="keyword">let</span> type = getRawType(value)  </span><br><span class="line">    <span class="keyword">switch</span>(type)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="string">'Date'</span>:     </span><br><span class="line">        <span class="keyword">case</span> <span class="string">'RegExp'</span>:     </span><br><span class="line">        <span class="keyword">case</span> <span class="string">'Error'</span>: value = <span class="keyword">new</span> <span class="built_in">window</span>[type](value); <span class="keyword">break</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="22、识别各种浏览器及平台"><a href="#22、识别各种浏览器及平台" class="headerlink" title="22、识别各种浏览器及平台"></a><strong>22、识别各种浏览器及平台</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//运行环境是浏览器</span></span><br><span class="line"><span class="keyword">let</span> inBrowser = <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span>;</span><br><span class="line"><span class="comment">//运行环境是微信</span></span><br><span class="line"><span class="keyword">let</span> inWeex = <span class="keyword">typeof</span> WXEnvironment !== <span class="string">'undefined'</span> &amp;&amp; !!WXEnvironment.platform;<span class="keyword">let</span> weexPlatform = inWeex &amp;&amp; WXEnvironment.platform.toLowerCase();</span><br><span class="line"><span class="comment">//浏览器 UA 判断</span></span><br><span class="line"><span class="keyword">let</span> UA = inBrowser &amp;&amp; <span class="built_in">window</span>.navigator.userAgent.toLowerCase();</span><br><span class="line"><span class="keyword">let</span> isIE = UA &amp;&amp; <span class="regexp">/msie|trident/</span>.test(UA);</span><br><span class="line"><span class="keyword">let</span> isIE9 = UA &amp;&amp; UA.indexOf(<span class="string">'msie 9.0'</span>) &gt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> isEdge = UA &amp;&amp; UA.indexOf(<span class="string">'edge/'</span>) &gt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> isAndroid = (UA &amp;&amp; UA.indexOf(<span class="string">'android'</span>) &gt; <span class="number">0</span>) || (weexPlatform === <span class="string">'android'</span>);</span><br><span class="line"><span class="keyword">let</span> isIOS = (UA &amp;&amp; <span class="regexp">/iphone|ipad|ipod|ios/</span>.test(UA)) || (weexPlatform === <span class="string">'ios'</span>);</span><br><span class="line"><span class="keyword">let</span> isChrome = UA &amp;&amp; <span class="regexp">/chrome/</span>d+<span class="regexp">/.test(UA) &amp;&amp; !isEdge;</span></span><br></pre></td></tr></table></figure><h2 id="23、getExplorerInfo：-获取浏览器信息"><a href="#23、getExplorerInfo：-获取浏览器信息" class="headerlink" title="23、getExplorerInfo： 获取浏览器信息"></a><strong>23、getExplorerInfo：</strong> <strong>获取浏览器信息</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getExplorerInfo</span>(<span class="params"></span>) </span>&#123;   </span><br><span class="line">    <span class="keyword">let</span> t = navigator.userAgent.toLowerCase();   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> &lt;= t.indexOf(<span class="string">"msie"</span>) ? &#123; </span><br><span class="line">        <span class="comment">//ie &lt; 11   </span></span><br><span class="line">        type: <span class="string">"IE"</span>,   </span><br><span class="line">        version: <span class="built_in">Number</span>(t.match(<span class="regexp">/msie ([d]+)/</span>)[<span class="number">1</span>])  </span><br><span class="line">    &#125; : !!t.match(<span class="regexp">/trident/</span>.+?rv:(([d.]+))/) ? &#123; </span><br><span class="line">        <span class="comment">// ie 11       </span></span><br><span class="line">        type: <span class="string">"IE"</span>,    </span><br><span class="line">        version: <span class="number">11</span>   </span><br><span class="line">    &#125; : <span class="number">0</span> &lt;= t.indexOf(<span class="string">"edge"</span>) ? &#123;  </span><br><span class="line">        type: <span class="string">"Edge"</span>,   </span><br><span class="line">        version: <span class="built_in">Number</span>(t.match(<span class="regexp">/edge/</span>([d]+)/)[<span class="number">1</span>])   </span><br><span class="line">                        &#125; : <span class="number">0</span> &lt;= t.indexOf(<span class="string">"firefox"</span>) ? &#123;  </span><br><span class="line">            type: <span class="string">"Firefox"</span>,      </span><br><span class="line">            version: <span class="built_in">Number</span>(t.match(<span class="regexp">/firefox/</span>([d]+)/)[<span class="number">1</span>])  </span><br><span class="line">                            &#125; : <span class="number">0</span> &lt;= t.indexOf(<span class="string">"chrome"</span>) ? &#123;    </span><br><span class="line">                type: <span class="string">"Chrome"</span>,   </span><br><span class="line">                version: <span class="built_in">Number</span>(t.match(<span class="regexp">/chrome/</span>([d]+)/)[<span class="number">1</span>])  </span><br><span class="line">                                &#125; : <span class="number">0</span> &lt;= t.indexOf(<span class="string">"opera"</span>) ? &#123;  </span><br><span class="line">                    type: <span class="string">"Opera"</span>,     </span><br><span class="line">                    version: <span class="built_in">Number</span>(t.match(<span class="regexp">/opera.([d]+)/</span>)[<span class="number">1</span>])  </span><br><span class="line">                &#125; : <span class="number">0</span> &lt;= t.indexOf(<span class="string">"Safari"</span>) ? &#123;   </span><br><span class="line">                    type: <span class="string">"Safari"</span>,      </span><br><span class="line">                    version: <span class="built_in">Number</span>(t.match(<span class="regexp">/version/</span>([d]+)/)[<span class="number">1</span>])   </span><br><span class="line">                                    &#125; : &#123;       </span><br><span class="line">                                    type: t,    </span><br><span class="line">                                    version: <span class="number">-1</span> </span><br><span class="line">                                    &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h2 id="24、isPCBroswer：-检测是否为PC端浏览器模式"><a href="#24、isPCBroswer：-检测是否为PC端浏览器模式" class="headerlink" title="24、isPCBroswer： 检测是否为PC端浏览器模式"></a><strong>24、isPCBroswer：</strong> <strong>检测是否为PC端浏览器模式</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPCBroswer</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">let</span> e = navigator.userAgent.toLowerCase()    </span><br><span class="line">    , t = <span class="string">"ipad"</span> == e.match(<span class="regexp">/ipad/i</span>)  </span><br><span class="line">    , i = <span class="string">"iphone"</span> == e.match(<span class="regexp">/iphone/i</span>)    </span><br><span class="line">    , r = <span class="string">"midp"</span> == e.match(<span class="regexp">/midp/i</span>)      </span><br><span class="line">    , n = <span class="string">"rv:1.2.3.4"</span> == e.match(<span class="regexp">/rv:1.2.3.4/i</span>)     </span><br><span class="line">    , a = <span class="string">"ucweb"</span> == e.match(<span class="regexp">/ucweb/i</span>)       </span><br><span class="line">    , o = <span class="string">"android"</span> == e.match(<span class="regexp">/android/i</span>)     </span><br><span class="line">    , s = <span class="string">"windows ce"</span> == e.match(<span class="regexp">/windows ce/i</span>)    </span><br><span class="line">    , l = <span class="string">"windows mobile"</span> == e.match(<span class="regexp">/windows mobile/i</span>); </span><br><span class="line">    <span class="keyword">return</span> !(t || i || r || n || a || o || s || l)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="25、unique：-数组去重，返回一个新数组"><a href="#25、unique：-数组去重，返回一个新数组" class="headerlink" title="25、unique： 数组去重，返回一个新数组"></a><strong>25、unique：</strong> <strong>数组去重，返回一个新数组</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;    </span><br><span class="line">    <span class="keyword">if</span>(!isArrayLink(arr))&#123;</span><br><span class="line">        <span class="comment">//不是类数组对象 </span></span><br><span class="line">        <span class="keyword">return</span> arr </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">let</span> result = []  </span><br><span class="line">    <span class="keyword">let</span> objarr = []   </span><br><span class="line">    <span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>) </span><br><span class="line">    arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;      </span><br><span class="line">        <span class="keyword">if</span>(isStatic(item))&#123;</span><br><span class="line">            <span class="comment">//是除了symbol外的原始数据  </span></span><br><span class="line">            <span class="keyword">let</span> key = item + <span class="string">'_'</span> + getRawType(item);  </span><br><span class="line">            <span class="keyword">if</span>(!obj[key])&#123;        </span><br><span class="line">                obj[key] = <span class="literal">true</span>      </span><br><span class="line">                result.push(item)       </span><br><span class="line">            &#125;     </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//引用类型及symbol      </span></span><br><span class="line">            <span class="keyword">if</span>(!objarr.includes(item))&#123;    </span><br><span class="line">                objarr.push(item)    </span><br><span class="line">                result.push(item)     </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;)     </span><br><span class="line">    <span class="keyword">return</span> resulte</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="26、Set简单实现"><a href="#26、Set简单实现" class="headerlink" title="26、Set简单实现"></a><strong>26、Set简单实现</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.Set = <span class="built_in">window</span>.Set || (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Set</span>(<span class="params">arr</span>) </span>&#123;       </span><br><span class="line">        <span class="keyword">this</span>.items = arr ? unique(arr) : [];  </span><br><span class="line">        <span class="keyword">this</span>.size = <span class="keyword">this</span>.items.length; </span><br><span class="line">        <span class="comment">// Array的大小  </span></span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="built_in">Set</span>.prototype = &#123;  </span><br><span class="line">        add: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;     </span><br><span class="line">            <span class="comment">// 添加元素,若元素已存在,则跳过，返回 Set 结构本身。  </span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.has(value)) &#123;     </span><br><span class="line">                <span class="keyword">this</span>.items.push(value);   </span><br><span class="line">                <span class="keyword">this</span>.size++;      </span><br><span class="line">            &#125;        </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;  </span><br><span class="line">        &#125;,     </span><br><span class="line">        clear: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;    </span><br><span class="line">            <span class="comment">//清除所有成员，没有返回值。  </span></span><br><span class="line">            <span class="keyword">this</span>.items = []      </span><br><span class="line">            <span class="keyword">this</span>.size = <span class="number">0</span>      </span><br><span class="line">        &#125;,      </span><br><span class="line">        <span class="keyword">delete</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;    </span><br><span class="line">            <span class="comment">//删除某个值，返回一个布尔值，表示删除是否成功。  </span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.items.some(<span class="function">(<span class="params">v, i</span>) =&gt;</span> &#123;      </span><br><span class="line">                <span class="keyword">if</span>(v === value)&#123;     </span><br><span class="line">                    <span class="keyword">this</span>.items.splice(i,<span class="number">1</span>)   </span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>        </span><br><span class="line">                &#125;            </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>       </span><br><span class="line">            &#125;)     </span><br><span class="line">        &#125;,    </span><br><span class="line">        has: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;  </span><br><span class="line">            <span class="comment">//返回一个布尔值，表示该值是否为Set的成员。    </span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.items.some(<span class="function"><span class="params">v</span> =&gt;</span> v === value)     </span><br><span class="line">        &#125;,     </span><br><span class="line">        values: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.items     </span><br><span class="line">        &#125;,   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Set</span>;&#125;());</span><br></pre></td></tr></table></figure><h2 id="27、repeat：-生成一个重复的字符串，有n个str组成，可修改为填充为数组等"><a href="#27、repeat：-生成一个重复的字符串，有n个str组成，可修改为填充为数组等" class="headerlink" title="27、repeat： 生成一个重复的字符串，有n个str组成，可修改为填充为数组等"></a><strong>27、repeat：</strong> <strong>生成一个重复的字符串，有n个str组成，可修改为填充为数组等</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">str, n</span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">let</span> res = <span class="string">''</span>;   </span><br><span class="line">    <span class="keyword">while</span>(n) &#123;     </span><br><span class="line">        <span class="keyword">if</span>(n % <span class="number">2</span> === <span class="number">1</span>) &#123;   </span><br><span class="line">            res += str;      </span><br><span class="line">        &#125;       </span><br><span class="line">        <span class="keyword">if</span>(n &gt; <span class="number">1</span>) &#123; </span><br><span class="line">            str += str;   </span><br><span class="line">        &#125;      </span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>; </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> res&#125;;</span><br><span class="line"><span class="comment">//repeat('123',3) ==&gt; 123123123</span></span><br></pre></td></tr></table></figure><p>## </p><h2 id="28、dateFormater：-格式化时间"><a href="#28、dateFormater：-格式化时间" class="headerlink" title="28、dateFormater： 格式化时间"></a><strong>28、dateFormater：</strong> <strong>格式化时间</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateFormater</span>(<span class="params">formater, t</span>)</span>&#123;   </span><br><span class="line">    <span class="keyword">let</span> date = t ? <span class="keyword">new</span> <span class="built_in">Date</span>(t) : <span class="keyword">new</span> <span class="built_in">Date</span>(),  </span><br><span class="line">        Y = date.getFullYear() + <span class="string">''</span>,   </span><br><span class="line">        M = date.getMonth() + <span class="number">1</span>,     </span><br><span class="line">        D = date.getDate(),     </span><br><span class="line">        H = date.getHours(),   </span><br><span class="line">        m = date.getMinutes(),   </span><br><span class="line">        s = date.getSeconds();   </span><br><span class="line">    <span class="keyword">return</span> formater.replace(<span class="regexp">/YYYY|yyyy/g</span>,Y)  </span><br><span class="line">        .replace(<span class="regexp">/YY|yy/g</span>,Y.substr(<span class="number">2</span>,<span class="number">2</span>))   </span><br><span class="line">        .replace(<span class="regexp">/MM/g</span>,(M&lt;<span class="number">10</span>?<span class="string">'0'</span>:<span class="string">''</span>) + M)   </span><br><span class="line">        .replace(<span class="regexp">/DD/g</span>,(D&lt;<span class="number">10</span>?<span class="string">'0'</span>:<span class="string">''</span>) + D) </span><br><span class="line">        .replace(<span class="regexp">/HH|hh/g</span>,(H&lt;<span class="number">10</span>?<span class="string">'0'</span>:<span class="string">''</span>) + H)    </span><br><span class="line">        .replace(<span class="regexp">/mm/g</span>,(m&lt;<span class="number">10</span>?<span class="string">'0'</span>:<span class="string">''</span>) + m)   </span><br><span class="line">        .replace(<span class="regexp">/ss/g</span>,(s&lt;<span class="number">10</span>?<span class="string">'0'</span>:<span class="string">''</span>) + s)&#125;</span><br><span class="line"><span class="comment">// dateFormater('YYYY-MM-DD HH:mm', t) ==&gt; 2019-06-26 18:30</span></span><br><span class="line"><span class="comment">// dateFormater('YYYYMMDDHHmm', t) ==&gt; 201906261830</span></span><br></pre></td></tr></table></figure><h2 id="29、dateStrForma：-将指定字符串由一种时间格式转化为另一种"><a href="#29、dateStrForma：-将指定字符串由一种时间格式转化为另一种" class="headerlink" title="29、dateStrForma： 将指定字符串由一种时间格式转化为另一种"></a><strong>29、dateStrForma：</strong> <strong>将指定字符串由一种时间格式转化为另一种</strong></h2><p>from的格式应对应str的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateStrForma</span>(<span class="params">str, from, to</span>)</span>&#123;    </span><br><span class="line">    <span class="comment">//'20190626' 'YYYYMMDD' 'YYYY年MM月DD日'   </span></span><br><span class="line">    str += <span class="string">''</span>   </span><br><span class="line">    <span class="keyword">let</span> Y = <span class="string">''</span> </span><br><span class="line">    <span class="keyword">if</span>(~(Y = <span class="keyword">from</span>.indexOf(<span class="string">'YYYY'</span>)))&#123;   </span><br><span class="line">        Y = str.substr(Y, <span class="number">4</span>)     </span><br><span class="line">        to = to.replace(<span class="regexp">/YYYY|yyyy/g</span>,Y)  </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(~(Y = <span class="keyword">from</span>.indexOf(<span class="string">'YY'</span>)))&#123;     </span><br><span class="line">        Y = str.substr(Y, <span class="number">2</span>)      </span><br><span class="line">        to = to.replace(<span class="regexp">/YY|yy/g</span>,Y) </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">let</span> k,i   </span><br><span class="line">    [<span class="string">'M'</span>,<span class="string">'D'</span>,<span class="string">'H'</span>,<span class="string">'h'</span>,<span class="string">'m'</span>,<span class="string">'s'</span>].forEach(<span class="function"><span class="params">s</span> =&gt;</span>&#123;   </span><br><span class="line">        i = <span class="keyword">from</span>.indexOf(s+s)  </span><br><span class="line">        k = ~i ? str.substr(i, <span class="number">2</span>) : <span class="string">''</span>    </span><br><span class="line">        to = to.replace(s+s, k)  </span><br><span class="line">    &#125;)   </span><br><span class="line">    <span class="keyword">return</span> to&#125;</span><br><span class="line"><span class="comment">// dateStrForma('20190626', 'YYYYMMDD', 'YYYY年MM月DD日') ==&gt; 2019年06月26日</span></span><br><span class="line"><span class="comment">// dateStrForma('121220190626', '----YYYYMMDD', 'YYYY年MM月DD日') ==&gt; 2019年06月26日</span></span><br><span class="line"><span class="comment">// dateStrForma('2019年06月26日', 'YYYY年MM月DD日', 'YYYYMMDD') ==&gt; 20190626</span></span><br><span class="line"><span class="comment">// 一般的也可以使用正则来实现</span></span><br><span class="line"><span class="comment">//'2019年06月26日'.replace(/(d&#123;4&#125;)年(d&#123;2&#125;)月(d&#123;2&#125;)日/, '$1-$2-$3') ==&gt; 2019-06-26</span></span><br></pre></td></tr></table></figure><h2 id="30、getPropByPath：-根据字符串路径获取对象属性-‘obj-0-count’"><a href="#30、getPropByPath：-根据字符串路径获取对象属性-‘obj-0-count’" class="headerlink" title="30、getPropByPath：**根据字符串路径获取对象属性 : ‘obj[0].count’**"></a><strong>30、getPropByPath：**</strong>根据字符串路径获取对象属性 : ‘obj[0].count’**</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPropByPath</span>(<span class="params">obj, path, strict</span>) </span>&#123;     </span><br><span class="line">    <span class="keyword">let</span> tempObj = obj;     </span><br><span class="line">    path = path.replace(<span class="regexp">/[(w+)]/g</span>, <span class="string">'.$1'</span>); </span><br><span class="line">    <span class="comment">//将[0]转化为.0    </span></span><br><span class="line">    path = path.replace(<span class="regexp">/^./</span>, <span class="string">''</span>);</span><br><span class="line">    <span class="comment">//去除开头的.    </span></span><br><span class="line">    <span class="keyword">let</span> keyArr = path.split(<span class="string">'.'</span>); </span><br><span class="line">    <span class="comment">//根据.切割      </span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;      </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> len = keyArr.length; i &lt; len - <span class="number">1</span>; ++i) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (!tempObj &amp;&amp; !strict) <span class="keyword">break</span>;   </span><br><span class="line">        <span class="keyword">let</span> key = keyArr[i]; </span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> tempObj) &#123;  </span><br><span class="line">            tempObj = tempObj[key];  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;         </span><br><span class="line">            <span class="keyword">if</span> (strict) &#123;</span><br><span class="line">                <span class="comment">//开启严格模式，没找到对应key值，抛出错误   </span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'please transfer a valid prop path to form item!'</span>);  </span><br><span class="line">            &#125;          </span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">        &#125;     </span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="keyword">return</span> &#123;   </span><br><span class="line">        o: tempObj,</span><br><span class="line">        <span class="comment">//原始数据   </span></span><br><span class="line">        k: keyArr[i], </span><br><span class="line">        <span class="comment">//key值   </span></span><br><span class="line">        v: tempObj ? tempObj[keyArr[i]] : <span class="literal">null</span> </span><br><span class="line">        <span class="comment">// key值对应的值   </span></span><br><span class="line">    &#125;;&#125;;</span><br></pre></td></tr></table></figure><h2 id="31、GetUrlParam：-获取Url参数，返回一个对象"><a href="#31、GetUrlParam：-获取Url参数，返回一个对象" class="headerlink" title="31、GetUrlParam： 获取Url参数，返回一个对象"></a><strong>31、GetUrlParam：</strong> <strong>获取Url参数，返回一个对象</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetUrlParam</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">    <span class="keyword">let</span> url = <span class="built_in">document</span>.location.toString();    </span><br><span class="line">    <span class="keyword">let</span> arrObj = url.split(<span class="string">"?"</span>);  </span><br><span class="line">    <span class="keyword">let</span> params = <span class="built_in">Object</span>.create(<span class="literal">null</span>)    </span><br><span class="line">    <span class="keyword">if</span> (arrObj.length &gt; <span class="number">1</span>)&#123;   </span><br><span class="line">        arrObj = arrObj[<span class="number">1</span>].split(<span class="string">"&amp;"</span>);  </span><br><span class="line">        arrObj.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;     </span><br><span class="line">            item = item.split(<span class="string">"="</span>);  </span><br><span class="line">            params[item[<span class="number">0</span>]] = item[<span class="number">1</span>]   </span><br><span class="line">        &#125;)    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> params;&#125;</span><br><span class="line"><span class="comment">// ?a=1&amp;b=2&amp;c=3 ==&gt; &#123;a: "1", b: "2", c: "3"&#125;</span></span><br></pre></td></tr></table></figure><h2 id="32、downloadFile：-base64数据导出文件，文件下载"><a href="#32、downloadFile：-base64数据导出文件，文件下载" class="headerlink" title="32、downloadFile： base64数据导出文件，文件下载"></a><strong>32、downloadFile：</strong> <strong>base64数据导出文件，文件下载</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadFile</span>(<span class="params">filename, data</span>)</span>&#123;   </span><br><span class="line">    <span class="keyword">let</span> DownloadLink = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);   </span><br><span class="line">    <span class="keyword">if</span> ( DownloadLink )&#123;    </span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(DownloadLink); </span><br><span class="line">        DownloadLink.style = <span class="string">'display: none'</span>;   </span><br><span class="line">        DownloadLink.download = filename;      </span><br><span class="line">        DownloadLink.href = data;      </span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">document</span>.createEvent )&#123;     </span><br><span class="line">            <span class="keyword">let</span> DownloadEvt = <span class="built_in">document</span>.createEvent(<span class="string">'MouseEvents'</span>);  </span><br><span class="line">            DownloadEvt.initEvent(<span class="string">'click'</span>, <span class="literal">true</span>, <span class="literal">false</span>);     </span><br><span class="line">            DownloadLink.dispatchEvent(DownloadEvt);     </span><br><span class="line">        &#125;       </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">document</span>.createEventObject )  </span><br><span class="line">            DownloadLink.fireEvent(<span class="string">'onclick'</span>);   </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> DownloadLink.onclick == <span class="string">'function'</span> )    </span><br><span class="line">            DownloadLink.onclick();       </span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(DownloadLink); </span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="33、toFullScreen：-全屏"><a href="#33、toFullScreen：-全屏" class="headerlink" title="33、toFullScreen： 全屏"></a><strong>33、toFullScreen：</strong> <strong>全屏</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toFullScreen</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">    <span class="keyword">let</span> elem = <span class="built_in">document</span>.body;  </span><br><span class="line">    elem.webkitRequestFullScreen   </span><br><span class="line">        ? elem.webkitRequestFullScreen()  </span><br><span class="line">    : elem.mozRequestFullScreen  </span><br><span class="line">        ? elem.mozRequestFullScreen()  </span><br><span class="line">    : elem.msRequestFullscreen  </span><br><span class="line">        ? elem.msRequestFullscreen()  </span><br><span class="line">    : elem.requestFullScreen   </span><br><span class="line">        ? elem.requestFullScreen()  </span><br><span class="line">    : alert(<span class="string">"浏览器不支持全屏"</span>);&#125;</span><br></pre></td></tr></table></figure><h2 id="34、exitFullscreen：-退出全屏"><a href="#34、exitFullscreen：-退出全屏" class="headerlink" title="34、exitFullscreen：**退出全屏**"></a><strong>34、exitFullscreen：**</strong>退出全屏**</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exitFullscreen</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">let</span> elem = parent.document;    </span><br><span class="line">    elem.webkitCancelFullScreen </span><br><span class="line">        ? elem.webkitCancelFullScreen()  </span><br><span class="line">    : elem.mozCancelFullScreen   </span><br><span class="line">        ? elem.mozCancelFullScreen()  </span><br><span class="line">    : elem.cancelFullScreen    </span><br><span class="line">        ? elem.cancelFullScreen() </span><br><span class="line">    : elem.msExitFullscreen  </span><br><span class="line">        ? elem.msExitFullscreen()  </span><br><span class="line">    : elem.exitFullscreen   </span><br><span class="line">        ? elem.exitFullscreen()   </span><br><span class="line">    : alert(<span class="string">"切换失败,可尝试Esc退出"</span>);&#125;</span><br></pre></td></tr></table></figure><h2 id="35、requestAnimationFrame：-window动画"><a href="#35、requestAnimationFrame：-window动画" class="headerlink" title="35、requestAnimationFrame： window动画"></a><strong>35、requestAnimationFrame：</strong> <strong>window动画</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.requestAnimationFrame = <span class="built_in">window</span>.requestAnimationFrame ||    </span><br><span class="line">    <span class="built_in">window</span>.webkitRequestAnimationFrame ||    </span><br><span class="line">    <span class="built_in">window</span>.mozRequestAnimationFrame ||   </span><br><span class="line">    <span class="built_in">window</span>.msRequestAnimationFrame ||   </span><br><span class="line">    <span class="built_in">window</span>.oRequestAnimationFrame ||    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;        </span><br><span class="line">    <span class="comment">//为了使setTimteout的尽可能的接近每秒60帧的效果   </span></span><br><span class="line">    <span class="built_in">window</span>.setTimeout(callback, <span class="number">1000</span> / <span class="number">60</span>); </span><br><span class="line">&#125;;    </span><br><span class="line"><span class="built_in">window</span>.cancelAnimationFrame = <span class="built_in">window</span>.cancelAnimationFrame ||  </span><br><span class="line">    Window.webkitCancelAnimationFrame ||   </span><br><span class="line">    <span class="built_in">window</span>.mozCancelAnimationFrame ||   </span><br><span class="line">    <span class="built_in">window</span>.msCancelAnimationFrame ||   </span><br><span class="line">    <span class="built_in">window</span>.oCancelAnimationFrame ||   </span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;       </span><br><span class="line">    <span class="comment">//为了使setTimteout的尽可能的接近每秒60帧的效果  </span></span><br><span class="line">    <span class="built_in">window</span>.clearTimeout(id);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="36、-isNaN：-检查数据是否是非数字值"><a href="#36、-isNaN：-检查数据是否是非数字值" class="headerlink" title="36、_isNaN： 检查数据是否是非数字值"></a><strong>36、_isNaN：</strong> <strong>检查数据是否是非数字值</strong></h2><p>原生的isNaN会把参数转换成数字(valueof)，而null、true、false以及长度小于等于1的数组(元素为非NaN数据)会被转换成数字，这不是我想要的。Symbol类型的数据不具有valueof接口，所以isNaN会抛出错误，这里放在后面，可避免错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_isNaN</span>(<span class="params">v</span>)</span>&#123;    </span><br><span class="line">    <span class="keyword">return</span> !(<span class="keyword">typeof</span> v === <span class="string">'string'</span> || <span class="keyword">typeof</span> v === <span class="string">'number'</span>) || <span class="built_in">isNaN</span>(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="37、max：-求取数组中非NaN数据中的最大值"><a href="#37、max：-求取数组中非NaN数据中的最大值" class="headerlink" title="37、max： 求取数组中非NaN数据中的最大值"></a><strong>37、max：</strong> <strong>求取数组中非NaN数据中的最大值</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params">arr</span>)</span>&#123;   </span><br><span class="line">    arr = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> !_isNaN(item))   </span><br><span class="line">    <span class="keyword">return</span> arr.length ? <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, arr) : <span class="literal">undefined</span>&#125;</span><br><span class="line"><span class="comment">//max([1, 2, '11', null, 'fdf', []]) ==&gt; 11</span></span><br></pre></td></tr></table></figure><h2 id="38、min：-求取数组中非NaN数据中的最小值"><a href="#38、min：-求取数组中非NaN数据中的最小值" class="headerlink" title="38、min：**求取数组中非NaN数据中的最小值**"></a><strong>38、min：**</strong>求取数组中非NaN数据中的最小值**</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">min</span>(<span class="params">arr</span>)</span>&#123;    </span><br><span class="line">    arr = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> !_isNaN(item))    </span><br><span class="line">    <span class="keyword">return</span> arr.length ? <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, arr) : <span class="literal">undefined</span>&#125;</span><br><span class="line"><span class="comment">//min([1, 2, '11', null, 'fdf', []]) ==&gt; 1</span></span><br></pre></td></tr></table></figure><p>## </p><h2 id="39、random：-返回一个lower-upper之间的随机数"><a href="#39、random：-返回一个lower-upper之间的随机数" class="headerlink" title="39、random： 返回一个lower - upper之间的随机数"></a><strong>39、random：</strong> <strong>返回一个lower - upper之间的随机数</strong></h2><p>lower、upper无论正负与大小，但必须是非NaN的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params">lower, upper</span>)</span>&#123; </span><br><span class="line">    lower = +lower || <span class="number">0</span>   </span><br><span class="line">    upper = +upper || <span class="number">0</span>   </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() * (upper - lower) + lower;&#125;</span><br><span class="line"><span class="comment">//random(0, 0.5) ==&gt; 0.3567039135734613//random(2, 1) ===&gt; 1.6718418553475423//random(-2, -1) ==&gt; -1.4474325452361945</span></span><br></pre></td></tr></table></figure><p>## </p><h2 id="40、Object-keys：-返回一个由一个给定对象的自身可枚举属性组成的数组"><a href="#40、Object-keys：-返回一个由一个给定对象的自身可枚举属性组成的数组" class="headerlink" title="40、Object.keys： 返回一个由一个给定对象的自身可枚举属性组成的数组"></a><strong>40、Object.keys：</strong> <strong>返回一个由一个给定对象的自身可枚举属性组成的数组</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.keys = <span class="built_in">Object</span>.keys || <span class="function"><span class="keyword">function</span> <span class="title">keys</span>(<span class="params">object</span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">if</span>(object === <span class="literal">null</span> || object === <span class="literal">undefined</span>)&#123;     </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Cannot convert undefined or null to object'</span>); </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">let</span> result = []    </span><br><span class="line">    <span class="keyword">if</span>(isArrayLike(object) || isPlainObject(object))&#123;   </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> object) &#123;      </span><br><span class="line">            object.hasOwnProperty(key) &amp;&amp; ( result.push(key) )  </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> result&#125;</span><br></pre></td></tr></table></figure><h2 id="41、Object-values：-返回一个给定对象自身的所有可枚举属性值的数组"><a href="#41、Object-values：-返回一个给定对象自身的所有可枚举属性值的数组" class="headerlink" title="41、Object.values： 返回一个给定对象自身的所有可枚举属性值的数组"></a><strong>41、Object.values：</strong> <strong>返回一个给定对象自身的所有可枚举属性值的数组</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.values = <span class="built_in">Object</span>.values || <span class="function"><span class="keyword">function</span> <span class="title">values</span>(<span class="params">object</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(object === <span class="literal">null</span> || object === <span class="literal">undefined</span>)&#123;     </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Cannot convert undefined or null to object'</span>); </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">let</span> result = []   </span><br><span class="line">    <span class="keyword">if</span>(isArrayLike(object) || isPlainObject(object))&#123;    </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> object) &#123;   </span><br><span class="line">            object.hasOwnProperty(key) &amp;&amp; ( result.push(object[key]) )  </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> result&#125;</span><br></pre></td></tr></table></figure><h2 id="42、arr-fill：-使用-value-值来填充-array，从start位置开始-到end位置结束（但不包含end位置），返回原数组"><a href="#42、arr-fill：-使用-value-值来填充-array，从start位置开始-到end位置结束（但不包含end位置），返回原数组" class="headerlink" title="42、arr.fill： 使用 value 值来填充 array，从start位置开始, 到end位置结束（但不包含end位置），返回原数组"></a><strong>42、arr.fill：</strong> <strong>使用 value 值来填充 array，从start位置开始, 到end位置结束（但不包含end位置），返回原数组</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.fill = <span class="built_in">Array</span>.prototype.fill || <span class="function"><span class="keyword">function</span> <span class="title">fill</span>(<span class="params">value, start, end</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">let</span> ctx = <span class="keyword">this</span>   </span><br><span class="line">    <span class="keyword">let</span> length = ctx.length;  </span><br><span class="line">    start = <span class="built_in">parseInt</span>(start)   </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isNaN</span>(start))&#123;  </span><br><span class="line">        start = <span class="number">0</span> </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (start &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        start = -start &gt; length ? <span class="number">0</span> : (length + start);  </span><br><span class="line">    &#125;           </span><br><span class="line">    end = <span class="built_in">parseInt</span>(end) </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isNaN</span>(end) || end &gt; length)&#123;    </span><br><span class="line">        end = length     </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (end &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">        end += length;   </span><br><span class="line">    &#125;      </span><br><span class="line">    <span class="keyword">while</span> (start &lt; end) &#123;    </span><br><span class="line">        ctx[start++] = value; </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> ctx;&#125;</span><br><span class="line"><span class="comment">//Array(3).fill(2) ===&gt; [2, 2, 2]</span></span><br></pre></td></tr></table></figure><h2 id="43、arr-includes：-用来判断一个数组是否包含一个指定的值，如果是返回-true，否则false，可指定开始查询的位置"><a href="#43、arr-includes：-用来判断一个数组是否包含一个指定的值，如果是返回-true，否则false，可指定开始查询的位置" class="headerlink" title="43、arr.includes： 用来判断一个数组是否包含一个指定的值，如果是返回 true，否则false，可指定开始查询的位置"></a><strong>43、arr.includes：</strong> <strong>用来判断一个数组是否包含一个指定的值，如果是返回 true，否则false，可指定开始查询的位置</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.includes = <span class="built_in">Array</span>.prototype.includes || <span class="function"><span class="keyword">function</span> <span class="title">includes</span>(<span class="params">value, start</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">let</span> ctx = <span class="keyword">this</span>   </span><br><span class="line">    <span class="keyword">let</span> length = ctx.length;</span><br><span class="line">    start = <span class="built_in">parseInt</span>(start)   </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isNaN</span>(start))&#123;      </span><br><span class="line">        start = <span class="number">0</span>   </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (start &lt; <span class="number">0</span>) &#123; </span><br><span class="line">        start = -start &gt; length ? <span class="number">0</span> : (length + start);  </span><br><span class="line">    &#125;       </span><br><span class="line">    <span class="keyword">let</span> index = ctx.indexOf(value)    </span><br><span class="line">    <span class="keyword">return</span> index &gt;= start;&#125;</span><br></pre></td></tr></table></figure><h2 id="44、arr-find：-返回数组中通过测试（函数fn内判断）的第一个元素的值"><a href="#44、arr-find：-返回数组中通过测试（函数fn内判断）的第一个元素的值" class="headerlink" title="44、arr.find： 返回数组中通过测试（函数fn内判断）的第一个元素的值"></a><strong>44、arr.find：</strong> <strong>返回数组中通过测试（函数fn内判断）的第一个元素的值</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.find = <span class="built_in">Array</span>.prototype.find || <span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">fn, ctx</span>)</span>&#123;    </span><br><span class="line">    ctx = ctx || <span class="keyword">this</span>     </span><br><span class="line">    <span class="keyword">let</span> result;    </span><br><span class="line">    ctx.some(<span class="function">(<span class="params">value, index, arr</span>), <span class="params">thisValue</span>) =&gt;</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> fn(value, index, arr) ? (result = value, <span class="literal">true</span>) : <span class="literal">false</span> </span><br><span class="line">    &#125;)      </span><br><span class="line">    <span class="keyword">return</span> result&#125;</span><br></pre></td></tr></table></figure><h2 id="45、arr-findIndex-：-返回数组中通过测试（函数fn内判断）的第一个元素的下标"><a href="#45、arr-findIndex-：-返回数组中通过测试（函数fn内判断）的第一个元素的下标" class="headerlink" title="45、arr.findIndex ： 返回数组中通过测试（函数fn内判断）的第一个元素的下标"></a><strong>45、arr.findIndex ：</strong> <strong>返回数组中通过测试（函数fn内判断）的第一个元素的下标</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.findIndex = <span class="built_in">Array</span>.prototype.findIndex || <span class="function"><span class="keyword">function</span> <span class="title">findIndex</span>(<span class="params">fn, ctx</span>)</span>&#123;    </span><br><span class="line">    ctx = ctx || <span class="keyword">this</span>       </span><br><span class="line">    <span class="keyword">let</span> result;   </span><br><span class="line">    ctx.some(<span class="function">(<span class="params">value, index, arr</span>), <span class="params">thisValue</span>) =&gt;</span> &#123;   </span><br><span class="line">        <span class="keyword">return</span> fn(value, index, arr) ? (result = index, <span class="literal">true</span>) : <span class="literal">false</span>   </span><br><span class="line">    &#125;)        </span><br><span class="line">    <span class="keyword">return</span> result&#125;</span><br></pre></td></tr></table></figure><h2 id="46、performance-timing：-利用performance-timing进行性能分析"><a href="#46、performance-timing：-利用performance-timing进行性能分析" class="headerlink" title="46、performance.timing： 利用performance.timing进行性能分析"></a><strong>46、performance.timing：</strong> <strong>利用performance.timing进行性能分析</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;       </span><br><span class="line">        <span class="keyword">let</span> t = performance.timing    </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'DNS查询耗时 ：'</span> + (t.domainLookupEnd - t.domainLookupStart).toFixed(<span class="number">0</span>))        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'TCP链接耗时 ：'</span> + (t.connectEnd - t.connectStart).toFixed(<span class="number">0</span>))        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'request请求耗时 ：'</span> + (t.responseEnd - t.responseStart).toFixed(<span class="number">0</span>))        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'解析dom树耗时 ：'</span> + (t.domComplete - t.domInteractive).toFixed(<span class="number">0</span>))        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'白屏时间 ：'</span> + (t.responseStart - t.navigationStart).toFixed(<span class="number">0</span>))       </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'domready时间 ：'</span> + (t.domContentLoadedEventEnd - t.navigationStart).toFixed(<span class="number">0</span>))   </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'onload时间 ：'</span> + (t.loadEventEnd - t.navigationStart).toFixed(<span class="number">0</span>))    </span><br><span class="line">        <span class="keyword">if</span>(t = performance.memory)&#123;    </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'js内存使用占比 ：'</span> + (t.usedJSHeapSize / t.totalJSHeapSize * <span class="number">100</span>).toFixed(<span class="number">2</span>) + <span class="string">'%'</span>)       </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;)&#125;</span><br></pre></td></tr></table></figure><h2 id="47、禁止某些键盘事件"><a href="#47、禁止某些键盘事件" class="headerlink" title="47、禁止某些键盘事件"></a><strong>47、禁止某些键盘事件</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'keydown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;   </span><br><span class="line">    <span class="keyword">return</span> !(       </span><br><span class="line">        <span class="number">112</span> == event.keyCode || </span><br><span class="line">        <span class="comment">//F1        </span></span><br><span class="line">        <span class="number">123</span> == event.keyCode || </span><br><span class="line">        <span class="comment">//F12   </span></span><br><span class="line">        event.ctrlKey &amp;&amp; <span class="number">82</span> == event.keyCode || </span><br><span class="line">        <span class="comment">//ctrl + R  </span></span><br><span class="line">        event.ctrlKey &amp;&amp; <span class="number">78</span> == event.keyCode || </span><br><span class="line">        <span class="comment">//ctrl + N      </span></span><br><span class="line">        event.shiftKey &amp;&amp; <span class="number">121</span> == event.keyCode ||</span><br><span class="line">        <span class="comment">//shift + F10      </span></span><br><span class="line">        event.altKey &amp;&amp; <span class="number">115</span> == event.keyCode || </span><br><span class="line">        <span class="comment">//alt + F4       </span></span><br><span class="line">        <span class="string">"A"</span> == event.srcElement.tagName &amp;&amp; event.shiftKey </span><br><span class="line">        <span class="comment">//shift + 点击a标签   </span></span><br><span class="line">    ) || (event.returnValue = <span class="literal">false</span>)&#125;);</span><br></pre></td></tr></table></figure><h2 id="48、禁止右键、选择、复制"><a href="#48、禁止右键、选择、复制" class="headerlink" title="48、禁止右键、选择、复制"></a><strong>48、禁止右键、选择、复制</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'contextmenu'</span>, <span class="string">'selectstart'</span>, <span class="string">'copy'</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;   </span><br><span class="line">    <span class="built_in">document</span>.addEventListener(ev, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> event.returnValue = <span class="literal">false</span> </span><br><span class="line">    &#125;)&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端性能优化</title>
      <link href="/passages/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/"/>
      <url>/passages/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="从输入URL加载起看方向"><a href="#从输入URL加载起看方向" class="headerlink" title="从输入URL加载起看方向"></a><strong>从输入URL加载起看方向</strong></h3><p>从输入 URL 到页面加载完成的过程：</p><ul><li>首先做 DNS 查询，如果这一步做了智能 DNS 解析的话，会提供访问速度最快的 IP 地址回来</li><li>接下来是 TCP 握手，应用层会下发数据给传输层，这里 TCP 协议会指明两端的端口号，然后下发给网络层。网络层中的 IP 协议会确定 IP 地址，并且指示了数据传输中如何跳转路由器。然后包会再被封装到数据链路层的数据帧结构中，最后就是物理层面的传输了</li><li>TCP 握手结束后会进行 TLS 握手，然后就开始正式的传输数据</li><li>数据在进入服务端之前，可能还会先经过负责负载均衡的服务器，它的作用就是将请求合理的分发到多台服务器上，这时假设服务端会响应一个 HTML 文件</li><li>首先浏览器会判断状态码是什么，如果是 200 那就继续解析，如果 400 或 500 的话就会报错，如果 300 的话会进行重定向，这里会有个重定向计数器，避免过多次的重定向，超过次数也会报错</li><li>浏览器开始解析文件，如果是 gzip 格式的话会先解压一下，然后通过文件的编码格式知道该如何去解码文件</li><li>文件解码成功后会正式开始渲染流程，先会根据 HTML 构建 DOM 树，有 CSS 的话会去构建 CSSOM 树。如果遇到 script 标签的话，会判断是否存在 async 或者 defer ，前者会并行进行下载并执行 JS，后者会先下载文件，然后等待 HTML 解析完成后顺序执行，如果以上都没有，就会阻塞住渲染流程直到 JS 执行完毕。遇到文件下载的会去下载文件，这里如果使用 HTTP 2.0 协议的话会极大的提高多图的下载效率。</li><li>初始的 HTML 被完全加载和解析后会触发 DOMContentLoaded 事件</li><li>CSSOM 树和 DOM 树构建完成后会开始生成 Render 树，这一步就是确定页面元素的布局、样式等等诸多方面的东西</li><li>在生成 Render 树的过程中，浏览器就开始调用 GPU 绘制，合成图层，将内容显示在屏幕上了</li></ul><p>我们从输入 URL 到显示页面这个过程中，涉及到网络层面的，有三个主要过程：</p><ul><li>DNS 解析</li><li>TCP 连接</li><li>HTTP 请求/响应</li></ul><p>对于 DNS 解析和 TCP 连接两个步骤，我们前端可以做的努力非常有限。相比之下，HTTP 连接这一层面的优化才是我们网络优化的核心。</p><p>HTTP 优化有两个大的方向：</p><ul><li>减少请求次数</li><li>减少单次请求所花费的时间</li></ul><p><strong>浏览器缓存策略</strong></p><p>浏览器缓存机制有四个方面，它们按照获取资源时请求的优先级依次排列如下：</p><ul><li>Memory Cache</li><li>Service Worker Cache</li><li>HTTP Cache</li><li>Push Cache</li></ul><p><strong>MemoryCache</strong></p><p>MemoryCache，是指存在内存中的缓存。从优先级上来说，它是浏览器最先尝试去命中的一种缓存。从效率上来说，它是响应速度最快的一种缓存。浏览器秉承的是“节约原则”，我们发现，Base64 格式的图片，几乎永远可以被塞进 memory cache，这可以视作浏览器为节省渲染开销的“自保行为”；此外，体积不大的 JS、CSS 文件，也有较大地被写入内存的几率——相比之下，较大的 JS、CSS 文件就没有这个待遇了，内存资源是有限的，它们往往被直接甩进磁盘。</p><p><strong>Service Worker Cache</strong></p><p>Service Worker 是一种独立于主线程之外的 Javascript 线程。它脱离于浏览器窗体，因此无法直接访问 DOM。这样独立的个性使得 Service Worker 的“个人行为”无法干扰页面的性能，这个“幕后工作者”可以帮我们实现离线缓存、消息推送和网络代理等功能。我们借助 Service worker 实现的离线缓存就称为 Service Worker Cache。</p><p><strong>HTTP Cache</strong></p><p>它又分为强缓存和协商缓存。优先级较高的是强缓存，在命中强缓存失败的情况下，才会走协商缓存。</p><p>对一条http get 报文的基本缓存处理过程包括7个步骤：</p><ul><li>接收</li><li>解析</li><li>查询，缓存查看是否有本地副本可用，如果没有，就获取一份副本</li><li>新鲜度检测， 缓存查看已缓存副本是否足够新鲜，如果不是，就询问服务器是否有任何更新。</li><li>创建响应，缓存会用新的首部和已缓存的主体来构建一条响应报文。</li><li>发送，缓存通过网络将响应发回给客服端。</li><li>日志</li></ul><p><strong>强缓存</strong></p><p>强缓存是利用 http 头中的 Expires 和 Cache-Control 两个字段来控制的。强缓存中，当请求再次发出时，浏览器会根据其中的 expires 和 cache-control 判断目标资源是否“命中”强缓存，若命中则直接从缓存中获取资源，不会再与服务端发生通信。</p><p>是否足够新鲜时期：</p><p>通过 Expires: XXXX XXX XXX GMT （绝对日期时间，http/1.0） 或者 Cache-Control:max-age=XXXX （相对日期时间，http/1.1）在文档标明过期日期。</p><p>Cache-Control 相对于 expires 更加准确，它的优先级也更高。当 Cache-Control 与 expires 同时出现时，我们以 Cache-Control 为准。</p><p><strong>关键字理解</strong></p><p>public 与 private 是针对资源是否能够被代理服务缓存而存在的一组对立概念。如果我们为资源设置了 public，那么它既可以被浏览器缓存，也可以被代理服务器缓存；如果我们设置了 private，则该资源只能被浏览器缓存。private 为默认值。</p><p>no-store与no-cache，no-cache 绕开了浏览器：我们为资源设置了 no-cache 后，每一次发起请求都不会再去询问浏览器的缓存情况，而是直接向服务端去确认该资源是否过期（即走我们下文即将讲解的协商缓存的路线）。no-store 比较绝情，顾名思义就是不使用任何缓存策略。在 no-cache 的基础上，它连服务端的缓存确认也绕开了，只允许你直接向服务端发送请求、并下载完整的响应。</p><p><strong>协商缓存</strong></p><p>协商缓存依赖于服务端与浏览器之间的通信。协商缓存机制下，浏览器需要向服务器去询问缓存的相关信息，进而判断是重新发起请求、下载完整的响应，还是从本地获取缓存的资源。如果服务端提示缓存资源未改动（Not Modified），资源会被重定向到浏览器缓存，这种情况下网络请求对应的状态码是 304。</p><p>协商缓存的实现：从 Last-Modified 到 Etag，详细自己百度，这里不再详细展开。</p><p><strong>HTTP 缓存决策</strong></p><p>当我们的资源内容不可复用时，直接为 Cache-Control 设置 no-store，拒绝一切形式的缓存；否则考虑是否每次都需要向服务器进行缓存有效确认，如果需要，那么设 Cache-Control 的值为 no-cache；否则考虑该资源是否可以被代理服务器缓存，根据其结果决定是设置为 private 还是 public；然后考虑该资源的过期时间，设置对应的 max-age 和 s-maxage 值；最后，配置协商缓存需要用到的 Etag、Last-Modified 等参数。</p><p><strong>Push Cachae</strong></p><p>Push Cache 是指 HTTP2 在 server push 阶段存在的缓存。</p><ul><li>Push Cache 是缓存的最后一道防线。浏览器只有在 Memory Cache、HTTP Cache 和 Service Worker Cache 均未命中的情况下才会去询问 Push Cache。</li><li>Push Cache 是一种存在于会话阶段的缓存，当 session 终止时，缓存也随之释放。</li><li>不同的页面只要共享了同一个 HTTP2 连接，那么它们就可以共享同一个 Push Cache。</li></ul><p><strong>CDN</strong></p><p>CDN 的核心点有两个，一个是缓存，一个是回源。</p><p>“缓存”就是说我们把资源 copy 一份到 CDN 服务器上这个过程，“回源”就是说 CDN 发现自己没有这个资源（一般是缓存的数据过期了），转头向根服务器（或者它的上层服务器）去要这个资源的过程。</p><p>CDN 往往被用来存放静态资源。所谓“静态资源”，就是像 JS、CSS、图片等不需要业务服务器进行计算即得的资源。而“动态资源”，顾名思义是需要后端实时动态生成的资源，较为常见的就是 JSP、ASP 或者依赖服务端渲染得到的 HTML 页面。</p><p>那“非纯静态资源”呢？它是指需要服务器在页面之外作额外计算的 HTML 页面。具体来说，当我打开某一网站之前，该网站需要通过权限认证等一系列手段确认我的身份、进而决定是否要把 HTML 页面呈现给我。这种情况下 HTML 确实是静态的，但它和业务服务器的操作耦合，我们把它丢到CDN 上显然是不合适的。</p><p>另外，CDN的域名必须和主业务服务器的域名不一样，要不，同一个域名下面的Cookie各处跑，浪费了性能流量的开销，CDN域名放在不同的域名下，可以完美地避免了不必要的 Cookie 的出现！</p><h3 id="图片优化"><a href="#图片优化" class="headerlink" title="图片优化"></a>图片优化</h3><p><strong>二进制位数与色彩的关系</strong></p><p>在计算机中，像素用二进制数来表示。不同的图片格式中像素与二进制位数之间的对应关系是不同的。一个像素对应的二进制位数越多，它可以表示的颜色种类就越多，成像效果也就越细腻，文件体积相应也会越大。</p><p>一个二进制位表示两种颜色（0|1 对应黑|白），如果一种图片格式对应的二进制位数有 n 个，那么它就可以呈现 2^n 种颜色。</p><p><strong>计算图片大小</strong></p><p>对于一张 100 100 像素的图片来说，图像上有 10000 个像素点，如果每个像素的值是 RGBA 存储的话，那么也就是说每个像素有 4 个通道，每个通道 1 个字节（8 位 = 1个字节），所以该图片大小大概为 39KB（10000 1 * 4 / 1024）。</p><p>但是在实际项目中，一张图片可能并不需要使用那么多颜色去显示，我们可以通过减少每个像素的调色板来相应缩小图片的大小。<br>了解了如何计算图片大小的知识，那么对于如何优化图片，想必大家已经有 2 个思路了：</p><ul><li>减少像素点</li><li>减少每个像素点能够显示的颜色</li></ul><p><strong>图片类型要点</strong></p><p><strong>JPEG/JPG</strong> 特点：有损压缩、体积小、加载快、不支持透明,JPG 最大的特点是有损压缩。这种高效的压缩算法使它成为了一种非常轻巧的图片格式。另一方面，即使被称为“有损”压缩，JPG的压缩方式仍然是一种高质量的压缩方式：当我们把图片体积压缩至原有体积的 50% 以下时，JPG 仍然可以保持住 60% 的品质。但当它处理矢量图形和 Logo 等线条感较强、颜色对比强烈的图像时，人为压缩导致的图片模糊会相当明显。</p><p><strong>PNG</strong> 特点：无损压缩、质量高、体积大、支持透明，PNG（可移植网络图形格式）是一种无损压缩的高保真的图片格式。8 和 24，这里都是二进制数的位数。按照我们前置知识里提到的对应关系，8 位的 PNG 最多支持 256 种颜色，而 24 位的可以呈现约 1600 万种颜色。PNG 图片具有比 JPG 更强的色彩表现力，对线条的处理更加细腻，对透明度有良好的支持。它弥补了上文我们提到的 JPG 的局限性，唯一的 BUG 就是体积太大。</p><p><strong>SVG</strong> 特点：文本文件、体积小、不失真、兼容性好，SVG（可缩放矢量图形）是一种基于 XML 语法的图像格式。它和本文提及的其它图片种类有着本质的不同：SVG 对图像的处理不是基于像素点，而是是基于对图像的形状描述。</p><p><strong>Base64</strong> 特点：文本文件、依赖编码、小图标解决方案，Base64 并非一种图片格式，而是一种编码方式。Base64 和雪碧图一样，是作为小图标解决方案而存在的。</p><p><strong>WebP</strong> 特点：年轻的全能型选手，WebP 像 JPEG 一样对细节丰富的图片信手拈来，像 PNG 一样支持透明，像 GIF 一样可以显示动态图片——它集多种图片文件格式的优点于一身。但是毕竟年轻，兼容性存在一些问题。</p><h3 id="渲染优化"><a href="#渲染优化" class="headerlink" title="渲染优化"></a>渲染优化</h3><p><strong>客户端渲染</strong></p><p>在客户端渲染模式下，服务端会把渲染需要的静态文件发送给客户端，客户端加载过来之后，自己在浏览器里跑一遍 JS，根据 JS 的运行结果，生成相应的 DOM。页面上呈现的内容，你在 html 源文件里里找不到——这正是它的特点。</p><p><strong>服务端渲染</strong></p><p>在服务端渲染的模式下，当用户第一次请求页面时，由服务器把需要的组件或页面渲染成HTML字符串，然后把它返回给客户端。页面上呈现的内容，我们在 html 源文件里也能找到。服务端渲染解决了一个非常关键的性能问题——首屏加载速度过慢，也解决了SEO搜索引擎的问题。</p><p><strong>浏览器渲染过程解析</strong></p><p>浏览器的渲染机制一般分为以下几个步骤：</p><ul><li>处理 HTML 并构建 DOM 树。</li><li>处理 CSS 构建 CSSOM 树</li><li>将 DOM 与 CSSOM 合并成一个渲染树。</li><li>根据渲染树来布局，计算每个节点的位置。</li><li>调用 GPU 绘制，合成图层，显示在屏幕上。</li></ul><p>在渲染DOM的时候，浏览器所做的工作实际上是：</p><ul><li>获取DOM后分割为多个图层</li><li>对每个图层的节点计算样式结果（Recalculate style–样式重计算）</li><li>为每个节点生成图形和位置（Layout–回流和重布局）</li><li>将每个节点绘制填充到图层位图中（Paint Setup和Paint–重绘）</li><li>图层作为纹理上传至GPU</li><li>复合多个图层到页面上生成最终屏幕图像（Composite Layers–图层重组）</li></ul><p><strong>基于渲染流程的CSS优化建议</strong></p><p>CSS 选择符是从右到左进行匹配的，比如 #myList li {}实际开销相当高。</p><ul><li>避免使用通配符，只对需要用到的元素进行选择。</li><li>关注可以通过继承实现的属性，避免重复匹配重复定义。</li><li>少用标签选择器。如果可以，用类选择器替代。错误：#dataList li{} 正确：.dataList{}</li><li>不要画蛇添足，id 和 class 选择器不应该被多余的标签选择器拖后腿。错误：.dataList#title 正确：#title</li><li>减少嵌套。后代选择器的开销是最高的，因此我们应该尽量将选择器的深度降到最低（最高不要超过三层），尽可能使用类来关联每一个标签元素。</li></ul><p><strong>CSS的阻塞</strong></p><p>CSS 是阻塞的资源。浏览器在构建 CSSOM 的过程中，不会渲染任何已处理的内容。即便 DOM 已经解析完毕了，只要 CSSOM 不 OK，那么渲染这个事情就不 OK。我们将 CSS 放在 head 标签里 和尽快 启用 CDN 实现静态资源加载速度的优化。</p><p><strong>JS的阻塞</strong></p><p>JS 引擎是独立于渲染引擎存在的。我们的 JS 代码在文档的何处插入，就在何处执行。当 HTML 解析器遇到一个 script 标签时，它会暂停渲染过程，将控制权交给 JS 引擎。JS 引擎对内联的 JS 代码会直接执行，对外部 JS 文件还要先获取到脚本、再进行执行。等 JS 引擎运行完毕，浏览器又会把控制权还给渲染引擎，继续 CSSOM 和 DOM 的构建。</p><h3 id="DOM渲染优化"><a href="#DOM渲染优化" class="headerlink" title="DOM渲染优化"></a><strong>DOM渲染优化</strong></h3><p><strong>先了解回流和重绘</strong></p><ul><li>回流：当我们对 DOM 的修改引发了 DOM 几何尺寸的变化（比如修改元素的宽、高或隐藏元素等）时，浏览器需要重新计算元素的几何属性（其他元素的几何属性和位置也会因此受到影响），然后再将计算的结果绘制出来。这个过程就是回流（也叫重排）。</li><li>重绘：当我们对 DOM 的修改导致了样式的变化、却并未影响其几何属性（比如修改了颜色或背景色）时，浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式（跳过了上图所示的回流环节）。这个过程叫做重绘。</li></ul><p>重绘不一定导致回流，回流一定会导致重绘。回流比重绘做的事情更多，带来的开销也更大。在开发中，要从代码层面出发，尽可能把回流和重绘的次数最小化。</p><p><strong>例子剖析</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM操作测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> count=<span class="number">0</span>;count&lt;<span class="number">10000</span>;count++)&#123;   </span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>).innerHTML+=<span class="string">'&lt;span&gt;我是一个小测试&lt;/span&gt;'</span>  </span><br><span class="line">    <span class="comment">//我们每一次循环都调用 DOM 接口重新获取了一次 container 元素，额外开销</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进化一：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只获取一次containerlet </span></span><br><span class="line">container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> count=<span class="number">0</span>;count&lt;<span class="number">10000</span>;count++)&#123;   </span><br><span class="line">    container.innerHTML += <span class="string">'&lt;span&gt;我是一个小测试&lt;/span&gt;'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进化二：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//减少不必要的DOM更改</span></span><br><span class="line"><span class="keyword">let</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>)</span><br><span class="line"><span class="keyword">let</span> content = <span class="string">''</span><span class="keyword">for</span>(<span class="keyword">let</span> count=<span class="number">0</span>;count&lt;<span class="number">10000</span>;count++)&#123;   </span><br><span class="line">    <span class="comment">// 先对内容进行操作  </span></span><br><span class="line">    content += <span class="string">'&lt;span&gt;我是一个小测试&lt;/span&gt;'</span></span><br><span class="line">&#125; </span><br><span class="line">    <span class="comment">// 内容处理好了,最后再触发DOM的更改container.innerHTML = content</span></span><br></pre></td></tr></table></figure><p>事实上，考虑JS 的运行速度，比 DOM 快得多这个特性。我们减少 DOM 操作的核心思路，就是让 JS 去给 DOM 分压。</p><p>在 DOM Fragment 中，DocumentFragment 接口表示一个没有父级文件的最小文档对象。它被当做一个轻量版的 Document 使用，用于存储已排好版的或尚未打理好格式的XML片段。因为 DocumentFragment 不是真实 DOM 树的一部分，它的变化不会引起 DOM 树的重新渲染的操作（reflow），且不会导致性能等问题。</p><p>进化三：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>)</span><br><span class="line"><span class="comment">// 创建一个DOM Fragment对象作为容器</span></span><br><span class="line"><span class="keyword">let</span> content = <span class="built_in">document</span>.createDocumentFragment()</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> count=<span class="number">0</span>;count&lt;<span class="number">10000</span>;count++)&#123;  </span><br><span class="line">    <span class="comment">// span此时可以通过DOM API去创建  </span></span><br><span class="line">    <span class="keyword">let</span> oSpan = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>)  </span><br><span class="line">    oSpan.innerHTML = <span class="string">'我是一个小测试'</span>  </span><br><span class="line">    <span class="comment">// 像操作真实DOM一样操作DOM Fragment对象  </span></span><br><span class="line">    content.appendChild(oSpan)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 内容处理好了,最后再触发真实DOM的更改container.appendChild(content)</span></span><br></pre></td></tr></table></figure><p>进化四：</p><p>当涉及到过万调数据进行渲染，而且要求不卡住画面，如何解决？<br>如何在不卡住页面的情况下渲染数据，也就是说不能一次性将几万条都渲染出来，而应该一次渲染部分 DOM，那么就可以通过 requestAnimationFrame 来每 16 ms 刷新一次。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span>      </span><br><span class="line">            控件   </span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">      </span></span><br><span class="line"><span class="javascript">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;        </span></span><br><span class="line"><span class="javascript">                <span class="comment">// 插入十万条数据        </span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> total = <span class="number">100000</span>        </span></span><br><span class="line"><span class="javascript">                <span class="comment">// 一次插入 20 条，如果觉得性能不好就减少        </span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> once = <span class="number">20</span>        </span></span><br><span class="line"><span class="javascript">                <span class="comment">// 渲染数据总共需要几次        </span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> loopCount = total / once        </span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> countOfRender = <span class="number">0</span>        </span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>)        </span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;          </span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 优化性能，插入不会造成回流          </span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> fragment = <span class="built_in">document</span>.createDocumentFragment()          </span></span><br><span class="line"><span class="javascript">                    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; once; i++) &#123;            </span></span><br><span class="line"><span class="javascript">                        <span class="keyword">const</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)            </span></span><br><span class="line"><span class="javascript">                        li.innerText = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * total)            </span></span><br><span class="line"><span class="undefined">                        fragment.appendChild(li)</span></span><br><span class="line"><span class="undefined">                    &#125;          </span></span><br><span class="line"><span class="undefined">                    ul.appendChild(fragment)          </span></span><br><span class="line"><span class="undefined">                    countOfRender += 1          </span></span><br><span class="line"><span class="undefined">                    loop()        </span></span><br><span class="line"><span class="undefined">                &#125;        </span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params"></span>) </span>&#123;          </span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (countOfRender &lt; loopCount) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">window</span>.requestAnimationFrame(add)</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;        </span></span><br><span class="line"><span class="undefined">                loop()</span></span><br><span class="line"><span class="undefined">            &#125;, 0)   </span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>window.requestAnimationFrame() 方法告诉浏览器您希望执行动画并请求浏览器在下一次重绘之前调用指定的函数来更新动画。该方法使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。</p><p>注意：若您想要在下次重绘时产生另一个动画画面，您的回调例程必须调用 </p><p>requestAnimationFrame()。</p><p><strong>Event Loop</strong></p><p>我们先了解javascript运行机制，对渲染是大有帮助的。</p><p>事件循环中的异步队列有两种：macro（宏任务）队列和 micro（微任务）队列。</p><p>常见的 macro-task 比如：setTimeout、setInterval、 setImmediate、script（整体代码）、 I/O 操作、UI 渲染等。<br>常见的 micro-task 比如: process.nextTick、Promise、MutationObserver 等。</p><p>例子分析：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// task是一个用于修改DOM的回调</span></span><br><span class="line">setTimeout(task, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>上面代码，现在 task 被推入的 macro 队列。但因为 script 脚本本身是一个 macro 任务，所以本次执行完 script 脚本之后，下一个步骤就要去处理 micro 队列了，再往下就去执行了一次 render,必须等待下一次的loop。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve().then(task)</span><br></pre></td></tr></table></figure><p>上面代码，我们结束了对 script 脚本的执行，是不是紧接着就去处理 micro-task 队列了？micro-task 处理完，DOM 修改好了，紧接着就可以走 render 流程了——不需要再消耗多余的一次渲染，不需要再等待一轮事件循环，直接为用户呈现最即时的更新结果。</p><p>上面说了重绘与回流，Event loop，但很多人不知道的是，重绘和回流其实和 Event loop 有关。</p><ul><li>当 Event loop 执行完 Microtasks 后，会判断 document 是否需要更新。因为浏览器是 60Hz 的刷新率，每 16ms 才会更新一次。</li><li>然后判断是否有 resize 或者 scroll ，有的话会去触发事件，所以 resize 和 scroll 事件也是至少 16ms 才会触发一次，并且自带节流功能。</li><li>判断是否触发了 media query</li><li>更新动画并且发送事件</li><li>判断是否有全屏操作事件</li><li>执行 requestAnimationFrame 回调</li><li>执行 IntersectionObserver 回调，该方法用于判断元素是否可见，可以用于懒加载上，但是兼容性不好</li><li>更新界面</li><li>以上就是一帧中可能会做的事情。如果在一帧中有空闲时间，就会去执行 requestIdleCallback 回调。</li></ul><p><strong>节流与防抖</strong></p><p>当用户进行滚动，触发scroll事件，用户的每一次滚动都将触发我们的监听函数。函数执行是吃性能的，频繁地响应某个事件将造成大量不必要的页面计算。因此，我们需要针对那些有可能被频繁触发的事件作进一步地优化。节流与防抖就很有必要了！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React-hanger</title>
      <link href="/passages/React-hanger/"/>
      <url>/passages/React-hanger/</url>
      
        <content type="html"><![CDATA[<h3 id="一-Hooks"><a href="#一-Hooks" class="headerlink" title="一 Hooks"></a>一 Hooks</h3><p>在Hooks之前，开发react组件主要是class组件和function组件。function组件没有state，所以也叫SFC（stateless functional component），简单的将props映射成view；class组件有state，能够处理更加复杂的逻辑。但是基于class的组建并不是完美的，总结起来就像Dan说的那样，有三个主要的问题：</p><ol><li>代码重用：在hooks出来之前，常见的代码重用方式是HOCs和render props，这两种方式带来的问题是：你需要解构自己的组件，非常的笨重，同时会带来很深的组件嵌套</li><li>复杂的组件逻辑：在class组件中，有许多的lifecycle 函数，你需要在各个函数的里面去做对应的事情。这种方式带来的痛点是：逻辑分散在各处，开发者去维护这些代码会分散自己的精力，理解代码逻辑也很吃力</li><li>class组件的困惑：对于初学者来说，需要理解class组件里面的this是比较吃力的(这个理由有点勉强~)，同时，基于class的组件难以优化(举个不恰当的例子，看一下babel转移出来的class代码量增长了多少)</li></ol><p>为了解决上面的这三个问题，react hooks提案登场了，它有以下几个特点：</p><ol><li>无痛接入，不破坏现有的项目结构</li><li>完全向后兼容，不包含任何不兼容breaking changes</li><li>现在就能使用</li></ol><p>Hooks 允许你在不编写 class 的情况下使用状态(state)和其他 React 特性。 你还可以构建自己的 Hooks, 跨组件共享可重用的有状态逻辑。</p><p>现在React中内置的Hooks有：</p><ul><li><p>Basic Hooks</p></li><li><ul><li>useState</li><li>useEffect</li><li>useContext</li></ul></li><li><p>Additional Hooks</p></li><li><ul><li>useReducer</li><li>useCallback</li><li>useMemo</li><li>useRef</li><li>useImperativeHandle</li><li>useLayoutEffect</li><li>useDebugValue</li></ul></li></ul><h3 id="二-React-hanger"><a href="#二-React-hanger" class="headerlink" title="二 React-hanger"></a>二 React-hanger</h3><p>react-hanger的Usage里提供了6个API，从名字里就可以看出这些Hook都是做什么的(Hooks都以”use”开头，这是一种约定)，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import </span><br><span class="line">&#123;</span><br><span class="line">  useInput,</span><br><span class="line">  useBoolean,</span><br><span class="line">  useNumber,</span><br><span class="line">  useArray,</span><br><span class="line">  useOnMount,</span><br><span class="line">  useOnUnmount</span><br><span class="line">&#125; from &quot;react-hanger&quot;;</span><br></pre></td></tr></table></figure><p>使用起来也很简单，比如 <code>useNumber</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const App = () =&gt; &#123;  </span><br><span class="line">    const showCounter = useBoolean(true);  </span><br><span class="line">    const counter = useNumber(0);  </span><br><span class="line">    return (    </span><br><span class="line">        &lt;div&gt;      </span><br><span class="line">            &lt;button onClick=&#123;counter.increase&#125;&gt; increase &lt;/button&gt;      </span><br><span class="line">            &#123;showCounter.value &amp;&amp; &lt;span&gt; &#123;counter.value&#125; &lt;/span&gt;&#125;      </span><br><span class="line">            &lt;button onClick=&#123;counter.decrease&#125;&gt; decrease &lt;/button&gt;    </span><br><span class="line">        &lt;/div&gt;  </span><br><span class="line">           )&#125;;</span><br></pre></td></tr></table></figure><p>初步印象：大致与原始的basic hooks有点不同的是，useState返回一个数组，分别是 <code>值</code>与 <code>操作</code>，而react-hanger提供的API貌似是将 <code>值</code>和 <code>一些操作</code>封装到一个对象中，比如 <code>counter</code>就是一个 <code>{value:count,increase:setCount(count+1),decrease:setCount(count-1)}</code>的对象。</p><h3 id="三-源码部分"><a href="#三-源码部分" class="headerlink" title="三 源码部分"></a>三 源码部分</h3><p>其实翻看了react-hanger的源码之后会发现，react-hanger一共引用了四个React内置的Hook，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; useCallback, useEffect, useRef, useState &#125; from &quot;react&quot;;</span><br></pre></td></tr></table></figure><p>然后返回一些“轮子”hooks，包括 <code>useNumber</code>、 <code>useArray</code>、 <code>useBoolean</code>等等。</p><p>这些轮子可以大致分为两类：封装Hook和拆分Hook。</p><h4 id="封装Hook"><a href="#封装Hook" class="headerlink" title="封装Hook"></a>封装Hook</h4><p>比如 <code>useStateful</code>、 <code>useNumber</code>、 <code>useArray</code>、 <code>useBoolean</code>都是对内置Hook <code>useState</code>的封装。</p><h4 id="useStateful"><a href="#useStateful" class="headerlink" title="useStateful"></a>useStateful</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export const useStateful = initial =&gt; &#123;  </span><br><span class="line">    const [value, setValue] = useState(initial);  </span><br><span class="line">    return &#123;    </span><br><span class="line">        value,    </span><br><span class="line">        setValue  </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>利用ES6的解构赋值，将 <code>useState</code>返回的数组封装成一个对象重新返回，方便调用。</p><h4 id="useNumber"><a href="#useNumber" class="headerlink" title="useNumber"></a>useNumber</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">export const useNumber = (  </span><br><span class="line">    initial,  </span><br><span class="line">    &#123; upperLimit, lowerLimit, loop, step = 1 &#125; = &#123;&#125;) =&gt; &#123;  </span><br><span class="line">    const [value, setValue] = useState(initial);  </span><br><span class="line">    return &#123;    </span><br><span class="line">        value,    </span><br><span class="line">        setValue,    </span><br><span class="line">        increase: useCallback(i =&gt; &#123;      </span><br><span class="line">            setValue(...);</span><br><span class="line">                     &#125;,[]),    </span><br><span class="line">        decrease: useCallback(d =&gt; &#123;      </span><br><span class="line">            setValue(...);</span><br><span class="line">                     &#125;, [])  </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>useNumber</code>接收一个initial number和一个配置项对象，在内部是通过对initial number进行useState Hook，返回一个对象，除了基本的 <code>value</code>和 <code>setValue</code>，还有两个方法 <code>increase</code>和 <code>decrease</code>。这两个方法都是用 <code>useCallback</code>对 <code>setValue</code>进行的进一步封装。</p><blockquote><p>而 <code>useCallback</code>是一个比较重要的内置Hook， <code>useCallback</code> 的可以于缓存了每次渲染时 inline callback 的实例，在第二个参数数组内的值发生更改时才会更改。 这样可以配合上子组件的 <code>shouldComponentUpdate</code> 或者 <code>useMemo</code> 起到减少不必要的渲染的作用。</p></blockquote><p>而第二个参数为空数组的意思就是告诉React不管参数如何都要记忆。</p><h4 id="useArray-amp-useBoolean-amp-useInput"><a href="#useArray-amp-useBoolean-amp-useInput" class="headerlink" title="useArray &amp; useBoolean &amp; useInput"></a>useArray &amp; useBoolean &amp; useInput</h4><p>至于 <code>useArray</code> 、 <code>useBoolean</code> 、 <code>useInput</code>这三个hook可以说和 <code>useNumber</code>大同小异，都是需要一个传入的initial值，在hook内部通过 <code>useState</code>初始化，再返回一些常用的操作方法。</p><p>这里的 <code>useInput</code>是针对于受控组件，所以不需要 <code>useRef</code>。</p><h4 id="useSetState"><a href="#useSetState" class="headerlink" title="useSetState"></a>useSetState</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">export const useSetState = initialValue =&gt; &#123;  </span><br><span class="line">    const &#123; value, setValue &#125; = useStateful(initialValue);</span><br><span class="line">    return &#123;    </span><br><span class="line">        setState: useCallback(v =&gt; &#123;      </span><br><span class="line">            return setValue(oldValue =&gt; (&#123;        </span><br><span class="line">                ...oldValue,        </span><br><span class="line">                ...(typeof v === &quot;function&quot; ? v(oldValue) : v)</span><br><span class="line">            &#125;));    </span><br><span class="line">        &#125;, []),</span><br><span class="line">        state: value</span><br><span class="line">    &#125;;&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Unlike the <code>setState</code> method found in class components, <code>useState</code> does not automatically merge update objects. 与类组件中的setState方法不同，useState不会自动合并更新对象。</p></blockquote><p>熟悉React Hook的同学看了代码就知道这个hook是封装了什么了，因为useState返回的类似于 <code>setCount</code>的方法不会自动合并更新对象。这个hook帮助大家可以获得一个可以merge之前value的Hook型 <code>setState</code>。</p><h4 id="拆分Hook"><a href="#拆分Hook" class="headerlink" title="拆分Hook"></a>拆分Hook</h4><p>上述几个算是封装hook，那么下面的几个就可以算是拆分hook，对 <code>useEffect</code>更精细化的处理。</p><h4 id="useOnMount-amp-useOnUnmount"><a href="#useOnMount-amp-useOnUnmount" class="headerlink" title="useOnMount &amp; useOnUnmount"></a>useOnMount &amp; useOnUnmount</h4><p>众所周知， <code>useEffect</code>是被用来处理一些原先放在class组件中生命周期函数的副作用，比如 <code>componentDidMount</code>、 <code>componentDidUpdate</code>、 <code>componentWillUnmount</code>，集合而成的一个Hook。</p><p>理论上，在每次渲染后都会触发 <code>useEffect</code>的效果，但是如果我只想在didmount里或者只想在willunmount里做一下事情，该怎么办？</p><p>这时就用到了 <code>useEffect</code>的一个特点：第二个参数为效果依赖的值数组，也就是说只有当数组内的值变化才会触发 <code>useEffect</code>，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">useEffect(  </span><br><span class="line">    () =&gt; &#123;    </span><br><span class="line">        const subscription = props.source.subscribe();    </span><br><span class="line">        return () =&gt; &#123;      </span><br><span class="line">            subscription.unsubscribe();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,  [props.source],);</span><br></pre></td></tr></table></figure><p>而如果第二个参数为一个空数组的时候，则相当于告诉React你的效果不依赖于组件中的任何值，因此该效果只能在mount上运行并在unmount上清理，它不会在更新时运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export const useOnUnmount = onUnmount =&gt;  useEffect(() =&gt; &#123;</span><br><span class="line">    return () =&gt; onUnmount &amp;&amp; onUnmount();</span><br><span class="line">&#125;, []);</span><br><span class="line">export const useOnMount = onMount =&gt;  useEffect(() =&gt; &#123; </span><br><span class="line">    onMount &amp;&amp; onMount();</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><p>所以 <code>useOnMount</code>的实现就非常简单，在 <code>useEffect</code>内执行onMount函数且第二个参数是 <code>[]</code>， <code>useOnUnmount</code>的实现则是返回onUnmount函数且第二个参数是 <code>[]</code>。</p><h4 id="useLifecycleHooks"><a href="#useLifecycleHooks" class="headerlink" title="useLifecycleHooks"></a>useLifecycleHooks</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export const useLifecycleHooks = (&#123; onMount, onUnmount &#125;) =&gt;  useEffect(() =&gt; &#123;</span><br><span class="line">    onMount &amp;&amp; onMount();</span><br><span class="line">    return () =&gt; onUnmount &amp;&amp; onUnmount();</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><p><code>useLifecycleHooks</code>则是对 <code>useOnUnmount</code>和 <code>useOnMount</code>的整合，在 <code>useEffect</code>的第二个参数为 <code>[]</code>的情况下，执行onMount和返回onUnmount。</p><h4 id="useLogger"><a href="#useLogger" class="headerlink" title="useLogger"></a>useLogger</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export const useLogger = (name, props) =&gt; &#123;  </span><br><span class="line">    useLifecycleHooks(&#123;    </span><br><span class="line">        onMount: () =&gt; console.log(`$&#123;name&#125; has mounted`),</span><br><span class="line">        onUnmount: () =&gt; console.log(`$&#123;name&#125; has unmounted`)  &#125;);</span><br><span class="line">    useEffect(() =&gt; &#123;</span><br><span class="line">        console.log(&quot;Props updated&quot;, props);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>useLogger</code>算是一个为hook commponent封装的log插件，通过在 <code>useLifecycleHooks</code>内传入onMount和onUnmount打印日志的函数，之后再通过原生的默认 <code>useEffect</code>不传递第二个参数来实现在更新过程中打印日志。</p><h4 id="usePrevious"><a href="#usePrevious" class="headerlink" title="usePrevious"></a>usePrevious</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export const usePrevious = value =&gt; &#123;</span><br><span class="line">    const ref = useRef();</span><br><span class="line">    useEffect(() =&gt; &#123;</span><br><span class="line">        ref.current = value;</span><br><span class="line">    &#125;);  </span><br><span class="line">    return ref.current;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>usePrevious则可以获取之前的props或者state，来自于React的官方文档。</p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用JavaScript实现常用的数据结构</title>
      <link href="/passages/%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E5%B8%B8%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/passages/%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E5%B8%B8%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Stack"><a href="#1-Stack" class="headerlink" title="1.Stack"></a>1.Stack</h3><p>Stack的特点是后进先出（last in first out）。生活中常见的Stack的例子比如一摞书，你最后放上去的那本你之后会最先拿走；又比如浏览器的访问历史，当点击返回按钮，最后访问的网站最先从历史记录中弹出</p><p>Stack一般具备以下方法：</p><ol><li>push：将一个元素推入栈顶</li><li>pop：移除栈顶元素，并返回被移除的元素</li><li>peek：返回栈顶元素</li><li>length：返回栈中元素的个数</li></ol><p>　　Javascript的Array天生具备了Stack的特性，但我们也可以从头实现一个 Stack类：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.storage = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.push = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.storage[<span class="keyword">this</span>.count] = value;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.pop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.count === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.count--;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">this</span>.storage[<span class="keyword">this</span>.count];</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.storage[<span class="keyword">this</span>.count];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.peek = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.storage[<span class="keyword">this</span>.count - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Queue"><a href="#2-Queue" class="headerlink" title="2.Queue"></a>2.Queue</h3><p>Queue和Stack有一些类似，不同的是Stack是先进后出，而Queue是先进先出。Queue在生活中的例子比如排队上公交，排在第一个的总是最先上车；又比如打印机的打印队列，排在前面的最先打印。</p><p>　　Queue一般具有以下常见方法：</p><ol><li>enqueue：入列，向队列尾部增加一个元素</li><li>dequeue：出列，移除队列头部的一个元素并返回被移除的元素</li><li>front：获取队列的第一个元素</li><li>isEmpty：判断队列是否为空</li><li>size：获取队列中元素的个数</li></ol><p>　　Javascript中的Array已经具备了Queue的一些特性，所以我们可以借助Array实现一个Queue类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> collection = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(collection);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">    collection.push(element);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.dequeue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> collection.shift();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.front = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> collection[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> collection.length === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> collection.length;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Priority-Queue"><a href="#Priority-Queue" class="headerlink" title="Priority Queue"></a>Priority Queue</h4><p>　Queue还有个升级版本，给每个元素赋予优先级，优先级高的元素入列时将排到低优先级元素之前。区别主要是enqueue方法的实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PriorityQueue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      collection.push(element);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> added = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; collection.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (element[<span class="number">1</span>] &lt; collection[i][<span class="number">1</span>]) &#123;</span><br><span class="line">          collection.splice(i, <span class="number">0</span>, element);</span><br><span class="line">          added = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!added) &#123;</span><br><span class="line">        collection.push(element);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以下代码测试可行性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pQ = <span class="keyword">new</span> PriorityQueue();</span><br><span class="line"></span><br><span class="line">pQ.enqueue([<span class="string">'gannicus'</span>, <span class="number">3</span>]);</span><br><span class="line">pQ.enqueue([<span class="string">'spartacus'</span>, <span class="number">1</span>]);</span><br><span class="line">pQ.enqueue([<span class="string">'crixus'</span>, <span class="number">2</span>]);</span><br><span class="line">pQ.enqueue([<span class="string">'oenomaus'</span>, <span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">pQ.print();</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="comment">//[</span></span><br><span class="line"><span class="comment">//  [ 'spartacus', 1 ],</span></span><br><span class="line"><span class="comment">//  [ 'crixus', 2 ],</span></span><br><span class="line"><span class="comment">//  [ 'gannicus', 3 ],</span></span><br><span class="line"><span class="comment">//  [ 'oenomaus', 4 ]</span></span><br><span class="line"><span class="comment">//]</span></span><br></pre></td></tr></table></figure><h3 id="3-Linked-List"><a href="#3-Linked-List" class="headerlink" title="3.Linked List"></a>3.Linked List</h3><p>链表是一种链式数据结构，链上的每个节点包含两种信息：节点本身的数据和指向下一个节点的指针。链表和传统的数组都是线性的数据结构，存储的都是一个序列的数据，但也有很多区别，如下表：</p><table><thead><tr><th>比较维度</th><th>数组</th><th>链表</th></tr></thead><tbody><tr><td>内存分配</td><td>静态内存分配，编译时分配且连续</td><td>动态内存分配，运行时分配且不连续</td></tr><tr><td>元素获取</td><td>通过index获取，速度较快</td><td>通过遍历顺序访问，速递较慢</td></tr><tr><td>添加删除</td><td>速度较慢</td><td>速度更快</td></tr><tr><td>空间结构</td><td>可以是一维或者多维</td><td>可以是单向，双向或者循环链表</td></tr></tbody></table><p>一个单向链表通常具有以下方法：</p><ol><li>size：返回链表中节点的个数</li><li>head：返回链表中的头部元素</li><li>add：向链表尾部增加一个节点</li><li>remove：删除某个节点</li><li>indexOf：返回某个节点的index</li><li>elementAt：返回某个index处的节点</li><li>addAt：在某个index处插入一个节点</li><li>removeAt：删除某个index处的节点</li></ol><p>　　单向链表的Javascript实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表中的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 节点中的数据</span></span><br><span class="line">  <span class="keyword">this</span>.element = element;</span><br><span class="line">  <span class="comment">// 指向下一个节点的指针</span></span><br><span class="line">  <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> length = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> head = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.head = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> node = <span class="keyword">new</span> Node(element);</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">      head = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> currentNode = head;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (currentNode.next) &#123;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      currentNode.next = node;</span><br><span class="line">    &#125;</span><br><span class="line">    length++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> currentNode = head;</span><br><span class="line">    <span class="keyword">var</span> previousNode;</span><br><span class="line">    <span class="keyword">if</span> (currentNode.element === element) &#123;</span><br><span class="line">      head = currentNode.next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> (currentNode.element !== element) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line">      previousNode.next = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    length--;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> length === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.indexOf = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> currentNode = head;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      index++;</span><br><span class="line">      <span class="keyword">if</span> (currentNode.element === element) &#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">      &#125;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.elementAt = <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> currentNode = head;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (count &lt; index) &#123;</span><br><span class="line">      count++;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> currentNode.element;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.addAt = <span class="function"><span class="keyword">function</span> (<span class="params">index, element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> node = <span class="keyword">new</span> Node(element);</span><br><span class="line">    <span class="keyword">var</span> currentNode = head;</span><br><span class="line">    <span class="keyword">var</span> previousNode;</span><br><span class="line">    <span class="keyword">var</span> currentIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &gt; length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">      node.next = currentNode;</span><br><span class="line">      head = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> (currentIndex &lt; index) &#123;</span><br><span class="line">        currentIndex++;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line">      node.next = currentNode;</span><br><span class="line">      previousNode.next = node;</span><br><span class="line">    &#125;</span><br><span class="line">    length++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.removeAt = <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> currentNode = head;</span><br><span class="line">    <span class="keyword">var</span> previousNode;</span><br><span class="line">    <span class="keyword">var</span> currentIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">      head = currentIndex.next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> (currentIndex &lt; index) &#123;</span><br><span class="line">        currentIndex++;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line">      previousNode.next = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    length--;</span><br><span class="line">    <span class="keyword">return</span> currentNode.element;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-Set"><a href="#4-Set" class="headerlink" title="4.Set"></a>4.Set</h3><p>集合表示具有某种特性的对象汇总成的集体。在ES6中也引入了集合类型Set，Set和Array有一定程度的相似，不同的是Set中不允许出现重复的元素而且是无序的。</p><p>　　一个典型的Set应该具有以下方法：</p><ol><li>values：返回集合中的所有元素</li><li>size：返回集合中元素的个数</li><li>has：判断集合中是否存在某个元素</li><li>add：向集合中添加元素</li><li>remove：从集合中移除某个元素</li><li>union：返回两个集合的并集</li><li>intersection：返回两个集合的交集</li><li>difference：返回两个集合的差集</li><li>subset：判断一个集合是否为另一个集合的子集</li></ol><p>　　使用Javascript可以将Set进行如下实现，为了区别于ES6中的Set命名为MySet：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MySet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> collection = [];</span><br><span class="line">  <span class="keyword">this</span>.has = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (collection.indexOf(element) !== <span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.values = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> collection;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> collection.length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.has(element)) &#123;</span><br><span class="line">      collection.push(element);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.has(element)) &#123;</span><br><span class="line">      index = collection.indexOf(element);</span><br><span class="line">      collection.splice(index, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.union = <span class="function"><span class="keyword">function</span> (<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> unionSet = <span class="keyword">new</span> MySet();</span><br><span class="line">    <span class="keyword">var</span> firstSet = <span class="keyword">this</span>.values();</span><br><span class="line">    <span class="keyword">var</span> secondSet = otherSet.values();</span><br><span class="line">    firstSet.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      unionSet.add(e);</span><br><span class="line">    &#125;);</span><br><span class="line">    secondSet.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      unionSet.add(e);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> unionSet;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.intersection = <span class="function"><span class="keyword">function</span> (<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> intersectionSet = <span class="keyword">new</span> MySet();</span><br><span class="line">    <span class="keyword">var</span> firstSet = <span class="keyword">this</span>.values();</span><br><span class="line">    firstSet.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (otherSet.has(e)) &#123;</span><br><span class="line">        intersectionSet.add(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> intersectionSet;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.difference = <span class="function"><span class="keyword">function</span> (<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> differenceSet = <span class="keyword">new</span> MySet();</span><br><span class="line">    <span class="keyword">var</span> firstSet = <span class="keyword">this</span>.values();</span><br><span class="line">    firstSet.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!otherSet.has(e)) &#123;</span><br><span class="line">        differenceSet.add(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> differenceSet;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.subset = <span class="function"><span class="keyword">function</span> (<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> firstSet = <span class="keyword">this</span>.values();</span><br><span class="line">    <span class="keyword">return</span> firstSet.every(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> otherSet.has(value);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-Hash-Table"><a href="#5-Hash-Table" class="headerlink" title="5.Hash Table"></a>5.Hash Table</h3><p>Hash Table是一种用于存储键值对（key value pair）的数据结构，因为Hash Table根据key查询value的速度很快，所以它常用于实现Map、Dictinary、Object等数据结构。如上图所示，Hash Table内部使用一个hash函数将传入的键转换成一串数字，而这串数字将作为键值对实际的key，通过这个key查询对应的value非常快，时间复杂度将达到O(1)。Hash函数要求相同输入对应的输出必须相等，而不同输入对应的输出必须不等，相当于对每对数据打上唯一的指纹。</p><p>　　一个Hash Table通常具有下列方法：</p><ol><li>add：增加一组键值对</li><li>remove：删除一组键值对</li><li>lookup：查找一个键对应的值</li></ol><p>　　一个简易版本的Hash Table的Javascript实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hash</span>(<span class="params">string, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hash = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; string.length; i++) &#123;</span><br><span class="line">    hash += string.charCodeAt(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> hash % max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HashTable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> storage = [];</span><br><span class="line">  <span class="keyword">const</span> storageLimit = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> index = hash(key, storageLimit);</span><br><span class="line">    <span class="keyword">if</span> (storage[index] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      storage[index] = [</span><br><span class="line">        [key, value]</span><br><span class="line">      ];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> inserted = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; storage[index].length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (storage[index][i][<span class="number">0</span>] === key) &#123;</span><br><span class="line">          storage[index][i][<span class="number">1</span>] = value;</span><br><span class="line">          inserted = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (inserted === <span class="literal">false</span>) &#123;</span><br><span class="line">        storage[index].push([key, value]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> index = hash(key, storageLimit);</span><br><span class="line">    <span class="keyword">if</span> (storage[index].length === <span class="number">1</span> &amp;&amp; storage[index][<span class="number">0</span>][<span class="number">0</span>] === key) &#123;</span><br><span class="line">      <span class="keyword">delete</span> storage[index];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; storage[index]; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (storage[index][i][<span class="number">0</span>] === key) &#123;</span><br><span class="line">          <span class="keyword">delete</span> storage[index][i];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.lookup = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> index = hash(key, storageLimit);</span><br><span class="line">    <span class="keyword">if</span> (storage[index] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; storage[index].length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (storage[index][i][<span class="number">0</span>] === key) &#123;</span><br><span class="line">          <span class="keyword">return</span> storage[index][i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-Tree"><a href="#6-Tree" class="headerlink" title="6.Tree"></a>6.Tree</h3><p>Tree的数据结构和自然界中的树极其相似，有根、树枝、叶子，如上图所示。Tree是一种多层数据结构，与Array、Stack、Queue相比是一种非线性的数据结构，在进行插入和搜索操作时很高效。在描述一个Tree时经常会用到下列概念：</p><ol><li>Root（根）：代表树的根节点，根节点没有父节点</li><li>Parent Node（父节点）：一个节点的直接上级节点，只有一个</li><li>Child Node（子节点）：一个节点的直接下级节点，可能有多个</li><li>Siblings（兄弟节点）：具有相同父节点的节点</li><li>Leaf（叶节点）：没有子节点的节点</li><li>Edge（边）：两个节点之间的连接线</li><li>Path（路径）：从源节点到目标节点的连续边</li><li>Height of Node（节点的高度）：表示节点与叶节点之间的最长路径上边的个数</li><li>Height of Tree（树的高度）：即根节点的高度</li><li>Depth of Node（节点的深度）：表示从根节点到该节点的边的个数</li><li>Degree of Node（节点的度）：表示子节点的个数</li></ol><p>　　我们以二叉查找树为例，展示树在Javascript中的实现。在二叉查找树中，即每个节点最多只有两个子节点，而左侧子节点小于当前节点，而右侧子节点大于当前节点</p><p>一个二叉查找树应该具有以下常用方法：</p><ol><li>add：向树中插入一个节点</li><li>findMin：查找树中最小的节点</li><li>findMax：查找树中最大的节点</li><li>find：查找树中的某个节点</li><li>isPresent：判断某个节点在树中是否存在</li><li>remove：移除树中的某个节点</li></ol><p>　　以下是二叉查找树的Javascript实现：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(data, left = null, right = null) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data = data;</span><br><span class="line">    <span class="keyword">this</span>.left = left;</span><br><span class="line">    <span class="keyword">this</span>.right = right;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BST</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add(data) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="keyword">this</span>.root;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.root = <span class="keyword">new</span> Node(data);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> searchTree = <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data &lt; node.data) &#123;</span><br><span class="line">          <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">            node.left = <span class="keyword">new</span> Node(data);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> searchTree(node.left);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data &gt; node.data) &#123;</span><br><span class="line">          <span class="keyword">if</span> (node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">            node.right = <span class="keyword">new</span> Node(data);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.right !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> searchTree(node.right);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> searchTree(node);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  findMin() &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="keyword">this</span>.root;</span><br><span class="line">    <span class="keyword">while</span> (current.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">      current = current.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current.data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  findMax() &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="keyword">this</span>.root;</span><br><span class="line">    <span class="keyword">while</span> (current.right !== <span class="literal">null</span>) &#123;</span><br><span class="line">      current = current.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current.data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  find(data) &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="keyword">this</span>.root;</span><br><span class="line">    <span class="keyword">while</span> (current.data !== data) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data &lt; current.data) &#123;</span><br><span class="line">        current = current.left</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        current = current.right;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (current === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  isPresent(data) &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="keyword">this</span>.root;</span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data === current.data) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (data &lt; current.data) &#123;</span><br><span class="line">        current = current.left;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        current = current.right;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  remove(data) &#123;</span><br><span class="line">    <span class="keyword">const</span> removeNode = <span class="function"><span class="keyword">function</span> (<span class="params">node, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (data == node.data) &#123;</span><br><span class="line">        <span class="comment">// node没有子节点</span></span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// node没有左侧子节点</span></span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> node.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// node没有右侧子节点</span></span><br><span class="line">        <span class="keyword">if</span> (node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> node.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// node有两个子节点</span></span><br><span class="line">        <span class="keyword">var</span> tempNode = node.right;</span><br><span class="line">        <span class="keyword">while</span> (tempNode.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">          tempNode = tempNode.left;</span><br><span class="line">        &#125;</span><br><span class="line">        node.data = tempNode.data;</span><br><span class="line">        node.right = removeNode(node.right, tempNode.data);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data &lt; node.data) &#123;</span><br><span class="line">        node.left = removeNode(node.left, data);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        node.right = removeNode(node.right, data);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.root = removeNode(<span class="keyword">this</span>.root, data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bst = <span class="keyword">new</span> BST();</span><br><span class="line"></span><br><span class="line">bst.add(<span class="number">4</span>);</span><br><span class="line">bst.add(<span class="number">2</span>);</span><br><span class="line">bst.add(<span class="number">6</span>);</span><br><span class="line">bst.add(<span class="number">1</span>);</span><br><span class="line">bst.add(<span class="number">3</span>);</span><br><span class="line">bst.add(<span class="number">5</span>);</span><br><span class="line">bst.add(<span class="number">7</span>);</span><br><span class="line">bst.remove(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bst.findMin());</span><br><span class="line"><span class="built_in">console</span>.log(bst.findMax());</span><br><span class="line">bst.remove(<span class="number">7</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bst.findMax());</span><br><span class="line"><span class="built_in">console</span>.log(bst.isPresent(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//7</span></span><br><span class="line"><span class="comment">//6</span></span><br><span class="line"><span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="7-Graph"><a href="#7-Graph" class="headerlink" title="7.Graph"></a>7.Graph</h3><p>Graph是节点（或顶点）以及它们之间的连接（或边）的集合。Graph也可以称为Network（网络）。根据节点之间的连接是否有方向又可以分为Directed Graph（有向图）和Undrected Graph（无向图）。Graph在实际生活中有很多用途，比如：导航软件计算最佳路径，社交软件进行好友推荐等等。</p><p>　　Graph通常有两种表达方式：</p><p><strong>Adjaceny List（邻接列表）</strong>：</p><p>​        邻接列表可以表示为左侧是节点的列表，右侧列出它所连接的所有其他节点。</p><p><strong>Adjacency Matrix（邻接矩阵）</strong>：</p><p>邻接矩阵用矩阵来表示节点之间的连接关系，每行或者每列表示一个节点，行和列的交叉处的数字表示节点之间的关系：0表示没用连接，1表示有连接，大于1表示不同的权重。</p><p>　　访问Graph中的节点需要使用遍历算法，遍历算法又分为广度优先和深度优先，主要用于确定目标节点和根节点之间的距离，</p><p>　　在Javascript中，Graph可以用一个矩阵（二维数组）表示，广度优先搜索算法可以实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bfs</span>(<span class="params">graph, root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> nodesLen = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; graph.length; i++) &#123;</span><br><span class="line">    nodesLen[i] = <span class="literal">Infinity</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  nodesLen[root] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> queue = [root];</span><br><span class="line">  <span class="keyword">var</span> current;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (queue.length != <span class="number">0</span>) &#123;</span><br><span class="line">    current = queue.shift();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> curConnected = graph[current];</span><br><span class="line">    <span class="keyword">var</span> neighborIdx = [];</span><br><span class="line">    <span class="keyword">var</span> idx = curConnected.indexOf(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (idx != <span class="number">-1</span>) &#123;</span><br><span class="line">      neighborIdx.push(idx);</span><br><span class="line">      idx = curConnected.indexOf(<span class="number">1</span>, idx + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; neighborIdx.length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nodesLen[neighborIdx[j]] == <span class="literal">Infinity</span>) &#123;</span><br><span class="line">        nodesLen[neighborIdx[j]] = nodesLen[current] + <span class="number">1</span>;</span><br><span class="line">        queue.push(neighborIdx[j]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> nodesLen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同步与异步</title>
      <link href="/passages/%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5/"/>
      <url>/passages/%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="一-关于JavaScript"><a href="#一-关于JavaScript" class="headerlink" title="一 关于JavaScript"></a>一 关于JavaScript</h3><p>JavaScript是一门<strong>单线程</strong>语言，在最新的HTML5中提出了Web-Worker，但JavaScript是单线程这一核心仍未改变。所以一切JavaScript版的”多线程”都是用单线程模拟出来的。</p><h3 id="二-JavaScript的事件循环"><a href="#二-JavaScript的事件循环" class="headerlink" title="二 JavaScript的事件循环"></a>二 JavaScript的事件循环</h3><p>既然JS是单线程，就像只有一个窗口的银行，客户需要排队一个一个办理业务，同理JS任务也要一个一个顺序执行。如果一个任务耗时过长，那么后一个任务也必须等着。那么问题来了，假如我想浏览新闻，但是新闻包含的超清图片加载很慢，难道网页要一直卡着直到图片完全显示出来？因此，可以将任务分为两类来解决问题：</p><ul><li><strong>同步任务</strong></li><li><strong>异步任务</strong></li></ul><p>当打开网站时，网页的渲染过程就是一大堆同步任务，比如页面骨架和页面元素的渲染。而像加载图片音乐之类占用资源大耗时久的任务，就是异步任务。</p><blockquote><p>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入Event Table并注册函数。<br>当指定的事情完成时，Event Table会将这个函数移入Event Queue。<br>主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。<br>上述过程会不断重复，也就是常说的Event Loop(事件循环)。</p></blockquote><hr><p>那如何判断主线程执行栈是否为空？</p><blockquote><p><strong>JS引擎中存在monitoring process进程，它会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数。</strong></p></blockquote><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = [];</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url:www.javascript.com,</span><br><span class="line">    data:data,</span><br><span class="line">    success:<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'发送成功!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'代码执行结束'</span>);</span><br></pre></td></tr></table></figure><p>上面是一段简易的ajax请求代码：</p><ul><li>ajax进入Event Table，注册回调函数success。</li><li>执行console.log(‘代码执行结束’)。</li><li>ajax事件完成，回调函数success进入Event Queue。</li><li>主线程从Event Queue读取回调函数success并执行。</li></ul><h3 id="三-setTimeout函数"><a href="#三-setTimeout函数" class="headerlink" title="三 setTimeout函数"></a>三 setTimeout函数</h3><blockquote><p>setTimeout是异步的</p></blockquote><p>举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    task()</span><br><span class="line">&#125;,<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">10000000</span>)<span class="comment">// sleep代表一个执行需要耗时很久的函数，并不是真实的sleep函数</span></span><br></pre></td></tr></table></figure><p>发现执行Task()的时间元超过3秒。为什么呢？</p><p>首先上面的代码执行过程</p><ul><li>task()进入Event Table并注册,计时开始。</li><li>执行sleep函数，很慢，非常慢，计时仍在继续。</li><li>3秒到了，计时事件timeout完成，task()进入Event Queue，但是sleep还没执行完，只好等着。</li><li>sleep终于执行完了，task()终于从Event Queue进入了主线程执行。</li></ul><p>上述的流程走完，可以知道setTimeout这个函数，是经过指定时间后，把要执行的任务(本例中为task())加入到Event Queue中，又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒。</p><p>补充：</p><blockquote><p><strong>setTimeout(fn,0)的含义是，指定某个任务在主线程最早可得的空闲时间执行，意思就是不用再等多少秒了，只要主线程执行栈内的同步任务全部执行完成，栈为空就马上执行</strong></p></blockquote><h3 id="四-Promise和process-nextTick（callback）"><a href="#四-Promise和process-nextTick（callback）" class="headerlink" title="四 Promise和process.nextTick（callback）"></a>四 Promise和process.nextTick（callback）</h3><p>首先我们可以继续将任务细分</p><p><strong>- macro-task(宏任务)：包括整体代码script，setTimeout，setInterval</strong><br><strong>- micro-task(微任务)：Promise，process.nextTick</strong></p><p>不同类型的任务会进入对应的Event Queue，比如setTimeout和setInterval会进入相同的Event Queue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise'</span>);</span><br><span class="line">    resolve();<span class="comment">// 在浏览器里，Promise没写resolve，'then'是不会输出的，这里为了方便演示人为添加执行</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'then'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'console'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="comment">// promise</span></span><br><span class="line"><span class="comment">// console</span></span><br><span class="line"><span class="comment">// then</span></span><br><span class="line"><span class="comment">// setTimeout</span></span><br></pre></td></tr></table></figure><ul><li>这段代码作为宏任务，进入主线程。</li><li>先遇到setTimeout，那么将其回调函数注册后分发到宏任务Event Queue。(注册过程与上同，下文不再描述)</li><li>接下来遇到了Promise，new Promise立即执行，then函数分发到微任务Event Queue。</li><li>遇到console.log()，立即执行。</li><li>整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了then在微任务Event Queue里面，执行。</li><li>第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中setTimeout对应的回调函数，立即执行。</li><li>结束。</li></ul><p><img src="https://img-blog.csdn.net/20171124190533242?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvanNzeV9jc3U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>接下来这段代码更具有典型性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'3'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'4'</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'5'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'6'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'7'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'8'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'9'</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'10'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'11'</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'12'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>第一轮事件循环流程分析如下：</p><ul><li>整体script作为第一个宏任务进入主线程，遇到console.log，输出1。</li><li>遇到setTimeout，其回调函数被分发到宏任务Event Queue中。我们暂且记为setTimeout1。</li><li>遇到process.nextTick()，其回调函数被分发到微任务Event Queue中。我们记为process1。</li><li>遇到Promise，new Promise直接执行，输出7。then被分发到微任务Event Queue中。我们记为then1。</li><li>又遇到了setTimeout，其回调函数被分发到宏任务Event Queue中，我们记为setTimeout2。</li></ul><p><img src="https://img-blog.csdn.net/20171124191351444?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvanNzeV9jc3U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和7。</p><ul><li><p>我们发现了process1和then1两个微任务。</p></li><li><p>执行process1,输出6。</p></li><li><p>执行then1，输出8。</p><p>第一轮事件循环正式结束，这一轮的结果是输出1，7，6，8。那么第二轮时间循环从setTimeout1宏任务开始：</p></li><li><p>首先输出2。接下来遇到了process.nextTick()，同样将其分发到微任务Event Queue中，记为process2。new Promise立即执行输出4，then也分发到微任务Event Queue中，记为then2。</p></li><li>第二轮事件循环宏任务结束，我们发现有process2和then2两个微任务可以执行。</li><li>输出3。</li><li>输出5。</li><li>第二轮事件循环结束，第二轮输出2，4，3，5。</li><li>第三轮事件循环开始，此时只剩setTimeout2了，执行。</li><li>直接输出9。</li><li>将process.nextTick()分发到微任务Event Queue中。记为process3。</li><li>直接执行new Promise，输出11。</li><li>将then分发到微任务Event Queue中，记为then3。</li></ul><p><img src="https://img-blog.csdn.net/20171124192130211?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvanNzeV9jc3U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>第三轮事件循环宏任务执行结束，执行两个微任务process3和then3。</p><ul><li>输出10。</li><li>输出12。</li><li>第三轮事件循环结束，第三轮输出9，11，10，12。</li></ul><p>整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。（浏览器环境） </p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让小程序支持jsx语法</title>
      <link href="/passages/%E8%AE%A9%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%94%AF%E6%8C%81jsx%E8%AF%AD%E6%B3%95/"/>
      <url>/passages/%E8%AE%A9%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%94%AF%E6%8C%81jsx%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一-现有思路的局限性"><a href="#一-现有思路的局限性" class="headerlink" title="一 现有思路的局限性"></a>一 现有思路的局限性</h3><p>先看看 <code>Taro</code>， <code>nanachi</code>是怎么在小程序端处理 <code>JSX</code>语法的。简单来说，主要是通过在编译阶段把 <code>JSX</code>转化为等效的小程序 <code>wxml</code>来把 <code>React</code>代码运行在小程序端的</p><p>比如将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xx &amp;&amp; &lt;Text&gt;hello&lt;/Text&gt;</span><br></pre></td></tr></table></figure><p>将会被转化为<code>wx：if</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Text wx:if=&quot;&#123;&#123;xx&#125;&#125;&quot;&gt;Hello&lt;/Text&gt;</span><br></pre></td></tr></table></figure><p>这种方式把对 <code>JSX</code>的处理，主要放在了编译阶段，他依赖于编译阶段的信息收集，以上面为例，它必须识别出逻辑表达式，然后做对应的 <code>wx:if</code>转换处理。</p><p>那编译阶段有什么问题和局限呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class App extends React.Component &#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        const a=&lt;Text&gt;hello&lt;/Text&gt;</span><br><span class="line">        const b=a</span><br><span class="line">        return (</span><br><span class="line">        &lt;View&gt;</span><br><span class="line">            &#123;b&#125;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先我们声明 <code>consta=&lt;Text&gt;Hello&lt;/Text&gt;</code>，然后把 <code>a</code>赋值给了 <code>b</code>，在最新版本 <code>Taro1.3</code>的转换后报错了！！！</p><p><code>a is not defined</code></p><p>为什么呢？</p><p>想理解上面的代码为什么报错，我们首先要理解编译阶段。本质上来说在编译阶段，代码其实就是‘字符串’，而编译阶段处理方案，就需要从这个‘字符串’中分析出必要的信息（通过 <code>AST</code>，正则等方式）然后做对应的等效转换处理。</p><p>而对于上面的例子，需要做什么等效处理呢？需要我们在编译阶段分析出 <code>b</code>是 <code>JSX</code>片段：<code>b=a=&lt;Text&gt;Hello&lt;/Text&gt;</code>，然后把 <code>&lt;View&gt;{b}&lt;/View&gt;</code>中的 <code>{b}</code>等效替换为 <code>&lt;Text&gt;Hello&lt;/Text&gt;</code>。然而在编译阶段要想确定 <code>b</code>的值是很困难的，有人说可以往前追溯来确定b的值，也不是不可以，但是考虑一下 由于 <code>b=a</code>，那么就先要确定 <code>a</code>的值，这个 <code>a</code>的值怎么确定呢？需要在 <code>b</code>可以访问到的作用域链中确定 <code>a</code>，然而 <code>a</code>可能又是由其他变量赋值而来，循环往复，期间一旦出现不是简单赋值的情况，比如函数调用，三元判断等运行时信息，追溯就宣告失败，要是 <code>a</code>本身就是挂在全局对象上的变量，追溯就更加无从谈起。</p><p>所以在编译阶段 是无法简单确定 <code>b</code>的值的。</p><p>我们再仔细看下报错信息：<code>a is not defined</code>。</p><p>什么说 <code>a</code>未定义呢？这是涉及到另外一个问题，我们知道 <code>&lt;Text&gt;Hello&lt;/Text&gt;</code>，其实等效于 <code>React.createElement(Text,null,&#39;Hello&#39;)</code>，而 <code>React.createElement</code>方法的返回值就是一个普通 <code>JS</code>对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    tag:Text,</span><br><span class="line">    props:<span class="literal">null</span>,</span><br><span class="line">    children:<span class="string">'hello'</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以上面那一段代码在 <code>JS</code>环境真正运行的时候，大概等效如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class App extends React.Component &#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        const a=&#123;</span><br><span class="line">            tag:Text,</span><br><span class="line">            props:null,</span><br><span class="line">            children:&apos;hello&apos;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        const b=a</span><br><span class="line">        return &#123;</span><br><span class="line">            tag:View,</span><br><span class="line">            props:null,</span><br><span class="line">            children:b</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，之前说编译阶段需要对 <code>JSX</code>做等效处理，需要把 <code>JSX</code>转换为 <code>wxml</code>，所以 <code>&lt;Text&gt;Hello&lt;/Text&gt;</code>这个 <code>JSX</code>片段被特殊处理了， <code>a</code>不再是一个普通 <code>js</code>对象，这里我们看到 <code>a</code>变量甚至丢失了，这里暴露了一个很严重的问题：代码语义被破坏了，也就是说由于编译时方案对 <code>JSX</code>的特殊处理，真正运行在小程序上的代码语义并不是你的预期。</p><h3 id="二-新的思路"><a href="#二-新的思路" class="headerlink" title="二 新的思路"></a>二 新的思路</h3><p>下面我们介绍一种全新的处理思路，这种思路在小程序运行期间和真正的 <code>React</code>几无区别，不会改变任何代码语义， <code>JSX</code>表达式只会被处理为 <code>React.createElement</code>方法调用，实际运行的时候就是普通 <code>js</code>对象，最终通过其他方式渲染出小程序视图。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">第一步：给每个独立的 `JSX`片段打上唯一标识 `uuid`，例如：</span><br><span class="line"></span><br><span class="line">const a=&lt;Text uuid=&apos;00001&apos;&gt;&lt;/Text&gt;</span><br><span class="line">const y=&lt;View uuid=&apos;00002&apos;&gt;</span><br><span class="line">      &lt;Image&gt;&lt;/Image&gt;</span><br><span class="line">          &lt;Text&gt;&lt;/Text&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">      </span><br><span class="line">我们给 `a`片段， `y`片段 添加了 `uuid`属性</span><br><span class="line"></span><br><span class="line">第二步：把 `React`代码通过 `babel`转义为小程序可以识别的代码，例如 `JSX`片段用等效的 `React.createElement`替换等</span><br><span class="line"></span><br><span class="line">const a=React.createElement(Text,&#123;</span><br><span class="line">    uuid:&apos;00001&apos;</span><br><span class="line">&#125;,&apos;hello&apos;)</span><br><span class="line"></span><br><span class="line">第三步：提取每个独立的 `JSX`片段，用小程序 `template`包裹，生成 `wxml`文件</span><br><span class="line"></span><br><span class="line">&lt;template name=&apos;00001&apos;&gt;</span><br><span class="line">&lt;Text&gt;hello&lt;/Text&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;template name=&apos;00002&apos;&gt;</span><br><span class="line">&lt;View uuid=&apos;00002&apos;&gt;</span><br><span class="line">      &lt;Image&gt;&lt;/Image&gt;</span><br><span class="line">          &lt;Text&gt;&lt;/Text&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;template is=&quot;&#123;&#123;uiDes.name&#125;&#125;&quot; data=&quot;&#123;&#123;...uiDes&#125;&#125;&quot;&gt;&lt;/template&gt;</span><br><span class="line">    </span><br><span class="line">注意这里每一个 `template` 的 `name`标识和 `JSX`片段的唯一标识 `uuid`是一样的。最后，需要在结尾生成一个占位模版：`&lt;templateis=&quot;&#123;&#123;uiDes.name&#125;&#125;&quot;data=&quot;&#123;&#123;...uiDes&#125;&#125;&quot;/&gt;`。</span><br><span class="line"></span><br><span class="line">第四步：修改 `ReactDOM.render`的递归（ `React16.x`之后，不在是递归的方式）过程，递归执行阶段，聚合 `JSX`片段的 `uuid`属性，生成并返回 `uiDes`数据结构。</span><br><span class="line"></span><br><span class="line">第五步：把第四步生成的 `uiDes`，传递给小程序环境，小程序把 `uiDes` 设置给占位模版 `&lt;templateis=&quot;&#123;&#123;uiDes.name&#125;&#125;&quot;data=&quot;&#123;&#123;...uiDes&#125;&#125;&quot;/&gt;`，渲染出最终的视图。</span><br><span class="line"></span><br><span class="line">const uiDes=&#123;</span><br><span class="line">    name:&apos;00002&apos;,</span><br><span class="line">    child0001:&#123;</span><br><span class="line">        name:00001,</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这整个过程中，你的所有 <code>JS</code>代码都是运行在 <code>React</code>过程中的，语义完全一致， <code>JSX</code>片段也不会被任何特殊处理，只是简单的 <code>React.createElement</code>调用，另外由于这里的 <code>React</code>过程只是纯 <code>js</code>运算，执行是非常迅速的，通常只有几ms。最终会输出一个 <code>uiDes</code>数据到小程序，小程序通过这个 <code>uiDes</code>渲染出视图。</p><p>现在我们在看之前的赋值 <code>const b=a</code>，就不会有任何问题了，因为 <code>a</code> 不过是普通对象。另外对于常见的编译时方案的限制，比如任意函数返回 <code>JSX</code>片段，动态生成 <code>JSX</code>片段， <code>for</code>循环使用 <code>JSX</code>片段等等，都可以完全解除了，因为 <code>JSX</code>片段只是 <code>js</code>对象，你可以做任何操作，最终 <code>ReactDOM.render</code>会搜集所有执行结果的片段的 <code>uuid</code>标识，生成 <code>uiDes</code>，而小程序会根据这个 <code>uiDes</code>数据结构渲染出最终视图。</p><p>可以看出这种新的思路和以前编译时方案还是有很大的区别的，对 <code>JSX</code>片段的处理是动态的，你可以在任何地方，任何函数出现任何 <code>JSX</code>片段, 最终执行结果会确定渲染哪一个片段，只有执行结果的片段的 <code>uuid</code>会被写入 <code>uiDes</code>。这和编译时方案的静态识别有着本质的区别。</p>]]></content>
      
      
      
        <tags>
            
            <tag> jsx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iframe的实际应用</title>
      <link href="/passages/iframe%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/"/>
      <url>/passages/iframe%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="一-何为iframe"><a href="#一-何为iframe" class="headerlink" title="一 何为iframe"></a>一 何为iframe</h3><p><code>iframe</code>是一个标签<code>dom</code>元素, 我们可以使用向一个网页里嵌入另一个网页，以及用在导航栏tab切换页（古老的做法）、在线编辑器、广告植入，以及跨域通信等</p><h3 id="二-iframe的优点和缺点"><a href="#二-iframe的优点和缺点" class="headerlink" title="二 iframe的优点和缺点"></a>二 iframe的优点和缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>解决跨域问题（已经很少使用了）</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>触发 window 的 <code>onload</code> 事件是非常重要的。<code>onload</code> 事件触发使浏览器的 “忙” 指示器停止，告诉用户当前网页已经加载完毕。当 <code>onload</code> 事件加载延迟后，它给用户的感觉就是这个网页非常慢。如果含有多个<code>iframe</code>,那么<code>window</code> 的 <code>onload</code>事件需要在所有 <code>iframe</code> 加载完毕后(包含里面的元素)才会触发。通过JavaScript 动态设置 <code>iframe</code> 的 <code>Src</code> 可以避免这种阻塞情况</p><h3 id="三-iframe的使用"><a href="#三-iframe的使用" class="headerlink" title="三 iframe的使用"></a>三 iframe的使用</h3><blockquote><p>不管是获取子<code>iframe</code>还是父<code>iframe</code>都受跨域限制</p></blockquote><ul><li>获取子窗口<ul><li><code>document.getElementsByTagName(&#39;iframe&#39;)[0].contentWindow</code></li><li><code>document.getElementsById(&#39;id&#39;).contentWindow</code></li></ul></li><li>简易写法<ul><li><code>window.frames[&#39;iframe的name&#39;]</code></li></ul></li><li>IE专用<ul><li><code>document.iframes[name].contentWindow</code></li><li><code>document.iframes[i].contentWindow</code></li></ul></li></ul><h3 id="父子页面窗口的关系"><a href="#父子页面窗口的关系" class="headerlink" title="父子页面窗口的关系"></a>父子页面窗口的关系</h3><ul><li>window.self: 就是自己</li><li>window.parent: 父级窗口对象</li><li>window.top: 顶级窗口对象</li></ul><h3 id="父子窗口通信"><a href="#父子窗口通信" class="headerlink" title="父子窗口通信"></a>父子窗口通信</h3><p>等待子<code>iframe</code>加载完成后可以通过<code>iframe.contentWindow.变量</code>访问子窗口</p><h4 id="判断iframe加载完成"><a href="#判断iframe加载完成" class="headerlink" title="判断iframe加载完成"></a>判断<code>iframe</code>加载完成</h4><ul><li>非ie下使用onload事件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iframe(dom元素).onload = function () &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>ie下使用onreadystatechange或者设定计时器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iframe.onreadystatechange = function()&#123; </span><br><span class="line">      if (iframe.readyState == &quot;complete&quot; || iframe.readyState == &apos;&apos;loaded”)&#123;</span><br><span class="line">         alert(&quot;Local iframe is now loaded.&quot;);</span><br><span class="line">     &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>父访问子和子访问父涉都会及跨域问题</p><h4 id="iframe受跨域限制如何解决"><a href="#iframe受跨域限制如何解决" class="headerlink" title="iframe受跨域限制如何解决"></a><code>iframe</code>受跨域限制如何解决</h4><ul><li><p><code>document.domain</code>: 解决跨域限制最好的办法,而且域名必须属于同一个基础域名!而且所用的协议，端口都要一致，否则无法跨域。</p></li><li><p><code>window.location.hash</code>: 解决父页面向子页面传递数据问题(<code>window.location.href</code>)，不论是否跨域，都可以取得后面的<code>hash</code>值，即锚点后面的值，所以可使用锚点来传输数据，如下<code>&lt;iframe src=&#39;http://baidu.com#1&#39;&gt;</code>,然后在子页面中使用定时器定时访问location.hash来获得传过来的值，如下图所示，注意里面<code>lasthash</code>的使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age=<span class="number">20</span></span><br><span class="line"><span class="keyword">var</span> lastHash = <span class="built_in">window</span>.location.hash;</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="number">0</span>&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                      if(lastHash!=window.location.hash</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(location.hash.slice(<span class="number">1</span>))</span><br><span class="line">    lastHash=<span class="built_in">window</span>.location.hash</span><br><span class="line">&#125;</span><br><span class="line">                      &#125;),<span class="number">10</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>window.name</code>: 解决父页面访问子页面的数据问题，<code>window.name</code>是放在整个窗口上，只要该浏览器窗口没有关闭，一个标签下，不管两个页面是否同源,以及是否刷星，<code>window.name</code>就可以取到，但是对于一个页面中镶嵌另外一个<code>iframe</code>，由于<code>iframe</code>是一个新的页面含有新的<code>window</code>，所以不能直接用<code>window.name</code>取得<code>iframe</code>中的<code>window.name</code>由于是不同的<code>window</code>,像下面这样使用<code>window.name</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">'https://still-caverns-23465.herokuapp.com/ds.html'</span> <span class="attr">frameborder</span>=<span class="string">'0'</span> <span class="attr">name</span>=<span class="string">'ds'</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oIframe=<span class="built_in">document</span>.getElementByTagName(<span class="string">'iframe'</span>)[<span class="number">0</span>]</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oldAge=<span class="number">55</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> flag=<span class="literal">true</span></span></span><br><span class="line"><span class="javascript">    oIframe.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(flag)&#123;</span></span><br><span class="line"><span class="javascript">            oIframe.src=<span class="string">'./xl.html'</span></span></span><br><span class="line"><span class="javascript">            flag=<span class="literal">false</span></span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(oIframe.contentWindow.name)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>实现的思路是当子<code>iframe</code>加载完成后，我们替换掉<code>iframe</code>的<code>src</code>为当前页面的同源页面，这样我们就可以借助这个同源页面去<code>iframe</code>里面取<code>window.name</code>了</p>]]></content>
      
      
      
        <tags>
            
            <tag> iframe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重绘，重排与性能优化</title>
      <link href="/passages/%E9%87%8D%E7%BB%98%EF%BC%8C%E9%87%8D%E6%8E%92%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/passages/%E9%87%8D%E7%BB%98%EF%BC%8C%E9%87%8D%E6%8E%92%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="一-什么是重绘与重排"><a href="#一-什么是重绘与重排" class="headerlink" title="一.什么是重绘与重排"></a>一.什么是重绘与重排</h3><p>浏览器下载完页面中的所有组件——HTML标记、JavaScript、CSS、图片之后会解析生成两个内部数据结构——DOM树和渲染树。</p><p>DOM树表示页面结构，渲染树表示DOM节点如何显示。DOM树中的每一个需要显示的节点在渲染树种至少存在一个对应的节点（隐藏的DOM元素disply值为none 在渲染树中没有对应的节点）。渲染树中的节点被称为“帧”或“盒”,符合CSS模型的定义，理解页面元素为一个具有填充，边距，边框和位置的盒子。一旦DOM和渲染树构建完成，浏览器就开始显示（绘制）页面元素。</p><p>当DOM的变化影响了元素的几何属性（宽或高），浏览器需要重新计算元素的几何属性，同样其他元素的几何属性和位置也会因此受到影响。浏览器会使渲染树中受到影响的部分失效，并重新构造渲染树。<strong>这个过程称为重排</strong>。完成重排后，浏览器会重新绘制受影响的部分到屏幕，<strong>该过程称为重绘</strong>。由于浏览器的流布局，对渲染树的计算通常只需要遍历一次就可以完成。但table及其内部元素除外，它可能需要多次计算才能确定好其在渲染树中节点的属性，通常要花3倍于同等元素的时间。这也是为什么我们要避免使用table做布局的一个原因。</p><p>并不是所有的DOM变化都会影响几何属性，比如改变一个元素的背景色并不会影响元素的宽和高，这种情况下只会发生重绘。</p><p>不管页面发生了重绘还是重排，它们都会影响性能</p><h3 id="二-怎样触发重排"><a href="#二-怎样触发重排" class="headerlink" title="二.怎样触发重排"></a>二.怎样触发重排</h3><p>页面布局和元素几何属性的改变就会导致重排<br>下列情况会发生重排</p><ul><li>页面初始渲染</li><li>添加/删除可见DOM元素</li><li>改变元素位置</li><li>改变元素尺寸（宽、高、内外边距、边框等）</li><li>改变元素内容（文本或图片等）</li><li>改变窗口尺寸</li></ul><p>不同的条件下发生重排的范围及程度会不同<br>某些情况甚至会重排整个页面，比如滑动滚动条</p><h3 id="三-浏览器优化"><a href="#三-浏览器优化" class="headerlink" title="三.浏览器优化"></a>三.浏览器优化</h3><p>例如：</p><p>假如我要用js修改某个div的样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div.style.left = <span class="string">'10px'</span>;</span><br><span class="line">div.style.top = <span class="string">'10px'</span>;</span><br><span class="line">div.style.width = <span class="string">'10px'</span>;</span><br><span class="line">div.style.height = <span class="string">'10px'</span>;</span><br></pre></td></tr></table></figure><p>我们修改了元素的left、top、width、height属性 ,满足我们发生重排的条件 ,理论上会发生4次重排 ,但是<strong>实际上只会发生1次重排</strong> ,因为我们现代的浏览器都有<strong>渲染队列</strong>的机制 ,当我改变了元素的一个样式会导致浏览器发生重排或重绘时 ,它会进入一个渲染队列 ,然后浏览器继续往下看，如果下面还有样式修改 ,那么同样入队 ,直到下面没有样式修改 ,浏览器会按照渲染队列批量执行来优化重排过程，一并修改样式 ,这样就把本该4次的重排优化为1次</p><p><strong><em>But</em></strong>,当我们写如下代码时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">div.style.left = <span class="string">'10px'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(div.offsetLeft);</span><br><span class="line"></span><br><span class="line">div.style.top = <span class="string">'10px'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(div.offsetTop);</span><br><span class="line"></span><br><span class="line">div.style.width = <span class="string">'20px'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(div.offsetWidth);</span><br><span class="line"></span><br><span class="line">div.style.height = <span class="string">'20px'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(div.offsetHeight);</span><br></pre></td></tr></table></figure><p>还是1次重排吗？</p><p>Obviously not! <strong>此时发生了4次重排！</strong></p><p>上文不是说浏览器有渲染队列优化机制吗？ 为什么会有4次？</p><p>这和offsetLeft/Top/Width/Height有关</p><blockquote><ul><li>offsetTop、offsetLeft、offsetWidth、offsetHeight</li><li>clientTop、clientLeft、clientWidth、clientHeight</li><li>scrollTop、scrollLeft、scrollWidth、scrollHeight</li><li>getComputedStyle()（IE中currentStyle）</li></ul><p>这些会强制刷新队列要求样式修改任务立刻执行 </p></blockquote><p>因为浏览器并不确定在下面的代码中是否还有修改同样的样式，为了获取到当前正确的的即时值不得不立刻执行渲染队列触发重排！！！</p><h3 id="四-重绘与重排性能优化"><a href="#四-重绘与重排性能优化" class="headerlink" title="四.重绘与重排性能优化"></a>四.重绘与重排性能优化</h3><h4 id="1-分离读写操作"><a href="#1-分离读写操作" class="headerlink" title="1.分离读写操作"></a>1.分离读写操作</h4><p>我们就可以对上面的代码进行优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">div.style.left = <span class="string">'10px'</span>;</span><br><span class="line">div.style.top = <span class="string">'10px'</span>;</span><br><span class="line">div.style.width = <span class="string">'20px'</span>;</span><br><span class="line">div.style.height = <span class="string">'20px'</span>;</span><br><span class="line"><span class="comment">//所有的读操作写在所有的写操作之后</span></span><br><span class="line"><span class="built_in">console</span>.log(div.offsetLeft);</span><br><span class="line"><span class="built_in">console</span>.log(div.offsetTop);</span><br><span class="line"><span class="built_in">console</span>.log(div.offsetWidth);</span><br><span class="line"><span class="built_in">console</span>.log(div.offsetHeight);</span><br></pre></td></tr></table></figure><p>这样就仅仅发生1次重排了！</p><h4 id="2-样式集中改变"><a href="#2-样式集中改变" class="headerlink" title="2.样式集中改变"></a>2.样式集中改变</h4><p>还是我们最初修改样式的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div.style.left = <span class="string">'10px'</span>;</span><br><span class="line">div.style.top = <span class="string">'10px'</span>;</span><br><span class="line">div.style.width = <span class="string">'20px'</span>;</span><br><span class="line">div.style.height = <span class="string">'20px'</span>;</span><br></pre></td></tr></table></figure><p>虽然现代浏览器有渲染队列的优化机制，但是古董浏览器效率仍然底下，触发了4次重排 ，即便这样，我们仍然可以做出优化 ，我们需要cssText属性合并所有样式改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.style.cssText = <span class="string">'left:10px;top:10px;width:20px;height:20px;'</span>;</span><br></pre></td></tr></table></figure><p>这样只需要修改DOM一次一并处理，仅仅触发了1次重排 ，而且只用了一行代码</p><blockquote><p>cssText会覆盖已有的行间样式<br>如果想保留原有行间样式，这样做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; div.style.cssText += <span class="string">';left:10px;'</span>;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>除了cssText以外，我们还可以通过修改class类名来进行样式修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.className = <span class="string">'new-class'</span>;</span><br></pre></td></tr></table></figure><p>这种办法可维护性好，还可以帮助我们免除显示性代码，但是会消耗一点点的性能</p><h4 id="3-缓存布局信息"><a href="#3-缓存布局信息" class="headerlink" title="3.缓存布局信息"></a>3.缓存布局信息</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div.style.left = div.offsetLeft + <span class="number">1</span> + <span class="string">'px'</span>;</span><br><span class="line">div.style.top = div.offsetTop + <span class="number">1</span> + <span class="string">'px'</span>;</span><br></pre></td></tr></table></figure><p>这种读操作完就执行写操作造成了2次重排<br>缓存可以进行优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> curLeft = div.offsetLeft;</span><br><span class="line"><span class="keyword">var</span> curTop = div.offsetTop;</span><br><span class="line">div.style.left = curLeft + <span class="number">1</span> + <span class="string">'px'</span>;</span><br><span class="line">div.style.top = curTop + <span class="number">1</span> + <span class="string">'px'</span>;</span><br></pre></td></tr></table></figure><p>相当于是分离读写操作，优化为1次重排</p><h4 id="4-元素批量操作"><a href="#4-元素批量操作" class="headerlink" title="4.元素批量操作"></a>4.元素批量操作</h4><p>现在我们想要向ul中循环添加大量li （如果ul还不存在，最好的办法是先循环添加li到ul，然后再把ul添加到文档，1次重排）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1e5</span>; i++)&#123;</span><br><span class="line"><span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(i);</span><br><span class="line">li.appendChild(text);</span><br><span class="line">ul.appendChild(li);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我可以做出下面的优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>);</span><br><span class="line">ul.style.display = <span class="string">'none'</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1e5</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">    <span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(i);</span><br><span class="line">    li.appendChild(text);</span><br><span class="line">    ul.appendChild(li);</span><br><span class="line">&#125;</span><br><span class="line">ul.style.display = <span class="string">'block'</span>;</span><br><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>);</span><br><span class="line"><span class="keyword">var</span> frg = <span class="built_in">document</span>.createDocumentFragment(); </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1e5</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">    <span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(i);</span><br><span class="line">    li.appendChild(text);</span><br><span class="line">    frg.appendChild(li); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ul.appendChild(frg); </span><br><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>);</span><br><span class="line"><span class="keyword">var</span> clone = ul.cloneNode(<span class="literal">true</span>); </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1e5</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">    <span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(i);</span><br><span class="line">    li.appendChild(text);</span><br><span class="line">    clone.appendChild(li); </span><br><span class="line">&#125;</span><br><span class="line">ul.parentNode.replaceChild(clone,ul);</span><br></pre></td></tr></table></figure><p>上面的方法减少重绘和重排的原理很简单</p><ul><li>元素脱离文档</li><li>改变样式</li><li>元素回归文档</li></ul><p>而改变元素就分别使用了隐藏元素、文档碎片和克隆元素 </p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RN中没有固定定位怎么办？</title>
      <link href="/passages/RN%E4%B8%AD%E6%B2%A1%E6%9C%89%E5%9B%BA%E5%AE%9A%E5%AE%9A%E4%BD%8D%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/"/>
      <url>/passages/RN%E4%B8%AD%E6%B2%A1%E6%9C%89%E5%9B%BA%E5%AE%9A%E5%AE%9A%E4%BD%8D%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img2018.cnblogs.com/blog/1227538/201903/1227538-20190319110324634-428942820.png" alt="img"></p><p>如上图的底部新增按钮，要是放在web里那是相当简单，直接是用固定定位就行，但是在RN里是没有固定定位。</p><p>怎么解决?</p><h3 id="方案一-绝对定位"><a href="#方案一-绝对定位" class="headerlink" title="方案一     绝对定位"></a>方案一     绝对定位</h3><p>采用绝对定位，相对于最外层的定位在底部位置。</p><blockquote><p>在部分安卓机上有问题，动态计算的高度，定位底部的高度有问题，导致底部按钮定位脱离了视野</p></blockquote><h3 id="方案二-flex布局"><a href="#方案二-flex布局" class="headerlink" title="方案二    flex布局"></a>方案二    flex布局</h3><p>如上图，头部导航<headerview> 是固定的，</headerview></p><p>剩下的就是<segmentedcontrol> 组件（红色方框区域） </segmentedcontrol></p><p>设置属性 flex:1 使它撑满剩余空间，这时候可以设置它为相对定位，然后底部那个按钮绝对定位，这样可行，</p><p><strong>但是我们可以用flex一层一层撑开</strong>。</p><p>按钮底部空白的位置，不是定位出来的，其实是适应iphoneX组件的空间，忽略。</p><p>接下来只要把内部划成三块就行：tab导航  列表内容  底部按钮 。</p><p>列表内容和底部导航是由一个VIew 包着 和tab 导航同一层级的。所以这个View 设置<code>flex:1</code>.</p><p>到了最后一层，就是设置列表内容 <code>flex:1</code> ， 底部按钮固定高度。这样根据flex布局的属性，底部按钮就被挤在 最下面这个位置了。</p><p>这个方法相对于直接用一层定位来，多了几层<code>flex:1</code>，但是省去了计算高度的工作，不存在安卓的兼容性，免去了样式爆炸的烦恼。</p><p>总结：最核心就是一点，一层层设置<code>flex：1</code>,把固定高度的挤在固定的地方就行。</p>]]></content>
      
      
      
        <tags>
            
            <tag> react-native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈BFC原理及作用</title>
      <link href="/passages/%E6%B5%85%E8%B0%88BFC%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%9C%E7%94%A8/"/>
      <url>/passages/%E6%B5%85%E8%B0%88BFC%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%9C%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="一-BFC的概念"><a href="#一-BFC的概念" class="headerlink" title="一. BFC的概念"></a>一. BFC的概念</h3><p>BFC 即 Block Formatting Contexts (块级格式化上下文)，它属于上述布局模式的流动模型。是W3C CSS2.1规范中的一个概念，决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用。</p><blockquote><p>具有BFC特性的元素可以看做是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且BFC具有普通容器所没有的的一些特性。</p></blockquote><p>通俗一点来讲，可以把BFC理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。</p><h3 id="二-BFC的形成条件"><a href="#二-BFC的形成条件" class="headerlink" title="二.BFC的形成条件"></a>二.BFC的形成条件</h3><p>只要元素满足下面任一条件即可触发BFC特性：</p><ul><li>body 根元素</li><li>浮动元素：float 除 none 以外的值</li><li>绝对定位元素：position (absolute、fixed)</li><li>display 为 inline-block、table-cells、flex</li><li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li></ul><h3 id="三-BFC常见的作用"><a href="#三-BFC常见的作用" class="headerlink" title="三.BFC常见的作用"></a>三.BFC常见的作用</h3><h4 id="1-组织外边距重叠"><a href="#1-组织外边距重叠" class="headerlink" title="1.组织外边距重叠"></a>1.组织外边距重叠</h4><p>例：margin塌陷问题：在标准文档流中，块级标签之间竖直方向的margin会以大的为准，这就是margin的塌陷现象。</p><p>可以用overflow：hidden产生bfc来解决。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">div&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background: lightblue;</span><br><span class="line">    margin: 100px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    <img src="https://img-blog.csdn.net/20180521165928794?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RGRjE5OTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>因为两个div元素都处于同一个BFC容器下（这里指body元素），所以第一个div的下边距和第二个div的上边距发生了重叠，所以两个盒子之间距离只有100px，而不是200px。</p><p>首先这不是 CSS 的 bug，我们可以理解为一种规范，如果想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: lightblue;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <img src="https://img-blog.csdn.net/20180521170236501?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RGRjE5OTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><h4 id="2-包含浮动元素"><a href="#2-包含浮动元素" class="headerlink" title="2.包含浮动元素"></a>2.包含浮动元素</h4><p> 例：高度塌陷问题，在通常情况下父元素的高度会被子元素撑开，而在这里因为其子元素为浮动元素所以父元素发生了高度坍塌，上下边界重合，这时就可以用BFC来清除浮动了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border: 1px solid #000;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 100px;background: grey;float: left;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于容器内元素浮动，脱离了文档流，所以容器只剩下2px的边距高度。如果触发容器的BFC，那么容器将会包裹浮动元素。</p><div style="border: 1px solid #000;overflow: hidden"><br>    <div style="width: 100px;height: 100px;background: grey;float: left;"></div><br></div><p>​    </p><h4 id="3、阻止元素被浮动元素覆盖"><a href="#3、阻止元素被浮动元素覆盖" class="headerlink" title="3、阻止元素被浮动元素覆盖"></a>3、阻止元素被浮动元素覆盖</h4><p>  例：div浮动兄弟这该问题：由于左侧块级元素发生了浮动，所以和右侧未发生浮动的块级元素不在同一层内，所以会发生div遮挡问题。可以给右侧元素添加 overflow: hidden，触发BFC来解决遮挡问题。</p><div style="height: 100px;width: 100px;float: left;background: lightblue">我是一个左浮动的元素</div><br><div style="width: 200px; height: 200px;background: grey">我是一个没有设置浮动,<br>也没有触发 BFC 元素, width: 200px; height:200px; background: grey;</div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这时候其实第二个元素有部分被浮动元素所覆盖，但是文本信息不会被浮动元素所覆盖，如果想避免元素被覆盖，可触发第二个元素的BFC特性，在第二个元素中加入overflow：hidden，就会变成：</span><br></pre></td></tr></table></figure><div style="height: 100px;width: 100px;float: left;background: lightblue">我是一个左浮动的元素</div><br><div style="width: 200px; height: 200px;background: grey;overflow:hidden">我是一个没有设置浮动,<br>也没有触发 BFC 元素, width: 200px; height:200px; background: grey;</div><p>​    </p><p>这个方法可以用来实现两列自适应布局，效果不错，这时候左边的宽度固定，右边的内容自适应宽度。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>media与screen的自适应网页布局</title>
      <link href="/passages/media%E4%B8%8Escreen%E7%9A%84%E8%87%AA%E9%80%82%E5%BA%94%E7%BD%91%E9%A1%B5%E5%B8%83%E5%B1%80/"/>
      <url>/passages/media%E4%B8%8Escreen%E7%9A%84%E8%87%AA%E9%80%82%E5%BA%94%E7%BD%91%E9%A1%B5%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="1：设置Meta标签"><a href="#1：设置Meta标签" class="headerlink" title="1：设置Meta标签"></a>1：设置Meta标签</h3><p>首先我们在使用Media的时候需要先设置下面这段代码，来兼容移动设备的展示效果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这段代码的几个参数解释：</p><ul><li>width = device-width：宽度等于当前设备的宽度</li><li>height = device-height：高度等于当前设备的高度</li><li>initial-scale：初始的缩放比例（默认设置为1.0）  </li><li>minimum-scale：允许用户缩放到的最小比例（默认设置为1.0）    </li><li>maximum-scale：允许用户缩放到的最大比例（默认设置为1.0）   </li><li>user-scalable：用户是否可以手动缩放（默认设置为no，因为我们不希望用户放大缩小页面） </li></ul><h3 id="2：加载兼容文件JS"><a href="#2：加载兼容文件JS" class="headerlink" title="2：加载兼容文件JS"></a>2：加载兼容文件JS</h3><p>因为IE8既不支持HTML5也不支持CSS3 Media，所以我们需要加载两个JS文件，来保证我们的代码实现兼容效果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">&lt;script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3：设置IE渲染方式默认为最高-这部分可以选择添加也可以不添加"><a href="#3：设置IE渲染方式默认为最高-这部分可以选择添加也可以不添加" class="headerlink" title="3：设置IE渲染方式默认为最高(这部分可以选择添加也可以不添加)"></a>3：设置IE渲染方式默认为最高(这部分可以选择添加也可以不添加)</h3><p>现在有很多人的IE浏览器都升级到IE9以上了，所以这个时候就有又很多诡异的事情发生了，例如现在是IE9的浏览器，但是浏览器的文档模式却是IE8:</p><p>为了防止这种情况，我们需要下面这段代码来让IE的文档模式永远都是最新的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br></pre></td></tr></table></figure><p> （如果想使用固定的IE版本，可写成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=EmulateIE9"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>）</p><p>除此之外，还有一个更好的写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=Edge，chrome=1"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>怎么这段代码后面加了一个chrome=1，这个<a href="http://zh.wikipedia.org/wiki/Google_Chrome_Frame" target="_blank" rel="noopener">Google Chrome Frame（谷歌内嵌浏览器框架GCF）</a>，如果有的用户电脑里面装了这个chrome的插件，就可以让电脑里面的IE不管是哪个版本的都可以使用Webkit引擎及V8引擎进行排版及运算，如果用户没装这个插件，那这段代码就会让IE以最高的文档模式展现效果。</p><h3 id="CSS3-Media写法"><a href="#CSS3-Media写法" class="headerlink" title="CSS3 Media写法"></a>CSS3 Media写法</h3><p>我们先来看下下面这段代码，估计很多人在响应式的网站CSS很经常看到类似下面的这段代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">960px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个应该算是一个media的一个标准写法，上面这段CSS代码意思是：当页面小于960px的时候执行它下面的CSS.</p><p>应该有人会发现上面这段代码里面有个screen，他的意思是在告知设备在打印页面时使用<a href="http://baike.baidu.com/link?url=FOnnUbOa6X590ao9mYca7Rgz_z5bLBtmMV0qwimHDZIsaZFTC5vztLLlPvOnzCo5hGU5loIN9zhxJDBBRaQeTa" target="_blank" rel="noopener">衬线字体</a>，在屏幕上显示时用无衬线字体。但是目前我发现很多网站都会直接省略screen,因为你的网站可能不需要考虑用户去打印时，你可以直接这样写：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> (max-width: <span class="number">960px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS2-Media用法"><a href="#CSS2-Media用法" class="headerlink" title="CSS2 Media用法"></a>CSS2 Media用法</h3><p>其实并不是只有CSS3才支持Media的用法，早在CSS2开始就已经支持Media，具体用法，就是在HTML页面的head标签中插入如下的一段代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面其实是CSS2实现的衬线用法，那CSS2的media难道就只能支持上面这一个功能吗？答案当然不是，他还有很多用法。</p><p>例如我们想知道现在的移动设备是不是纵向放置的显示屏，可以这样写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen and (orientation:portrait)"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们把第一段的代码也用CSS2来实现，让它一样可以让页面宽度小于960的执行指定的样式文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen and (max-width:960px)"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>既然CSS2可以实现CSS的这个效果为什么不用这个方法呢，很多人应该会问，但是上面这个方法，最大的弊端是他会增加页面http的请求次数，增加了页面负担，我们用CSS3把样式都写在一个文件里面才是最佳的方法。</p><h3 id="回归CSS3-Media"><a href="#回归CSS3-Media" class="headerlink" title="回归CSS3 Media"></a>回归CSS3 Media</h3><p>上面我们大概讲了下CSS2的媒体查询用法，现在我们重新回到CSS3的媒体查询，在第一段代码上面我用的是小于960px的尺寸的写法，那现在我们来实现等于960px尺寸的代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (max-device-width:<span class="number">960px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">background</span>:red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是当浏览器尺寸大于960px时候的代码了：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">960px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">background</span>:orange;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还可以混合使用上面的用法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">960px</span>) and (max-width:<span class="number">1200px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">background</span>:yellow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的这段代码的意思是当页面宽度大于960px小于1200px的时候执行下面的CSS。</p><h3 id="Media所有参数汇总"><a href="#Media所有参数汇总" class="headerlink" title="Media所有参数汇总"></a>Media所有参数汇总</h3><p>以上就是我们最常需要用到的媒体查询器的三个特性，大于，等于，小于的写法。媒体查询器的全部功能肯定不止这三个功能，下面是我总结的它的一些参数用法解释：</p><ul><li>width:浏览器可视宽度。</li><li>height:浏览器可视高度。</li><li>device-width:设备屏幕的宽度。</li><li>device-height:设备屏幕的高度。</li><li>orientation:检测设备目前处于横向还是纵向状态。</li><li>aspect-ratio:检测浏览器可视宽度和高度的比例。(例如：aspect-ratio:16/9)</li><li>device-aspect-ratio:检测设备的宽度和高度的比例。</li><li>color:检测颜色的位数。（例如：min-color:32就会检测设备是否拥有32位颜色）</li><li>color-index:检查设备颜色索引表中的颜色，他的值不能是负数。</li><li>monochrome:检测单色楨缓冲区域中的每个像素的位数。（这个太高级，估计咱很少会用的到）</li><li>resolution:检测屏幕或打印机的分辨率。(例如：min-resolution:300dpi或min-resolution:118dpcm)。</li><li>grid：检测输出的设备是网格的还是位图设备。</li></ul><hr><p>注意下顺序，如果你把@media (min-width: 768px)写在了下面那么很悲剧，</p><p>@media (min-width: 1200){ //&gt;=1200的设备 }</p><p>@media (min-width: 992px){ //&gt;=992的设备 }</p><p>@media (min-width: 768px){ //&gt;=768的设备 }</p><p>因为如果是1440,由于1440&gt;768那么你的1200就会失效。</p><p>所以我们用min-width时，小的放上面大的在下面，同理如果是用max-width那么就是大的在上面，小的在下面</p><p>@media (max-width: 1199){ //&lt;=1199的设备 }</p><p>@media (max-width: 991px){ //&lt;=991的设备 }</p><p>@media (max-width: 767px){ //&lt;=768的设备 }</p><p>1280分辨率以上（大于1200px）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">1200px</span>)&#123;</span><br><span class="line">    <span class="selector-id">#page</span>&#123; <span class="attribute">width</span>: <span class="number">1100px</span>; &#125;<span class="selector-id">#content</span>,<span class="selector-class">.div1</span>&#123;<span class="attribute">width</span>: <span class="number">730px</span>;&#125;<span class="selector-id">#secondary</span>&#123;<span class="attribute">width</span>:<span class="number">310px</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1100分辨率（大于960px，小于1199px）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">960px</span>) and (max-width: <span class="number">1199px</span>) &#123;</span><br><span class="line">    <span class="selector-id">#page</span>&#123; <span class="attribute">width</span>: <span class="number">960px</span>; &#125;<span class="selector-id">#content</span>,<span class="selector-class">.div1</span>&#123;<span class="attribute">width</span>: <span class="number">650px</span>;&#125;<span class="selector-id">#secondary</span>&#123;<span class="attribute">width</span>:<span class="number">250px</span>&#125;<span class="selector-tag">select</span>&#123;<span class="attribute">max-width</span>:<span class="number">200px</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>880分辨率（大于768px，小于959px）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">768px</span>) and (max-width: <span class="number">959px</span>) &#123;</span><br><span class="line">    <span class="selector-id">#page</span>&#123; <span class="attribute">width</span>: <span class="number">900px</span>; &#125;<span class="selector-id">#content</span>,<span class="selector-class">.div1</span>&#123;<span class="attribute">width</span>: <span class="number">620px</span>;&#125;<span class="selector-id">#secondary</span>&#123;<span class="attribute">width</span>:<span class="number">220px</span>&#125;<span class="selector-tag">select</span>&#123;<span class="attribute">max-width</span>:<span class="number">180px</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>720分辨率（大于480px，小于767px）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">480px</span>) and (max-width: <span class="number">767px</span>)&#123;</span><br><span class="line">    <span class="selector-id">#page</span>&#123; <span class="attribute">width</span>: <span class="number">450px</span>; &#125;<span class="selector-id">#content</span>,<span class="selector-class">.div1</span>&#123;<span class="attribute">width</span>: <span class="number">420px</span>;<span class="attribute">position</span>: relative; &#125;<span class="selector-id">#secondary</span>&#123;<span class="attribute">display</span>:none&#125;<span class="selector-id">#access</span>&#123;<span class="attribute">width</span>: <span class="number">450px</span>; &#125;<span class="selector-id">#access</span> <span class="selector-tag">a</span> &#123;<span class="attribute">padding-right</span>:<span class="number">5px</span>&#125;<span class="selector-id">#access</span> <span class="selector-tag">a</span> <span class="selector-tag">img</span>&#123;<span class="attribute">display</span>:none&#125;<span class="selector-id">#rss</span>&#123;<span class="attribute">display</span>:none&#125;<span class="selector-id">#branding</span> <span class="selector-id">#s</span>&#123;<span class="attribute">display</span>:none&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>440分辨率以下（小于479px）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">479px</span>) &#123;</span><br><span class="line">    <span class="selector-id">#page</span>&#123; <span class="attribute">width</span>: <span class="number">300px</span>; &#125;<span class="selector-id">#content</span>,<span class="selector-class">.div1</span>&#123;<span class="attribute">width</span>: <span class="number">300px</span>;&#125;<span class="selector-id">#secondary</span>&#123;<span class="attribute">display</span>:none&#125;<span class="selector-id">#access</span>&#123;<span class="attribute">width</span>: <span class="number">330px</span>;&#125; <span class="selector-id">#access</span> <span class="selector-tag">a</span> &#123;<span class="attribute">padding-right</span>:<span class="number">10px</span>;<span class="attribute">padding-left</span>:<span class="number">10px</span>&#125;<span class="selector-id">#access</span> <span class="selector-tag">a</span> <span class="selector-tag">img</span>&#123;<span class="attribute">display</span>:none&#125;<span class="selector-id">#rss</span>&#123;<span class="attribute">display</span>:none&#125;<span class="selector-id">#branding</span> <span class="selector-id">#s</span>&#123;<span class="attribute">display</span>:none&#125;<span class="selector-id">#access</span> <span class="selector-tag">ul</span> <span class="selector-tag">ul</span> <span class="selector-tag">a</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 竖屏 */</span></span><br><span class="line">@<span class="keyword">media</span> screen and (orientation: portrait) and (max-width: <span class="number">720px</span>) &#123; 对应样式 &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 横屏 */</span></span><br><span class="line">@<span class="keyword">media</span> screen and (orientation: landscape) &#123; 对应样式 &#125;</span><br></pre></td></tr></table></figure><p>上面的代码中用到了screen ，他的意思是在告知设备在打印页面时使用<a href="http://baike.baidu.com/link?url=FOnnUbOa6X590ao9mYca7Rgz_z5bLBtmMV0qwimHDZIsaZFTC5vztLLlPvOnzCo5hGU5loIN9zhxJDBBRaQeTa" target="_blank" rel="noopener">衬线字体</a>，在屏幕上显示时用无衬线字体。但是目前我发现很多网站都会直接省略screen,因为你的网站可能不需要考虑用户去打印时。</p><p>PC端按屏幕宽度大小排序</p><p>分辨率   比例 | 设备尺寸</p><p>1024<em>500 （8.9寸）<br>1024</em>768 （比例4：3  | 10.4寸、12.1寸、14.1寸、15寸; ）<br>1280<em>800（16：10  |15.4寸）<br>1280</em>1024(比例：5：4  | 14.1寸、15.0寸)<br>1280<em>854(比例：15：10 | 15.2）<br>1366</em>768 (比例：16：9 | 不常见）<br>1440<em>900 （16：10  17寸 仅苹果用）<br>1440</em>1050（比例：5：4  | 14.1寸、15.0寸）<br>1600<em>1024（14：9  不常见）<br>1600</em>1200 （4：3 | 15、16.1）<br>1680<em>1050（16：10 | 15.4寸、20.0寸）<br>1920</em>1200 (23寸）</p><p>通过上面的电脑屏蔽及尺寸的例表上我们得到了几个宽度<br>1024  1280  1366  1440  1680  1920  </p><p>CSS代码</p><p>@media (min-width: 1024px){<br>  body{font-size: 18px}<br>} /<em>&gt;=1024的设备</em>/<br>@media (min-width: 1100px) {<br>  body{font-size: 20px}<br>} /<em>&gt;=1024的设备</em>/<br>@media (min-width: 1280px) {<br>  body{font-size: 22px;}<br>}<br>@media (min-width: 1366px) {<br>  body{font-size: 24px;}<br>}<br>@media (min-width: 1440px) {<br>  body{font-size: 25px !important;}<br>}<br>@media (min-width: 1680px) {<br>  body{font-size: 28px;}<br>}<br>@media (min-width: 1920px) {<br>  body{font-size: 33px;}<br>} </p><p><img src="https://img-blog.csdn.net/20170109135106984?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSW51eWFzaGExMTIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery复习</title>
      <link href="/passages/jQuery%E5%A4%8D%E4%B9%A0/"/>
      <url>/passages/jQuery%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="一-选择器"><a href="#一-选择器" class="headerlink" title="一.选择器"></a>一.选择器</h2><h3 id="1-1-基本选择器"><a href="#1-1-基本选择器" class="headerlink" title="1.1 基本选择器"></a>1.1 基本选择器</h3><p>#id      id选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&apos;one&apos;&gt;AAA&lt;/div&gt;</span><br><span class="line">$(&quot;#one&quot;).css(&quot;background-color&quot;,&quot;red&quot;);</span><br></pre></td></tr></table></figure><p>element    标签选择器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;BBB&lt;/</span>div&gt;</span><br><span class="line">$(<span class="string">"div"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>.class     类选择器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">'mini'</span>&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$(".mini").css("background-color","blue");</span></span><br></pre></td></tr></table></figure><p>*     所有元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;span&gt;bbb&lt;/</span>span&gt;</span><br><span class="line">&lt;h1&gt;ccc&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">$("*").css("background-color","green");</span></span><br></pre></td></tr></table></figure><p>s1,s2,…  多选择器，将多个选择器的结果添加一个数组中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">'mini'</span>&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id='two'&gt;BBB&lt;/</span>div&gt;</span><br><span class="line">&lt;span&gt;CCC&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">$("span,#two,.mini").css("background-color","brown");</span></span><br></pre></td></tr></table></figure><h3 id="1-2-层级选择器"><a href="#1-2-层级选择器" class="headerlink" title="1.2 层级选择器"></a>1.2 层级选择器</h3><p>A  B  ，获得A元素内部所有的B元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">'mini'</span>&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">$(<span class="string">"body div"</span>).css(<span class="string">"background-color"</span>, <span class="string">"red"</span>);</span><br></pre></td></tr></table></figure><p>A &gt; B ，获得A元素内部所有的B子元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;BBB&lt;/</span>div&gt;</span><br><span class="line">&lt;span&gt;CCC&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">$(<span class="string">"body &gt; div"</span>).css(<span class="string">"background-color"</span>, <span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>A + B ，获得A元素后面的第一个兄弟B</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;BBB&lt;/</span>div&gt;</span><br><span class="line">$(<span class="string">"div + div"</span>).css(<span class="string">"background-color"</span>, <span class="string">"blue"</span>);</span><br></pre></td></tr></table></figure><p>A ~ B ，获得A元素后面的所有的兄弟B</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;AAA&lt;/div&gt;</span><br><span class="line">&lt;span&gt;BBB&lt;/span&gt;</span><br><span class="line">&lt;span&gt;ccc&lt;/span&gt;</span><br><span class="line">&lt;span&gt;ddd&lt;/span&gt;</span><br><span class="line">&lt;div&gt;eee&lt;/div&gt;</span><br><span class="line">$(&quot;div ~ span&quot;).css(&quot;background-color&quot;, &quot;green&quot;);</span><br></pre></td></tr></table></figure><p>A.siblings(“B”)，A的所有是B的兄弟</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;BBB&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;AAA&lt;/</span>div&gt;</span><br><span class="line">&lt;span&gt;ccc&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;span&gt;ddd&lt;/</span>span&gt;</span><br><span class="line">$(<span class="string">"div"</span>).siblings(<span class="string">"span"</span>).css(<span class="string">"background-color"</span>, <span class="string">"brown"</span>);</span><br></pre></td></tr></table></figure><h3 id="1-3-基本过滤选择器"><a href="#1-3-基本过滤选择器" class="headerlink" title="1.3 基本过滤选择器"></a>1.3 基本过滤选择器</h3><blockquote><p>过滤选择器都有 :</p></blockquote><p>:first         选中第一个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;BBB&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;CCC&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$("div:first").css("background-color", "red");</span></span><br></pre></td></tr></table></figure><p>:last         选中最后一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;BBB&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;CCC&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$("div:last").css("background-color", "yellow");</span></span><br></pre></td></tr></table></figure><p>:eq(index)    获得指定索引(从0开始)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;BBB&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;CCC&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$("div:eq(2)").css("background-color", "blue");</span></span><br></pre></td></tr></table></figure><p>:gt(index)    大于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;BBB&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;CCC&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$("div:gt(1)").css("background-color", "red");</span></span><br></pre></td></tr></table></figure><p>:lt(index)    小于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;BBB&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;CCC&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$("div:lt(1)").css("background-color", "green");</span></span><br></pre></td></tr></table></figure><p>:animated     获得所有在动画的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">":animated"</span>).css(<span class="string">"background-color"</span>, <span class="string">"green"</span>);</span><br></pre></td></tr></table></figure><p>:not(selector) 去除所有与给定选择器匹配的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"one"</span>&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class="two"&gt;BBB&lt;/</span>div&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"three"</span>&gt;CCC&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"> $("div:not('.one')").css("background-color", "blue");</span></span><br></pre></td></tr></table></figure><p>:header     获得所有标题元素    例如：</p><h1>…<h6><p></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;h1&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;h2&gt;h2&lt;/</span>h2&gt;</span><br><span class="line">&lt;h3&gt;h3&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">$(":header").css("background-color", "green").css("font-size","30px");</span></span><br></pre></td></tr></table></figure><p>:even      偶数，从 0 开始计数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;BBB&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;CCC&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;DDD&lt;/</span>div&gt;</span><br><span class="line">$(<span class="string">"div:even"</span>).css(<span class="string">"background-color"</span>, <span class="string">"brown"</span>);</span><br></pre></td></tr></table></figure><p>:odd       奇数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;AAA&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;BBB&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;CCC&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;DDD&lt;/</span>div&gt;</span><br><span class="line">$(<span class="string">"div:odd"</span>).css(<span class="string">"background-color"</span>, <span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><h3 id="1-4-内容过滤选择器"><a href="#1-4-内容过滤选择器" class="headerlink" title="1.4 内容过滤选择器"></a>1.4 内容过滤选择器</h3><blockquote><p>均要加冒号</p></blockquote><p>:empty  当前元素是否为空（是否有标签体–子元素、文本）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;DDD&lt;/</span>div&gt;</span><br><span class="line">$(<span class="string">"div:empty"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>:has(…)  当前元素，是否含有指定的子元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;DDD&lt;/</span>div&gt;</span><br><span class="line">$(<span class="string">"div:has('span')"</span>).css(<span class="string">"background-color"</span>,<span class="string">"blue"</span>);</span><br></pre></td></tr></table></figure><p>:parent    当前元素是否是父元素（自己是否拥有子元素）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;DDD&lt;/</span>div&gt;</span><br><span class="line">$(<span class="string">"div:parent"</span>).css(<span class="string">"background-color"</span>,<span class="string">"green"</span>);</span><br></pre></td></tr></table></figure><p>:contains( text ) 标签体是否含有指定的文本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;aaa&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;bbb&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;ddd&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$("div:contains('d')").css("background-color","red");</span></span><br></pre></td></tr></table></figure><h3 id="1-5-可见性过滤选择器"><a href="#1-5-可见性过滤选择器" class="headerlink" title="1.5 可见性过滤选择器"></a>1.5 可见性过滤选择器</h3><p>:hidden        隐藏。特指 <code>&lt;xxx style=&quot;display:none;&quot;&gt;</code> 或者 <code>&lt;input type=&quot;hidden&quot;&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">"display:none"</span>&gt;aaa&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;bbb&lt;/</span>div&gt;</span><br><span class="line">&lt;input type=<span class="string">"hidden"</span>&gt;</span><br><span class="line">$(<span class="string">"div:hidden"</span>).show(<span class="number">1000</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>:visible    可见（默认）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">"display:none"</span>&gt;aaa&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;bbb&lt;/</span>div&gt;</span><br><span class="line">&lt;input type=<span class="string">"hidden"</span>&gt;</span><br><span class="line">$(<span class="string">"div:visible"</span>).css(<span class="string">"background-color"</span>,<span class="string">"red"</span>);</span><br></pre></td></tr></table></figure><h3 id="1-6-属性选择器"><a href="#1-6-属性选择器" class="headerlink" title="1.6 属性选择器"></a>1.6 属性选择器</h3><p>[属性名]                 获得指定的属性名的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div title=<span class="string">'aaa'</span>&gt;aaa&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;bbb&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;ddd&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$("div[title]").css("background-color","red");</span></span><br></pre></td></tr></table></figure><p>[属性名=值]                获得属性名 等于 指定值的 的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div title=<span class="string">'aaa'</span>&gt;aaa&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;bbb&lt;/</span>div&gt;</span><br><span class="line">&lt;div title=<span class="string">'test'</span>&gt;ddd&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$("div[title='test']").css("background-color","blue");</span></span><br></pre></td></tr></table></figure><p>[属性名!=值]            获得属性名 不等于 指定值的 的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div title=<span class="string">'aaa'</span>&gt;aaa&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div title='test'&gt;ddd&lt;/</span>div&gt;</span><br><span class="line"> $(<span class="string">"div[title!='test']"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>[as1][as2][as3]….        复合选择器，多个条件同时成立。类似 where …and…and</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div title=<span class="string">'aes'</span> id=<span class="string">"aaa"</span>&gt;aaa&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div &gt;bbb&lt;/</span>div&gt;</span><br><span class="line">&lt;div title=<span class="string">'test'</span> id=<span class="string">'ddd'</span>&gt;ddd&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$("div[id][title*='es']").css("background-color","red");</span></span><br></pre></td></tr></table></figure><p>[属性名^=值]            获得以属性值 开头 的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div title=<span class="string">'test'</span>&gt;aaa&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div title='teve'&gt;bbb&lt;/</span>div&gt;</span><br><span class="line">&lt;div title=<span class="string">'txt'</span>&gt;ddd&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$("div[title^='te']").css("background-color","green");</span></span><br></pre></td></tr></table></figure><p>[属性名$=值]            获得以属性值 结尾 的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div title=<span class="string">'test'</span>&gt;aaa&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div title='teve'&gt;bbb&lt;/</span>div&gt;</span><br><span class="line">&lt;div title=<span class="string">'txt'</span>&gt;ddd&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$("div[title$='est']").css("background-color","brown");</span></span><br></pre></td></tr></table></figure><p>[属性名*=值]            获得 含有属性值  的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div title=<span class="string">'test'</span>&gt;aaa&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div title='teve'&gt;bbb&lt;/</span>div&gt;</span><br><span class="line">&lt;div title=<span class="string">'txt'</span>&gt;ddd&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">$("div[title*='es']").css("background-color","yellow");</span></span><br></pre></td></tr></table></figure><h3 id="1-7-元素过滤选择器"><a href="#1-7-元素过滤选择器" class="headerlink" title="1.7 元素过滤选择器"></a>1.7 元素过滤选择器</h3><p>:nth-child(n)     第n个孩子(从1开始)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">$("body :nth-child(2)").css("background-color","yellow");</span></span><br></pre></td></tr></table></figure><p>:first-child   第一个孩子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line"> &lt;span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"> &lt;span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"> &lt;span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/注意空格的区别</span></span><br><span class="line"><span class="regexp">$("div :first-chlid").css("background-color","yellow");/</span><span class="regexp">/div里面的元素的第一个</span></span><br><span class="line"><span class="regexp">$("div:first-chlid").css("background-color","yellow");/</span><span class="regexp">/div的第一个</span></span><br></pre></td></tr></table></figure><p>:last-child    最后一个孩子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line"> &lt;span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"> &lt;span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"> &lt;span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/注意空格的区别</span></span><br><span class="line"><span class="regexp">$("div :last-chlid").css("background-color","yellow");/</span><span class="regexp">/div里面的元素的最后一个</span></span><br><span class="line"><span class="regexp">$("div:last-chlid").css("background-color","yellow");/</span><span class="regexp">/div的最后一个</span></span><br></pre></td></tr></table></figure><p>:only-child    仅有一个孩子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line"> &lt;span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"> &lt;span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">$("div :last-chlid").css("background-color","yellow");</span></span><br></pre></td></tr></table></figure><h3 id="1-8-表单过滤选择器"><a href="#1-8-表单过滤选择器" class="headerlink" title="1.8 表单过滤选择器"></a>1.8 表单过滤选择器</h3><p>:input           所有的表单元素。<code>&lt;input&gt; / &lt;select&gt; / &lt;textarea&gt; / &lt;button&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input&gt;</span><br><span class="line">&lt;select&gt;<span class="xml"><span class="tag">&lt;<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line">&lt;textarea&gt;<span class="xml"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line">&lt;button&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">$(<span class="string">":input"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>:text            文本框<code>&lt;input type=&quot;text&quot;&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span>&gt;</span><br><span class="line">$(<span class="string">":text"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>:password        密码框<code>&lt;input type=&quot; password &quot;&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"password"</span>&gt;</span><br><span class="line">$(<span class="string">":password"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>:radio            单选<code>&lt;input type=&quot;radio&quot;&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"Fruit"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span>苹果 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span> </span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"Fruit"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span>桃子 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span> </span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"Fruit"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span>香蕉 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span> </span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"Fruit"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span>梨 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span> </span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"Fruit"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span>其它 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span> </span><br><span class="line">&lt;input type=<span class="string">"radio"</span>&gt;</span><br><span class="line">$(<span class="string">":radio"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>:checkbox        复选框<code>&lt;input type=&quot;checkbox&quot;&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"今日话题"</span> /&gt;</span>今日话题 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>   </span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"视觉焦点"</span> /&gt;</span>视觉焦点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"财经"</span> /&gt;</span>财经<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>    </span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"汽车"</span> /&gt;</span>汽车<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>    </span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"科技"</span> /&gt;</span>科技<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>    </span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"房产"</span> /&gt;</span>房产<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>    </span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"旅游"</span> /&gt;</span>旅游<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span>&gt;</span><br><span class="line">$(<span class="string">":checkbox"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>:submit            提交按钮<code>&lt;input type=&quot;submit&quot;&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">$(<span class="string">":submit"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>:image            图片按钮<code>&lt;input type=&quot;image&quot; src=&quot;&quot;&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"image"</span> src=<span class="string">""</span>&gt;</span><br><span class="line">$(<span class="string">":image"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>:reset            重置按钮<code>&lt;input type=&quot;reset&quot;&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;reset&quot; src=&quot;&quot;&gt;</span><br><span class="line">$(&quot;:reset&quot;).css(&quot;background-color&quot;,&quot;yellow&quot;);</span><br></pre></td></tr></table></figure><p>:file            文件上传<code>&lt;input type=&quot;file&quot;&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"file"</span>&gt;</span><br><span class="line">$(<span class="string">":file"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>:hidden            隐藏域<code>&lt;input type=&quot;hidden&quot;&gt;</code> ,还可以获得<code>&lt;xxx style=&quot;display:none&quot;&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"hidden"</span>&gt;</span><br><span class="line">&lt;div style=<span class="string">"display:none"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">$(<span class="string">":hidden"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>:button            所有普通按钮。<code>&lt;button &gt;</code> 或 <code>&lt;input type=&quot;button&quot;&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button &gt;button&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;input type="button"&gt;</span></span><br><span class="line"><span class="regexp">$(":button").css("background-color","yellow");</span></span><br></pre></td></tr></table></figure><p>select           下拉列表  (没有:号）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select&gt;</span><br><span class="line">  &lt;option value =<span class="string">"volvo"</span>&gt;Volvo&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">  &lt;option value ="saab"&gt;Saab&lt;/</span>option&gt;</span><br><span class="line">  &lt;option value=<span class="string">"opel"</span>&gt;Opel&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">  &lt;option value="audi"&gt;Audi&lt;/</span>option&gt;</span><br><span class="line">&lt;<span class="regexp">/select&gt;</span></span><br><span class="line"><span class="regexp">$("select").css("background-color","yellow");</span></span><br></pre></td></tr></table></figure><p>textarea         多行文本框（没有:号）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea&gt;<span class="xml"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line">$(<span class="string">"textarea"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><h3 id="1-9-表单独享属性过滤选择器"><a href="#1-9-表单独享属性过滤选择器" class="headerlink" title="1.9 表单独享属性过滤选择器"></a>1.9 表单独享属性过滤选择器</h3><p>:enabled        可用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">'text'</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">'text'</span> disabled=<span class="string">"disabled"</span>&gt;</span><br><span class="line">$(<span class="string">"input:enabled"</span>).val(<span class="string">"aaaa"</span>);</span><br></pre></td></tr></table></figure><p>:disabled        不可用。<code>&lt;xxx disabled=&quot;disabled&quot;&gt;</code> 或<code>&lt;xxx disabled=&quot;&quot;&gt;</code> 或<code>&lt;xxx disabled&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">'text'</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">'text'</span> disable=<span class="string">""</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">'text'</span> disable&gt;</span><br><span class="line">&lt;input type=<span class="string">'text'</span> disabled=<span class="string">"disabled"</span>&gt;</span><br><span class="line">$(<span class="string">"input:disabled"</span>).val(<span class="string">"bbbb"</span>);</span><br></pre></td></tr></table></figure><p>:checked        选中（单选框radio、复选框 checkbox）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"今日话题"</span> /&gt;</span>今日话题 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>   </span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"视觉焦点"</span> /&gt;</span>视觉焦点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"财经"</span> /&gt;</span>财经<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>    </span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"汽车"</span> <span class="attr">checked</span>=<span class="string">""</span>/&gt;</span>汽车<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>    </span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"科技"</span> /&gt;</span>科技<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>    </span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"房产"</span> /&gt;</span>房产<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>    </span><br><span class="line">&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">value</span>=<span class="string">"旅游"</span> /&gt;</span>旅游<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"Fruit"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span>  <span class="attr">checked</span>=<span class="string">""</span>/&gt;</span>苹果 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span> </span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"Fruit"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span>桃子 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span> </span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"Fruit"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span>香蕉 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span> </span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"Fruit"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span>梨 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span> </span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"Fruit"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span>其它 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span> </span><br><span class="line"></span><br><span class="line">$(<span class="string">":checked"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</span><br></pre></td></tr></table></figure><p>:selected        选择（下拉列表 select option）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select&gt;</span><br><span class="line">  &lt;option value =<span class="string">"volvo"</span> selected=<span class="string">""</span>&gt;Volvo&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">  &lt;option value ="saab"&gt;Saab&lt;/</span>option&gt;</span><br><span class="line">  &lt;option value=<span class="string">"opel"</span>&gt;Opel&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">  &lt;option value="audi"&gt;Audi&lt;/</span>option&gt;</span><br><span class="line">&lt;<span class="regexp">/select&gt;</span></span><br><span class="line"><span class="regexp">$("selected").css("background-color","yellow");</span></span><br></pre></td></tr></table></figure><h2 id="二-jQuery属性和CSS"><a href="#二-jQuery属性和CSS" class="headerlink" title="二.jQuery属性和CSS"></a>二.jQuery属性和CSS</h2><h3 id="2-1-属性操作"><a href="#2-1-属性操作" class="headerlink" title="2.1 属性操作"></a>2.1 属性操作</h3><p>attr()</p><p>设置单个属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img title=<span class="string">""</span>&gt;</span><br><span class="line">$(<span class="string">'img'</span>).attr(<span class="string">'title'</span>,<span class="string">'哎哟，不错哦'</span>);</span><br></pre></td></tr></table></figure><p>设置多个属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;img title=<span class="string">""</span> alt=<span class="string">""</span> &gt;</span><br><span class="line">$(<span class="string">'img'</span>).attr(&#123;</span><br><span class="line">    title:<span class="string">'image'</span>,</span><br><span class="line">    alt:<span class="string">'缺省'</span>,</span><br><span class="line">    style:<span class="string">'opacity:.5'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>获取属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img title=<span class="string">"images"</span> alt=<span class="string">""</span> &gt;</span><br><span class="line"><span class="keyword">var</span> oTitle = $(<span class="string">'img'</span>).attr(<span class="string">'title'</span>);</span><br></pre></td></tr></table></figure><p>removeattr()</p><p>移除属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img title=<span class="string">"images"</span> alt=<span class="string">""</span> &gt;</span><br><span class="line">$(<span class="string">'img'</span>).removeAttr(<span class="string">'title'</span>);</span><br></pre></td></tr></table></figure><p>prop()</p><blockquote><p>在jQuery1.6之后，对于checked、selected、disabled这类boolean类型的属性来说，不能用attr方法，只能用prop方法。</p></blockquote><p>设置和获取属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"Fruit"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span>  <span class="attr">checked</span>=<span class="string">""</span>/&gt;</span>苹果 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span> </span><br><span class="line"><span class="comment">// 设置属性</span></span><br><span class="line">$(<span class="string">':checked'</span>).prop(<span class="string">'checked'</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 获取属性</span></span><br><span class="line">$(<span class="string">':checked'</span>).prop(<span class="string">'checked'</span>);<span class="comment">// 返回true或者false</span></span><br></pre></td></tr></table></figure><p>val()/text()/html()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$obj.val()获取或者设置表单元素的value属性的值</span><br><span class="line">$obj.html() 对应innerHTML</span><br><span class="line">$obj.text()对应innerText/textContent，处理了浏览器的兼容性。注意点：如果获取jquery对象text属性的时候jquery对象是一个数组，那么此时会把数组中所有元素的文本都获取到</span><br></pre></td></tr></table></figure><h3 id="2-2-CSS操作"><a href="#2-2-CSS操作" class="headerlink" title="2.2 CSS操作"></a>2.2 CSS操作</h3><p>css()</p><blockquote><p>css(name)  获得指定名称的css值<br>css(name ,value) 设置一对值<br>css(prop) 设置一组值</p></blockquote><p>操作单个样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">$(<span class="string">"div"</span>).css(<span class="string">"border"</span>,<span class="string">"1px solid red"</span>);</span><br></pre></td></tr></table></figure><p>操作多个样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">$(<span class="string">"div"</span>).css(&#123;</span><br><span class="line">    <span class="string">"width"</span>:<span class="string">"300px"</span>,</span><br><span class="line">    <span class="string">"height"</span>:<span class="string">"50px"</span>,</span><br><span class="line">    <span class="string">"font-size"</span>:<span class="string">"60px"</span>,</span><br><span class="line">    <span class="string">"color"</span>:<span class="string">"blue"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>获取样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">'background-color:'</span>red<span class="string">'&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">$('</span>div<span class="string">').css('</span>background-color<span class="string">');</span></span><br></pre></td></tr></table></figure><blockquote><ol><li>设置样式操作的时候，如果是多个元素，那么给所有的元素设置相同的值</li><li>获取样式操作的时候，如果是多个元素，那么只会返回第一个元素的值。</li></ol></blockquote><p>class类操作</p><blockquote><p>addClass(“A”)     追加一个类<br>removeClass(“A”)  将指定类移除<br>toggleClass(“A”)  如果有A将移除，如果没有将添加。<br>hasClass(“A”)     用于判断是否含有指定样式，返回值为true false</p></blockquote><h2 id="三-jQuery尺寸和位置操作"><a href="#三-jQuery尺寸和位置操作" class="headerlink" title="三. jQuery尺寸和位置操作"></a>三. jQuery尺寸和位置操作</h2><h3 id="3-1-CSS尺寸"><a href="#3-1-CSS尺寸" class="headerlink" title="3.1 CSS尺寸"></a>3.1 CSS尺寸</h3><blockquote><p>height() 获得 或 设置 高度    //不包括内边距、边框和外边距<br>width()获得 或 设置 宽度</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">"height:100px;width:110px"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">$(<span class="string">"div"</span>).css(<span class="string">"border"</span>,<span class="string">"1px solid red"</span>);</span><br><span class="line">alert($(<span class="string">"div"</span>).height()); <span class="comment">//数字类型</span></span><br><span class="line">alert($(<span class="string">"div"</span>).width());</span><br><span class="line">$(<span class="string">"div"</span>).height(<span class="string">"300px"</span>); <span class="comment">//设置高度，值可以是数字也可以是字符串</span></span><br></pre></td></tr></table></figure><p>获取可视区宽高度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取可视区宽度</span></span><br><span class="line">$(<span class="built_in">window</span>).width();</span><br><span class="line"><span class="comment">// 获取可视区高度</span></span><br><span class="line">$(<span class="built_in">window</span>).height();</span><br></pre></td></tr></table></figure><blockquote><p>css获取到的宽高是带 px 的,需要数值则需要用parseInt()转换</p><p>css设置样式可不加px</p></blockquote><h3 id="3-2-innerWidth-outerWidth"><a href="#3-2-innerWidth-outerWidth" class="headerlink" title="3.2 innerWidth/outerWidth"></a>3.2 innerWidth/outerWidth</h3><blockquote><p>innerWidth()/innerHeight()    方法返回元素的宽度/高度（包括内边距）。 —&gt;clientWidth<br>outerWidth()/outerHeight()  方法返回元素的宽度/高度（包括内边距和边框）。 —&gt;offsetWidth<br>outerWidth(true)/outerHeight(true)  方法返回元素的宽度/高度（包括内边距、边框和外边距）。</p></blockquote><h3 id="3-3-scrollTop与scrollLeft"><a href="#3-3-scrollTop与scrollLeft" class="headerlink" title="3.3 scrollTop与scrollLeft"></a>3.3 scrollTop与scrollLeft</h3><p>获取页面滚出的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取页面被滚出的高度</span></span><br><span class="line">$(<span class="built_in">window</span>).scrollTop();</span><br><span class="line"><span class="comment">// 获取页面被滚出的宽度</span></span><br><span class="line">$(<span class="built_in">window</span>).scrollLeft();</span><br></pre></td></tr></table></figure><h3 id="3-4-offset方法与position方法"><a href="#3-4-offset方法与position方法" class="headerlink" title="3.4 offset方法与position方法"></a>3.4 offset方法与position方法</h3><p>offset()</p><p>offset方法获取元素距离document的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取元素距离document的位置,返回值为对象：&#123;left:100, top:100&#125;</span></span><br><span class="line">$(selector).offset();</span><br><span class="line"><span class="comment">//设置位置</span></span><br><span class="line">$(<span class="string">"div"</span>).offset(&#123;<span class="string">"top"</span>:<span class="number">0</span>,<span class="string">"left"</span>:<span class="number">0</span>&#125;);<span class="comment">//不用加px</span></span><br></pre></td></tr></table></figure><p>position方法获取的是元素距离第一个定位了的父元素(offsetParent)的位置</p><p>获取相对于其最近的有定位的父元素的位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// position仅用于获取当前元素相对于父元素的位置，不可以设置。如果非要设置，需要引入jquery-ui.js</span><br><span class="line">$(selector).position();</span><br></pre></td></tr></table></figure><h2 id="四-jQuery文档处理"><a href="#四-jQuery文档处理" class="headerlink" title="四.jQuery文档处理"></a>四.jQuery文档处理</h2><h3 id="4-1-创建节点"><a href="#4-1-创建节点" class="headerlink" title="4.1 创建节点"></a>4.1 创建节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'&lt;span&gt;这是一个span元素&lt;/span&gt;'</span>);</span><br></pre></td></tr></table></figure><h3 id="4-2-内部插入-不可重复插入"><a href="#4-2-内部插入-不可重复插入" class="headerlink" title="4.2 内部插入(不可重复插入)"></a>4.2 内部插入(不可重复插入)</h3><p>第一种方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">A.append(B)  将B插入到A的内部后面（之后的串联操作，操作A）</span><br><span class="line">&lt;A&gt;</span><br><span class="line">&lt;C&gt;<span class="xml"><span class="tag">&lt;/<span class="name">C</span>&gt;</span></span></span><br><span class="line">&lt;C&gt;<span class="xml"><span class="tag">&lt;/<span class="name">C</span>&gt;</span></span></span><br><span class="line">&lt;C&gt;<span class="xml"><span class="tag">&lt;/<span class="name">C</span>&gt;</span></span></span><br><span class="line">&lt;B&gt;<span class="xml"><span class="tag">&lt;/<span class="name">B</span>&gt;</span></span></span><br><span class="line">&lt;A&gt;</span><br><span class="line"></span><br><span class="line">A.prepend(B) 将B插入到A的内部前面</span><br><span class="line">&lt;A&gt;</span><br><span class="line">&lt;B&gt;<span class="xml"><span class="tag">&lt;/<span class="name">B</span>&gt;</span></span></span><br><span class="line">&lt;C&gt;<span class="xml"><span class="tag">&lt;/<span class="name">C</span>&gt;</span></span></span><br><span class="line">&lt;C&gt;<span class="xml"><span class="tag">&lt;/<span class="name">C</span>&gt;</span></span></span><br><span class="line">&lt;C&gt;<span class="xml"><span class="tag">&lt;/<span class="name">C</span>&gt;</span></span></span><br><span class="line">&lt;A&gt;</span><br></pre></td></tr></table></figure><p>第二种方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">A.appendTo(B) 将A插入到B的内部后面 （之后的串联操作，操作A）</span><br><span class="line">&lt;A&gt;</span><br><span class="line">&lt;C&gt;<span class="xml"><span class="tag">&lt;/<span class="name">C</span>&gt;</span></span></span><br><span class="line">&lt;C&gt;<span class="xml"><span class="tag">&lt;/<span class="name">C</span>&gt;</span></span></span><br><span class="line">&lt;C&gt;<span class="xml"><span class="tag">&lt;/<span class="name">C</span>&gt;</span></span></span><br><span class="line">&lt;B&gt;<span class="xml"><span class="tag">&lt;/<span class="name">B</span>&gt;</span></span></span><br><span class="line">&lt;A&gt;</span><br><span class="line"></span><br><span class="line">A.prependTo(B) 将A插入到B的内部前面</span><br><span class="line">&lt;B&gt;</span><br><span class="line">&lt;A&gt;<span class="xml"><span class="tag">&lt;/<span class="name">A</span>&gt;</span></span></span><br><span class="line">....</span><br><span class="line">&lt;B&gt;</span><br></pre></td></tr></table></figure><h3 id="4-3-外部插入"><a href="#4-3-外部插入" class="headerlink" title="4.3 外部插入"></a>4.3 外部插入</h3><p>第一种方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A.insertAfter(B) , 将A插入到B后面（同级）</span><br><span class="line">......</span><br><span class="line">&lt;B&gt;&lt;/B&gt;</span><br><span class="line">&lt;A&gt;&lt;/A&gt;</span><br><span class="line">A.insertBefore(B) 将A插入到B前面</span><br><span class="line">&lt;A&gt;&lt;/A&gt;</span><br><span class="line">&lt;B&gt;&lt;/B&gt;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>第二种方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A.after(B)  , 将B插入到A后面（同级）</span><br><span class="line">......</span><br><span class="line">&lt;A&gt;&lt;/A&gt;</span><br><span class="line">&lt;B&gt;&lt;/B&gt;</span><br><span class="line">A.before(B) ，将B插入到A前面</span><br><span class="line">&lt;B&gt;&lt;/B&gt;</span><br><span class="line">&lt;A&gt;&lt;/A&gt;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h3 id="4-4-删除节点"><a href="#4-4-删除节点" class="headerlink" title="4.4 删除节点"></a>4.4 删除节点</h3><blockquote><p>empty()  清空标签体（清空文本节点和子节点）,自身保留(清理门户),会清除子元素上绑定的内容<br>remove() 删除当前对象。如果之后再使用，元素本身保留，绑定事件 或 绑定数据 都会被移除<br>detach() 删除当前对象。如果之后再使用，元素本身保留，绑定事件 或 绑定数据 都保留</p></blockquote><p>注意:$(‘div’).html(‘’);// 使用html方法来清空元素，不推荐使用，会造成内存泄漏，绑定的事件不会被清除。</p><h3 id="4-5-复制节点"><a href="#4-5-复制节点" class="headerlink" title="4.5 复制节点"></a>4.5 复制节点</h3><p>clone(even)</p><p>even ：指示事件处理函数是否会被复制。V1.5以上版本默认值是：false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">$("body").append($('div').clone(true));</span></span><br></pre></td></tr></table></figure><h3 id="4-6-替换节点"><a href="#4-6-替换节点" class="headerlink" title="4.6 替换节点"></a>4.6 替换节点</h3><p>A.replaceWith(B) ，使用B将A替换掉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;p&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">$("p").replaceWith("&lt;a&gt;xxxx&lt;/</span>a&gt;<span class="string">");</span></span><br></pre></td></tr></table></figure><p>A.replaceAll(B) ，使用A替换B</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;p&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;p&lt;/</span>p&gt;</span><br><span class="line">&lt;p&gt;p&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">$("&lt;a&gt;ssss&lt;/</span>a&gt;<span class="string">").replaceAll("</span>p<span class="string">");</span></span><br></pre></td></tr></table></figure></h6></h1>]]></content>
      
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript冒泡事件机制</title>
      <link href="/passages/Javascript%E5%86%92%E6%B3%A1%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
      <url>/passages/Javascript%E5%86%92%E6%B3%A1%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript冒泡事件机制"><a href="#Javascript冒泡事件机制" class="headerlink" title="Javascript冒泡事件机制"></a>Javascript冒泡事件机制</h1><h2 id="1-事件"><a href="#1-事件" class="headerlink" title="1.事件"></a>1.事件</h2><p>在浏览器端的应用平台，基本是都是用事件来驱动的</p><blockquote><p>事件：某个动作发生，然后做出相应的动作</p></blockquote><p>浏览器中，事件表示某些事情发生的信号。</p><h2 id="2-冒泡机制"><a href="#2-冒泡机制" class="headerlink" title="2.冒泡机制"></a>2.冒泡机制</h2><p>首先，什么是冒泡？</p><p>想象一下，当水底有气泡的时候，气泡是从最底部由深向浅向上上升，在这过程，气泡会经过不同深度的水。</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1555859925639&di=ca1d0178261109df7185451c3e7f2650&imgtype=0&src=http%3A%2F%2Fimage.tupian114.com%2F20121017%2F13495375.jpg" width="500"></p><p>联想：气泡就相当于事件，水就如同整个Dom树，事件从Dom树的底部层层向上传递，直到达到Dom的根节点</p><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><p>我们写一个HTML页面，其中包含三个Dom元素，div外，div中，span内，其中外包含中包含内。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">"body"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sapn</span> <span class="attr">id</span>=<span class="string">"span"</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">sapn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(0, 252, 134);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>界面如下：</p><p><img src="https://i.loli.net/2019/04/21/5cbc65d014077.png"></p><p>接下来我们实现如下功能：</p><blockquote><p>body添加click事件监听，当body捕获到event事件时，输出事件发生的事件和触发事件的节点信息</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"body"</span>).addEventListener(<span class="string">"click"</span>,eventHandler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eventHandler</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"时间："</span>+<span class="keyword">new</span> <span class="built_in">Date</span>(event.timeStamp)+<span class="string">" 产生事件的节点："</span> + event.target.id +<span class="string">"  当前节点："</span>+event.currentTarget.id);</span><br><span class="line">&#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>我们依次点击“这是span”，div中，div外和body，得到以下信息</p><p><img src="https://i.loli.net/2019/04/21/5cbc67a0af5e4.png"></p><p>我们可以得出结论：</p><p>无论是body，body的子元素div外，还是div外的子元素div中，以及span，当这些被点击时，会产生click事件，并且最后都会传到body被捕获，接着再调用相关处理时间函数。</p><p>示意图如下：</p><p><img src="https://i.loli.net/2019/04/21/5cbc68889eb48.png"></p><p>事件在传递过程中会传递以下信息：</p><blockquote><p>事件发生时间+事件发声地点+事件类型+事件当前处理者+其他</p></blockquote><p><img src="https://i.loli.net/2019/04/21/5cbc69384d962.png"></p><h2 id="3-终止事件冒泡"><a href="#3-终止事件冒泡" class="headerlink" title="3.终止事件冒泡"></a>3.终止事件冒泡</h2><p>现在，我们这样，当点击各自的部分时，我们让他们各自产生提示信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"box1"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是最外层div。"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"box2"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是中间div。"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"span"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是span。"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>当我们点击span时，会弹出以下信息</p><p><img src="https://i.loli.net/2019/04/21/5cbc6aea9450b.png"></p><p>显示我们并不想要这样，我们只想点击哪部分就显示哪部分的提示。那么为什么会这样呢？原因就在于冒泡的机制，当我们点击span时，span会将事件冒泡给div中，然后再冒泡给div外。当冒泡到相应的元素是会触发响应函数，在从内向外的传递过程中，依次打印了各自的信息。</p><p>原理清楚了，那么该如何阻止事件的冒泡呢？</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>我们想象一下，一个气泡正从水底向上冒，现在我们在水中，我们不想让他向上冒了怎么办？</p><p>对，把他扎破。没有了气泡自然也就不会有冒泡了。</p><p>类似，在某个节点中，如果不想让他处理向上传递，我们可以终止事件的冒泡：</p><p><code>event.stopPropagation()</code></p><p>这个函数可以终止事件的分发，使之不会向上层传递</p><p>我们修改script的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"box1"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是最外层div。"</span>);</span><br><span class="line">            event.stopPropagation();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"box2"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是中间div。"</span>);</span><br><span class="line">            event.stopPropagation();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"span"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是span。"</span>);</span><br><span class="line">            event.stopPropagation();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>当我们再次点击span时，只会有span提示。</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>讲方法二之前，我们先分清<strong>最初触发事件的节点引用</strong>和<strong>当前处理事件节点的引用 </strong></p><blockquote><p>最初触发事件的节点引用:即事件产生的节点</p><p>当前处理事件节点的引用 ：即处理当前事件的节点</p></blockquote><p>事件产生的节点只有一个，而在传递的过程中，节点都可以处理事件。那么我们可以设置：</p><blockquote><p>节点只处理自己触发的事件,不是自己产生的事件就不处理。</p></blockquote><p>event.target 引用了产生此event对象的dom 节点，而event.currrentTarget 则引用了当前处理节点，我们可以通过对比这两个target 是否相等来决定是否处理事件。</p><p>例如：当span 点击事件，产生一个event 事件对象，event.target 指向了span元素，span处理此事件时，event.currentTarget 指向的也是span元素，这时判断两者相等，则执行相应的处理函数。而事件传递给 div中 的时候，event.currentTarget变成 div中，这时候判断二者不相等，即事件不是div中本身产生的，就不作响应处理逻辑。 </p><p>因此我们修改script代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">   &lt;script&gt;</span><br><span class="line">       <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">document</span>.getElementById(<span class="string">"box1"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(event.target == event.currentTarget)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是最外层div。"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"box2"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(event.target == event.currentTarget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是中间div。"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"span"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(event.target == event.currentTarget)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是span。"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">   &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>同样可以达到我们想要的效果</p><p>那么这两个方法有什么不同呢？</p><h4 id="比较："><a href="#比较：" class="headerlink" title="比较："></a>比较：</h4><blockquote><p><strong>方法一在于取消事件冒泡，即当某些节点取消冒泡后，事件不会再传递；</strong></p><p><strong>方法二在于不阻止冒泡，过滤需要处理的事件，事件处理后还会继续传递；</strong></p></blockquote><h4 id="方法一缺点："><a href="#方法一缺点：" class="headerlink" title="方法一缺点："></a>方法一缺点：</h4><blockquote><p><strong>为了实现点击特定的元素显示对应的信息，方法一要求每个元素的子元素也必须终止事件的冒泡传递</strong> 。</p><p>比如，当span 元素的处理函数没有执行冒泡终止，则事件会传到div中上，这样会造成div中 的提示信息</p></blockquote><h4 id="方法二缺点："><a href="#方法二缺点：" class="headerlink" title="方法二缺点："></a>方法二缺点：</h4><blockquote><p><strong>增加了代码冗余和逻辑上的复杂度</strong></p><p>当有几十个，几百个，那么要求每一层都要有if(event.target == event.currentTarget) </p></blockquote><h3 id="方法改进"><a href="#方法改进" class="headerlink" title="方法改进"></a>方法改进</h3><p>我们看方法二，</p><p>方法二的原理是 <strong>元素收到事件后，判断事件是否符合要求，然后做相应的处理，然后事件继续冒泡往上传递；</strong> </p><p>既然事件是冒泡传递的，那可不可以让某个父节点统一处理事件，通过判断事件的发生地（即事件产生的节点），然后做出相应的处理呢？</p><p>答案是可以的，下面通过给body 元素添加事件监听，然后通过判断event.target 然后对不同的target产生不同的行为。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"body"</span>).addEventListener(<span class="string">"click"</span>,eventPerformed);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eventPerformed</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> target = event.target;</span><br><span class="line"><span class="keyword">switch</span> (target.id) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"span"</span>: </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是span。"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"box1"</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我是外层div。"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"box2"</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我是中间div。"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>结果是点击谁谁会提示！</p><blockquote><p>我们把本来每个元素都要有的处理函数，都交给了其祖父节点body 元素来完成了，也就是说，span,div中,div外 将自己的响应逻辑委托给body，让它来完成相应逻辑，自己不实现相应逻辑，这个模式，就是所谓的事件委托。</p></blockquote><p>如图</p><p><img src="https://i.loli.net/2019/04/21/5cbc72740fae8.png"></p><p>本篇博客参考    <a href="https://blog.csdn.net/u010349169/article/details/23927347" target="_blank" rel="noopener">https://blog.csdn.net/u010349169/article/details/23927347</a> </p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TODOS案例（二）</title>
      <link href="/passages/TODOS%E6%A1%88%E4%BE%8B%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/passages/TODOS%E6%A1%88%E4%BE%8B%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="TODOS案例（二）"><a href="#TODOS案例（二）" class="headerlink" title="TODOS案例（二）"></a>TODOS案例（二）</h1><h2 id="界面样式设计"><a href="#界面样式设计" class="headerlink" title="界面样式设计"></a>界面样式设计</h2><p>上一期我们简单对页面元素进行了添加，本篇将对界面样式进行设置和布局。</p><p>最终呈现的效果如下图</p><p><img src="https://i.loli.net/2019/04/17/5cb731f72abe4.png"></p><p>先对input框进行调节，给input框一个边框以及颜色，内外边距统一为20rpx，边框圆角统一为5rpx，盒子阴影设置为5rpx模糊程度。</p><p>考虑到内部图片和输入框的横向排列，我们采用flex布局方式，给<code>.search</code>的display设为flex，为了使内部组件在水平线上对齐，设置align-item为center</p><p>代码如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.search</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1</span>rpx solid <span class="number">#e0e0e0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20</span>rpx;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20</span>rpx;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5</span>rpx;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>rpx <span class="number">#e0e0e0</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再设置添加图片大小以及设置和右侧文本框的距离：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.search</span> <span class="selector-tag">image</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">45</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">45</span>rpx;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样input部分调整完成！！</p><p>下面开始调整中部的样式，我们同样给边框设置相同样式！</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.todos</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1</span>rpx solid <span class="number">#e0e0e0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20</span>rpx;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20</span>rpx;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5</span>rpx;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>rpx <span class="number">#e0e0e0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在对内部item组件进行调整，并且同样采取flex布局，两端的icon我们在属性里设置为30大小，中间文本框采用flex自动撑开</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.todos</span> <span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20</span>rpx;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1</span>rpx solid <span class="number">#e0e0e0</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.todos</span> <span class="selector-class">.item</span> <span class="selector-tag">text</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>:<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30</span>rpx;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#888</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">20</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/17/5cb734d179b2f.png"></p><p>为了样式美观，我们将最后一个item的下边框去除</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.todos</span> <span class="selector-class">.item</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后设置底部部分，简单采用flex布局，并使布局方式justify-content设置为space-between</p><p>至此样式布局完成！！！</p><p>下篇将介绍如何抽象数据模型。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TODOS案例（一）</title>
      <link href="/passages/TODOS%E6%A1%88%E4%BE%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/passages/TODOS%E6%A1%88%E4%BE%8B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="界面结构设计"><a href="#界面结构设计" class="headerlink" title="界面结构设计"></a>界面结构设计</h1><p>通过对微信小程序的学习，我们简单通过所学的知识设计一个TODOS案例，整个TODOS包括添加事件功能，标记功能，删除事件功能，标记所有功能，剩余事件提醒功能以及清除所有事件功能。</p><p><img src="https://i.loli.net/2019/04/17/5cb671b771703.png"></p><blockquote><blockquote><p>本片微博将分为14篇对本案例过程进行详细介绍。</p></blockquote></blockquote><p>下面开始第一部分：界面结构设计。</p><p>首先在pages中新建todos页面以及内容</p><p><img src="https://i.loli.net/2019/04/17/5cb671b70cb56.png"></p><p>在app.json中注册主页面以及导航栏的标题</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "pages": [</span><br><span class="line">        "pages/todos/todos"</span><br><span class="line">        </span><br><span class="line">    ],</span><br><span class="line">    "<span class="selector-tag">window</span>": &#123;</span><br><span class="line">        "backgroundTextStyle": "light",</span><br><span class="line">        "<span class="selector-tag">navigationBarBackgroundColor</span>": "<span class="selector-id">#fff</span>",</span><br><span class="line">        "<span class="selector-tag">navigationBarTitleText</span>": "<span class="selector-tag">TODOS</span>",</span><br><span class="line">        "<span class="selector-tag">navigationBarTextStyle</span>": "<span class="selector-tag">black</span>"</span><br><span class="line">    &#125;,</span><br><span class="line">    "<span class="selector-tag">sitemapLocation</span>": "<span class="selector-tag">sitemap</span><span class="selector-class">.json</span>"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们根据界面图先设计好框架</p><p>整个界面可分为上中下三部分：</p><p>第一部分包括添加事件按钮，input输入框</p><p>第二部分包括事件完成勾选icon，事件展示text，以及事件清除icon</p><p>第三部分为底部事件提醒以及功能按钮</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class="container"&gt;</span><br><span class="line">    &lt;view class="search"&gt;</span><br><span class="line">        &lt;image src="../../images/plus.png" &gt;&lt;/image&gt;</span><br><span class="line">        &lt;input type='text' placeholder='Anything here ...'&gt;&lt;/input&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">    &lt;view class="todos"&gt;</span><br><span class="line">        &lt;view class='item'&gt;</span><br><span class="line">            &lt;icon type='success'&gt;&lt;/icon&gt;</span><br><span class="line">            &lt;text&gt;Learning HTML&lt;/text&gt;</span><br><span class="line">            &lt;icon type='clear'&gt;&lt;/icon&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">        &lt;view class='item'&gt;</span><br><span class="line">            &lt;icon type='circle'&gt;&lt;/icon&gt;</span><br><span class="line">            &lt;text&gt;Learning CSS&lt;/text&gt;</span><br><span class="line">            &lt;icon type='clear'&gt;&lt;/icon&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">        &lt;view class='item'&gt;</span><br><span class="line">            &lt;icon type='success'&gt;&lt;/icon&gt;</span><br><span class="line">            &lt;text&gt;Learning JS&lt;/text&gt;</span><br><span class="line">            &lt;icon type='clear'&gt;&lt;/icon&gt;&lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">    &lt;view class="footer"&gt;</span><br><span class="line">        &lt;text&gt;Toggle ALL&lt;/text&gt;</span><br><span class="line">        &lt;text&gt;0 item left&lt;/text&gt;</span><br><span class="line">        &lt;text&gt;Clear&lt;/text&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>代码中的text文档暂时用文字代表，之后通过事件绑定进行渲染</p><p>整个框架搭建完成后如图所示</p><p><img src="https://i.loli.net/2019/04/17/5cb671b767724.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伸缩布局</title>
      <link href="/passages/%E4%BC%B8%E7%BC%A9%E5%B8%83%E5%B1%80/"/>
      <url>/passages/%E4%BC%B8%E7%BC%A9%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Flex伸缩布局"><a href="#Flex伸缩布局" class="headerlink" title="Flex伸缩布局"></a>Flex伸缩布局</h1><p>Flexible意为可伸缩的，Box意为盒子，可以理解为一种新式的盒模型——伸缩盒模型。由CSS3规范提出，这是在原有的大家非常熟悉的block, inline-block, inline的基础上延伸出的新一代布局模式。</p><h2 id="伸缩的基本概念"><a href="#伸缩的基本概念" class="headerlink" title="伸缩的基本概念"></a>伸缩的基本概念</h2><p><img src="/passages/伸缩布局/pic1.png" alt></p><h3 id="1-Flex-container"><a href="#1-Flex-container" class="headerlink" title="1.Flex container"></a>1.Flex container</h3><p>即伸缩盒容器，可以理解为将要被分的房子，分之前需要将display属性声明为flex或者inline-flex</p><h3 id="2-Flex-item"><a href="#2-Flex-item" class="headerlink" title="2.Flex item"></a>2.Flex item</h3><p>即伸缩项可以理解为房子里的居民，他们会占有一定的住房面积，我们先用代码来解释一下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>样式设置为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.container</span> &#123;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">     <span class="attribute">display</span>: flex;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">           <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">background-color</span>: blue;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-class">.item2</span> &#123;</span><br><span class="line">           <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">background-color</span>: yellow;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-class">.item3</span> &#123;</span><br><span class="line">           <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">background-color</span>: red;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>结果如图所示:</p><p><img src="/passages/伸缩布局/pic2.png" alt></p><p>可以看到房子被平分成三分！</p><p>但是有人如果想住大点的房子，我们可以直接改变flex的值来实现，例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.item1 &#123;</span><br><span class="line">         flex: 1;</span><br><span class="line">         width: 100px;</span><br><span class="line">         height: 100px;</span><br><span class="line">         background-color: blue;</span><br><span class="line">     &#125;</span><br><span class="line">     .item2 &#123;</span><br><span class="line">         flex: 1;</span><br><span class="line">         width: 100px;</span><br><span class="line">         height: 100px;</span><br><span class="line">         background-color: yellow;</span><br><span class="line">     &#125;</span><br><span class="line">     .item3 &#123;</span><br><span class="line">         flex: 2;</span><br><span class="line">         width: 100px;</span><br><span class="line">         height: 100px;</span><br><span class="line">         background-color: red;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h3 id="3-Axes轴"><a href="#3-Axes轴" class="headerlink" title="3.Axes轴"></a>3.Axes轴</h3><p>图中分别标注了主轴和次轴，但是事实上那一条是主轴可以由我们自己规定。</p><blockquote><p>flex-direction 此属性规定哪条轴为主轴。</p><p>justify-content 此属性设置了伸缩项在主轴方向上的排列方式，这个稍后解释。</p><p>align-items 此属性和上面的justify-content相对，表示伸缩项在次轴上的排列方式。</p><p>align-self 此属性规定某一个特定的伸缩项元素在次轴上的布局方式，在某个元素上设置该属性会覆盖它的align-items属性。也就是这个属性会让某个元素更有个性，不走寻常路~</p></blockquote><h3 id="4-flex-direction"><a href="#4-flex-direction" class="headerlink" title="4.flex-direction"></a>4.flex-direction</h3><p>当我们不想沿着默认的方向分房子的时候，我们可以改变<code>flex-direction</code>属性的值来改变主轴和方向，该属性默认的取值为row；</p><p>当取值为row-reverse时，伸缩项逆置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">display</span>: flex;</span><br><span class="line">            <span class="attribute">flex-direction</span>: row-reverse;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><img src="/passages/伸缩布局/pic3.png" alt></p><p>当此属性设置为<code>column</code>时，主次轴就会对调，元素的排列方向也会随之改变：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            display: flex;</span><br><span class="line">            flex-direction: column;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><img src="/passages/伸缩布局/pic5.png" alt></p><p>至于<code>flex: column-reverse</code>的含义和row-reverse类似</p><h3 id="5-justify-contents"><a href="#5-justify-contents" class="headerlink" title="5.justify-contents"></a>5.justify-contents</h3><p>有的时候，大家挨着住，一点空隙都没有也会很难受，连个过道都没有，隐私也不能保证对吧。这个时候，我们可以改变分配政策了，不再按比例分配，而是定额分配，每个人的面积是确定的。多出的房屋面积改成公共区域。</p><p>为了更好地看见区别，我们将每一个item宽度缩小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">           <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">background-color</span>: blue;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-class">.item2</span> &#123;</span><br><span class="line">           <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">background-color</span>: yellow;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-class">.item3</span> &#123;</span><br><span class="line">           <span class="attribute">flex</span>: <span class="number">2</span>;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">background-color</span>: red;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><blockquote><p>设定了<code>width</code>属性后也要记得去掉<code>flex</code>属性的声明，不然<code>flex</code>属性的效果仍然会把<code>width</code>覆盖掉<br>同时，如果<code>width</code>属性也不设定的话，元素宽度会表现为内容的宽度，即当伸缩项内部无内容时，将不会进行渲染，其表现就和<code>display: none;</code>一样。</p></blockquote><p>这时，在容器上声明<code>justify-content</code>属性就可以安排伸缩项的位置了：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.contianer</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/passages/伸缩布局/pic6.png" alt></p><h3 id="6-align-items"><a href="#6-align-items" class="headerlink" title="6.align-items"></a>6.align-items</h3><p>这项属性会改变次轴上元素排列的方式，对于本例来说原来次轴方向上元素的高度是表现为<code>height: 100%;</code>的，设定了<code>align-items</code>属性后，其高度表现就会发生改变了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于各项的作用，可以动手试试！</p><h3 id="7-order"><a href="#7-order" class="headerlink" title="7.order"></a>7.order</h3><p>在伸缩项上声明此属性，可以无视HTML结构的顺序而按照<code>order</code>从小到大的顺序沿<code>flex-direction</code>方向排列。比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">1</span>；</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item3</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/passages/伸缩布局/pic7.png" alt></p><h3 id="8-flex-wrap"><a href="#8-flex-wrap" class="headerlink" title="8.flex-wrap"></a>8.flex-wrap</h3><p>此属性的默认值为<code>nowrap</code>，也就是忽略伸缩项的宽度，管你要多少住房面积，通通按照<code>flex</code>属性说好的分配，不许换行。</p><p>为了方便观察，我们先将盒子宽度设为150px；</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: blue;</span><br><span class="line">        <span class="attribute">order</span>: <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">       <span class="selector-class">.container</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">flex-direction</span>: row;</span><br><span class="line">        flex-wrap: nowrap;//wrap</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/passages/伸缩布局/pic8.png" alt></p><p><img src="/passages/伸缩布局/pic9.png" alt></p><h3 id="9-flex-grow，flex-shrink-和-flex-basis"><a href="#9-flex-grow，flex-shrink-和-flex-basis" class="headerlink" title="9.flex-grow，flex-shrink 和 flex-basis"></a>9.flex-grow，flex-shrink 和 flex-basis</h3><p>上文提到的<code>flex</code>属性实际上是这三个属性的简写形式。这三个属性有相似性，都是表示项与项之间分配空间的相对比例关系，不同之处在于：</p><p><code>flex-grow</code>属性：属性值为该伸缩项所占空间相对于其他伸缩项（声明了<code>flex</code>相关属性的项）的比值。</p><p><code>flex-shrink</code>属性：该伸缩项相对于其他伸缩项缩小的比值，也就是说当<code>flex-shrink: 3;</code>时，该项所占空间为其他项的1/3。<br><code>flex-basis</code>属性：属性值为该项所占空间占容器空间的百分比。</p><p>注意：对于<code>flex-basis</code>属性，当所有项的属性值相加&lt;=100%时，会严格按照百分比值来渲染。当属性值相加&gt;100%时，元素并不会溢出，而是表现为两两之间所占空间大小遵循相互的百分比比值。也就是说当存在三个伸缩项且<code>flex-basis</code>值都为<code>50%</code>时，表现行为与三个项均为<code>flex: 1;</code>一样。</p><p>Flexible Boxes布局模式在响应式开发中尤其好用，对不同的终端，设置元素之间的空间分配关系将会变成一件非常简单的事。后期微信小程序中也是十分好用，伸缩盒布局和响应式布局中流行的流体布局哪种更好，还是可以结合起来，就看各位开发者发挥自己的聪明才智了！</p>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS学习总结（三）</title>
      <link href="/passages/JS%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/passages/JS%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="一，script标签书写位置"><a href="#一，script标签书写位置" class="headerlink" title="一，script标签书写位置"></a>一，script标签书写位置</h4><p><strong>js的代码可以分三个地方写:</strong></p><blockquote><h6 id="1-在html的文件中-script的标签中写js代码"><a href="#1-在html的文件中-script的标签中写js代码" class="headerlink" title="1.在html的文件中,script的标签中写js代码"></a>1.在html的文件中,script的标签中写js代码</h6><h6 id="2-js代码可以在html的标签中写—"><a href="#2-js代码可以在html的标签中写—" class="headerlink" title="2.js代码可以在html的标签中写—"></a>2.js代码可以在html的标签中写—</h6><h6 id="3-在js文件中可以写js代码-但是需要在html的页面中引入-script的标签中的src-”js的路径”"><a href="#3-在js文件中可以写js代码-但是需要在html的页面中引入-script的标签中的src-”js的路径”" class="headerlink" title="3.在js文件中可以写js代码,但是需要在html的页面中引入 script的标签中的src=”js的路径”"></a>3.在js文件中可以写js代码,但是需要在html的页面中引入 script的标签中的src=”js的路径”</h6></blockquote><h4 id="二，js代码的注意问题"><a href="#二，js代码的注意问题" class="headerlink" title="二，js代码的注意问题"></a>二，js代码的注意问题</h4><blockquote><h6 id="1-在一对script的标签中有错误的js代码-那么该错误的代码后面的js代码不会执行"><a href="#1-在一对script的标签中有错误的js代码-那么该错误的代码后面的js代码不会执行" class="headerlink" title="1.在一对script的标签中有错误的js代码,那么该错误的代码后面的js代码不会执行"></a>1.在一对script的标签中有错误的js代码,那么该错误的代码后面的js代码不会执行</h6><h6 id="2-如果第一对的script标签中有错误-不会影响后面的script标签中的js代码执行"><a href="#2-如果第一对的script标签中有错误-不会影响后面的script标签中的js代码执行" class="headerlink" title="2.如果第一对的script标签中有错误,不会影响后面的script标签中的js代码执行"></a>2.如果第一对的script标签中有错误,不会影响后面的script标签中的js代码执行</h6><h6 id="3-script的标签中可以写什么内容-type-”text-javascript”是标准写法或者写language-”JavaScript”都可以"><a href="#3-script的标签中可以写什么内容-type-”text-javascript”是标准写法或者写language-”JavaScript”都可以" class="headerlink" title="3.script的标签中可以写什么内容 type=”text/javascript”是标准写法或者写language=”JavaScript”都可以"></a>3.script的标签中可以写什么内容 type=”text/javascript”是标准写法或者写language=”JavaScript”都可以</h6><h6 id="但是-目前在我们的html页面中-type和language都可以省略-原因-html是遵循h5的标准"><a href="#但是-目前在我们的html页面中-type和language都可以省略-原因-html是遵循h5的标准" class="headerlink" title="但是,目前在我们的html页面中,type和language都可以省略,原因:html是遵循h5的标准"></a>但是,目前在我们的html页面中,type和language都可以省略,原因:html是遵循h5的标准</h6><h6 id="4-有可能会出现这种情况-script标签中可能同时出现type和language的写法"><a href="#4-有可能会出现这种情况-script标签中可能同时出现type和language的写法" class="headerlink" title="4.有可能会出现这种情况:script标签中可能同时出现type和language的写法."></a>4.有可能会出现这种情况:script标签中可能同时出现type和language的写法.</h6><h6 id="5-script标签在页面中可以出现多对"><a href="#5-script标签在页面中可以出现多对" class="headerlink" title="5.script标签在页面中可以出现多对"></a>5.script标签在页面中可以出现多对</h6><h6 id="6-script标签一般是放在body的标签的最后的-有的时候会在head标签中-目前讲课的时候都在body标签的后面-body中的最后"><a href="#6-script标签一般是放在body的标签的最后的-有的时候会在head标签中-目前讲课的时候都在body标签的后面-body中的最后" class="headerlink" title="6.script标签一般是放在body的标签的最后的,有的时候会在head标签中,目前讲课的时候都在body标签的后面(body中的最后)"></a>6.script标签一般是放在body的标签的最后的,有的时候会在head标签中,目前讲课的时候都在body标签的后面(body中的最后)</h6><h6 id="7-如果script标签是引入外部js文件的作用-那么这对标签中不要写任何的js代码-如果要写-重新写一对script标签-里面写代码"><a href="#7-如果script标签是引入外部js文件的作用-那么这对标签中不要写任何的js代码-如果要写-重新写一对script标签-里面写代码" class="headerlink" title="7.如果script标签是引入外部js文件的作用,那么这对标签中不要写任何的js代码,如果要写,重新写一对script标签,里面写代码"></a>7.如果script标签是引入外部js文件的作用,那么这对标签中不要写任何的js代码,如果要写,重新写一对script标签,里面写代码</h6></blockquote><h4 id="三，变量"><a href="#三，变量" class="headerlink" title="三，变量"></a>三，变量</h4><ul><li>变量:========&gt;</li><li>操作的数据都是在内存中操作</li><li>js中存储数据使用变量的方式(名字,值—&gt;数据)</li><li>js中声明变量都用var—-&gt;存储数据,数据应该有对应的数据类型</li><li>js中的字符串类型的值都用双引号或者单引号</li><li>存储一个数字10</li><li>变量的声明及赋值</li><li><code>var num=10;</code></li><li>存储一个名字</li><li><code>var name=&#39;小黑&#39;;</code><ul><li>变量—作用,存储数据的或者是操作数据<ul><li>变量声明(有var 有变量名字,没有值)</li><li>变量初始化(有var 有变量名字,有值)</li><li>变量声明的方式:</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//一次性声明多个变量</span></span><br><span class="line"> <span class="keyword">var</span> x,y,z,k,j;<span class="comment">//都是声明,没有赋值</span></span><br><span class="line"><span class="comment">//变量的初始化(变量声明的同时并且赋值了)</span></span><br><span class="line"><span class="comment">//   = 的意义:赋值的含义</span></span><br><span class="line"><span class="keyword">var</span> number = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//存储一个5</span></span><br><span class="line"><span class="keyword">var</span> number2 = <span class="number">5</span>;</span><br><span class="line"><span class="comment">//存储一个人的名字</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"小黑"</span>;</span><br><span class="line"><span class="comment">//存储真(true)</span></span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//存储一个null---&gt;相当于是</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// var 变量名字;</span></span><br></pre></td></tr></table></figure><h4 id="四，变量总结"><a href="#四，变量总结" class="headerlink" title="四，变量总结"></a>四，变量总结</h4><ul><li>变量作用:用来操作数据的(可以存储,可以读取)<ul><li>变量的声明:没有赋值</li><li>var 变量名;</li><li>变量的初始化:有赋值</li><li>var 变量名=值;</li><li>注意的基本的代码的规范</li><li>js中声明变量都用var</li><li>js中的每一行代码结束都应该有分号;(写代码有分号的习惯)</li><li>js中的大小写是区分的: var N=10; n</li><li>js中的字符串可以使用单引号,也可以使用双引号,目前我们暂时使用双引号</li><li>变量名的注意问题—变量名的命名规范,要遵循驼峰命名法</li><li>1.变量的名字要有意义,</li><li>2.变量名有一定的规范:一般以字母,$符号,下划线开头,中间或者后面可以有$符号,字母,数字</li><li>3.变量名一般都是小写的</li><li>4.变量名如果是多个单词,第一个单词的首字母是小写的,后面的所有的单词的首字母都是大写的,这种命名方式称为:驼峰命名法</li><li>5.不能使用关键字(系统自带的一些单词,不能使用)</li><li>6.不会单词用拼音,拼音也要遵循驼峰命名法</li><li>var bigNumber=10;</li><li>声明变量并初始化—变量的初始化—-声明变量赋值</li><li>声明多个变量然后一个一个的赋值</li></ul></li></ul><p>声明多个变量并且赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">100</span>;</span><br><span class="line"><span class="comment">//输出这个变量的值</span></span><br><span class="line">alert(num);<span class="comment">//弹框</span></span><br><span class="line"><span class="comment">//浏览器的控制台在浏览器中的开发人员工具中(快捷键:F12)的console的选项中</span></span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="comment">//把内容输出在浏览器的控制台中</span></span><br><span class="line"><span class="comment">//    //依次的赋值</span></span><br><span class="line">num1=<span class="number">10</span>;</span><br><span class="line">num2=<span class="number">20</span>;</span><br><span class="line">num3=<span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num1=<span class="number">10</span>,num2=<span class="number">20</span>,num3=<span class="number">30</span>;</span><br><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> $<span class="keyword">break</span>=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> shuZi=<span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="五，数字交换的三种方式"><a href="#五，数字交换的三种方式" class="headerlink" title="五，数字交换的三种方式"></a>五，数字交换的三种方式</h4><p>变量的交换的第一个思路:使用第三方的变量进行交换<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num2=<span class="number">20</span>;</span><br><span class="line"><span class="comment">//   //把num1这个变量的值取出来放在temp变量中</span></span><br><span class="line"><span class="keyword">var</span> temp=num1;</span><br><span class="line"><span class="comment">//   //把num2这个变量的值取出来放在num1变量中</span></span><br><span class="line">num1=num2;</span><br><span class="line"><span class="comment">//   //把temp变量的值取出来放在num2变量中</span></span><br><span class="line">num2=temp;</span><br><span class="line"><span class="built_in">console</span>.log(num1);<span class="comment">//20</span></span><br><span class="line"><span class="built_in">console</span>.log(num2);<span class="comment">//10</span></span><br></pre></td></tr></table></figure></p><p>第二种方式交换:一般适用于数字的交换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num2 = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//    //把num1的变量中的值和num2变量中的值,取出来相加,重新赋值给num1这个变量</span></span><br><span class="line">num1 = num1 + num2;<span class="comment">//30</span></span><br><span class="line"><span class="comment">//    //num1变量的值和num2变量的值取出来,相减的结果重新赋值给num2</span></span><br><span class="line">num2 = num1 - num2;<span class="comment">//10</span></span><br><span class="line"><span class="comment">//    //num1变量的值和num2变量的值取出来,相减的结果重新赋值给num1</span></span><br><span class="line">num1 = num1 - num2;<span class="comment">//20</span></span><br><span class="line"><span class="built_in">console</span>.log(num1, num2);</span><br></pre></td></tr></table></figure><p>Ctrl+Alt+L—–&gt;格式化代码的(设置代码有很好的格式,代码是错误的,这个快捷键是没有效果)</p><p>注意；变量的名字是不能重名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num1=<span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num1);</span><br></pre></td></tr></table></figure><p>扩展的变量的交换:只需要看代码,不需要理解—位运算<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num2 = <span class="number">20</span>;</span><br><span class="line">num1 = num1 ^ num2;</span><br><span class="line">num2 = num1 ^ num2;</span><br><span class="line">num1 = num1 ^ num2;</span><br><span class="line"><span class="built_in">console</span>.log(num1, num2);</span><br></pre></td></tr></table></figure></p><h4 id="六，数据类型"><a href="#六，数据类型" class="headerlink" title="六，数据类型"></a>六，数据类型</h4><p>声明变量并初始化<br>var num=10;<br>js中的数据类型有哪些?<br>js中的原始数据类型:number,string,boolean,null,undefined,object</p><ul><li>number:数字类型(整数和小数)</li><li>string:字符串类型(的值一般都是用单引号或者是双引号括起来)  “34”</li><li>boolean:布尔类型(值只有两个,true(真1),false(假0))</li><li>null:空类型,值只有一个:null,一个对象指向为空了,此时可以赋值为null</li><li>undefined:未定义,值只有一个:undefined</li><li>什么情况下的结果是undefined</li><li>变量声明了,没有赋值,结果是undefined</li><li>函数没有明确返回值,如果接收了,结果也是undefined</li><li>如果一个变量的结果是undefined和一个数字进行计算,结果:NaN不是一个数字,也没有意义</li><li>object:对象—-&gt;</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num;    <span class="keyword">var</span> num;</span><br><span class="line"><span class="built_in">console</span>.log(num+<span class="number">10</span>);<span class="comment">//NaN-----not an number----&gt;不是一个数字`</span></span><br><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="string">`</span></span><br></pre></td></tr></table></figure><p>如何获取这个变量的数据类型是什么? 使用typeof 来获取<br>typeof 的使用的语法</p><ul><li>都可以获取这个变量的数据类型是什么!</li><li>typeof 变量名</li><li>typeof(变量名)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"小白"</span>;</span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> nll = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> undef;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="comment">//是使用typeof 获取变量的类型</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num);<span class="comment">//number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str);<span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> flag);<span class="comment">//boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(nll));<span class="comment">//是null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> nll);<span class="comment">//不是null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> undef);<span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> obj);<span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num));</span><br><span class="line"><span class="comment">//    console.log("10");</span></span><br><span class="line"><span class="comment">//    console.log(10);</span></span><br></pre></td></tr></table></figure><h4 id="七，数字类型"><a href="#七，数字类型" class="headerlink" title="七，数字类型"></a>七，数字类型</h4><ul><li>数字类型:number类型</li><li>无论是整数还是小数都是数字类型</li><li>不要用小数验证小数</li><li>不要使用NaN判断是不是NaN，应该使用isNaN(值或者是变量)</li><li>想要表示十进制:就是正常的数字</li><li>想要表示八进制:以0开头</li><li>想要表示十六进制:0x开头</li></ul><h4 id="八，字符串类型"><a href="#八，字符串类型" class="headerlink" title="八，字符串类型"></a>八，字符串类型</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"10"</span>;<span class="comment">//字符串</span></span><br><span class="line"><span class="keyword">var</span> str2=<span class="string">'20'</span>;<span class="comment">//字符串</span></span><br></pre></td></tr></table></figure><p>字符串可以使用单引号,也可以使用双引号</p><p>字符串的长度如何获取? 变量名.length</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"what are you no sha lei"</span>;</span><br><span class="line"><span class="comment">//    //字符串的个数有多少个?这个字符串的长度是多少</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> str1=<span class="string">"fdshfjworwoijpfskj;akjfpojfiwnmoiwajdoiwajiwaewowj"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str1.length);</span><br></pre></td></tr></table></figure><p>html中的转义符: &lt;  &lt; &gt; &gt; 空格: &nbsp;<br>js中的字符串里也有转义符</p><p>tab键—-水平制表符</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"哈哈\t嘎嘎"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"哈哈\"嘎嘎"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'哈哈\'嘎嘎'</span>);<span class="string">`</span></span><br></pre></td></tr></table></figure><p>字符串的拼接: 使用+可以把多个字符串放在一起形成一个字符串<br>只要有一个是字符串,其他的是数字,那么结果也是拼接,不是相加<br>如果有一个是字符串,另一个不是字符串,使用- 号,此时会发生计算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1=<span class="string">"您好"</span>;</span><br><span class="line"><span class="keyword">var</span> str2=<span class="string">"我好"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str1+str2);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"哈哈"</span>+<span class="string">"嘎嘎"</span>+<span class="string">"嘿嘿"</span>);</span><br><span class="line"><span class="keyword">var</span> str1=<span class="string">"10"</span>;</span><br><span class="line"><span class="keyword">var</span> str2=<span class="string">"20"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str1+str2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1=<span class="string">"10"</span>;</span><br><span class="line"><span class="keyword">var</span> str2=<span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str1+str2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">"10"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="number">5</span>;</span><br><span class="line"><span class="comment">//    //浏览器帮助我们自动的把字符串类型转成了数字类型,这种方式叫:隐式转换</span></span><br><span class="line"><span class="built_in">console</span>.log(str1-str2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1=<span class="string">"10"</span>;</span><br><span class="line"><span class="keyword">var</span> str2=<span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str1*str2);</span><br></pre></td></tr></table></figure><h4 id="九，布尔类型"><a href="#九，布尔类型" class="headerlink" title="九，布尔类型"></a>九，布尔类型</h4><p>布尔类型:的值有两个,一个是true(真),一个是false(假)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flag=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fdf=<span class="literal">null</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><h4 id="十，类型转换"><a href="#十，类型转换" class="headerlink" title="十，类型转换"></a>十，类型转换</h4><p>其他类型转数字类型:三种方式:<br>   1.parseInt();//转整数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"10"</span>));<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"10afrswfdsf"</span>));<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"g10"</span>));<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"1fds0"</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"10.98"</span>));<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"10.98fdsfd"</span>));<span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>  2.parseFloat()//转小数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"10"</span>));<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"10afrswfdsf"</span>));<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"g10"</span>));<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"1fds0"</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"10.98"</span>));<span class="comment">//10.98</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"10.98fdsfd"</span>));<span class="comment">//10.98</span></span><br></pre></td></tr></table></figure><p>3.Number();//转数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"10"</span>));<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"10afrswfdsf"</span>));<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"g10"</span>));<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"1fds0"</span>));<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"10.98"</span>));<span class="comment">//10.98</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"10.98fdsfd"</span>));<span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><blockquote><p>总结:想要转整数用parseInt(),想要转小数用parseFloat()<br>想要转数字:Number();要比上面的两种方式严格</p></blockquote><p>   其他类型转字符串类型<br>    1.toString()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toString());<span class="comment">//字符串类型</span></span><br></pre></td></tr></table></figure><ol start="2"><li>String()</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var num1=20;</span><br><span class="line">console.log(String(num1));</span><br></pre></td></tr></table></figure><p> 如果变量有意义调用.toString()使用转换<br> 如果变量没有意义使用String()转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num2;</span><br><span class="line"><span class="built_in">console</span>.log(num2.toString());</span><br><span class="line"><span class="keyword">var</span> num3=<span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num3.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个可以</span></span><br><span class="line"><span class="keyword">var</span> num2;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(num2));</span><br><span class="line"><span class="keyword">var</span> num3=<span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(num3));</span><br></pre></td></tr></table></figure><p>其他类型转布尔类型</p><ol><li>Boolean(值);</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">1</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">11</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">-10</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">"哈哈"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">""</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">null</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">undefined</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(+str);</span><br></pre></td></tr></table></figure><h4 id="十一，操作符"><a href="#十一，操作符" class="headerlink" title="十一，操作符"></a>十一，操作符</h4><ul><li>操作符:一些符号—–用来计算<ul><li>算数运算符:  +  -  * / %</li><li>算数运算表达式:由算数运算符连接起来的表达式</li><li>一元运算符: 这个操作符只需要一个操作数就可以运算的符号  ++  –</li><li>二元运算符: 这个操作符需要两个操作数就可以运算,</li><li>三元运算符: —–不讲,明天讲</li><li>复合运算符: +=  -=  *= /= %=</li><li>复合运算表达式:由复合运算符连接起来的表达式</li><li><code>var num=10;</code></li><li><code>num+=10;------&gt;就是:num=num+10;</code></li><li><code>console.log(num);20</code></li><li>关系运算符: &gt;  &lt;  &gt;=  &lt;=  ==不严格的 ===严格的 !=不严格的不等 !==严格的不等</li><li>关系运算表达式:由关系运算符连接起来的表达式</li><li>关系运算表达式的结果是布尔类型</li><li>逻辑运算符:</li><li>&amp;&amp;—逻辑与–并且</li><li>||—逻辑或—或者</li><li>!—逻辑非—取反–取非</li><li>逻辑运算表达式:由逻辑运算符连接起来的表达式</li><li>表达式1&amp;&amp;表达式2</li><li>如果有一个为false,整个的结果就是false</li><li>表达式1||表达式2</li><li>如果有一个为true,整个的结果为true</li><li>!表达式1</li><li>表达式1的结果是true,整个结果为false</li><li>表达式1的结果是false,整个结果为true</li><li>赋值运算符:  =</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2=<span class="number">20</span>;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"><span class="built_in">console</span>.log(num1==num2&amp;&amp;<span class="number">5</span>&gt;<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> num=<span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num&gt;<span class="number">10</span>||<span class="number">5</span>&lt;<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flag=<span class="literal">false</span>;</span><br><span class="line"><span class="built_in">console</span>.log(!flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> sum=(num+<span class="number">10</span>)*<span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = (<span class="number">4</span> &gt;= <span class="number">6</span> || <span class="string">'人'</span> != <span class="string">'狗'</span> &amp;&amp; !(<span class="number">12</span> * <span class="number">2</span> == <span class="number">144</span>) &amp;&amp; <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> result2 =( <span class="number">5</span> == num / <span class="number">2</span> &amp;&amp; (<span class="number">2</span> + <span class="number">2</span> * num).toString() === <span class="string">'22'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> result=num/<span class="number">3</span>;<span class="comment">//num变量与3取余---&gt;10/3的余数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(result));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> result=num%<span class="number">3</span>;<span class="comment">//num变量与3取余---&gt;10/3的余数</span></span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> sum=(num+<span class="number">10</span>)+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">num %= <span class="number">5</span>;</span><br><span class="line">    <span class="comment">//    //    num=num-5;</span></span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"5"</span>;</span><br><span class="line"><span class="keyword">var</span> num=<span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str===num);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>&gt;<span class="number">10</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>&gt;=<span class="number">5</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>&gt;<span class="number">3</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>==<span class="number">10</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>字面量: 把一个值直接赋值给一个变量</p><p> 声明变量并初始化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> flag=<span class="literal">true</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"哈哈哈"</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> y=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> n=y;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html学习总结（一）</title>
      <link href="/passages/html%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/passages/html%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="一，浏览器内核"><a href="#一，浏览器内核" class="headerlink" title="一，浏览器内核"></a>一，浏览器内核</h3><h4 id="1-浏览器内核可分为渲染引擎和js引擎："><a href="#1-浏览器内核可分为渲染引擎和js引擎：" class="headerlink" title="1.浏览器内核可分为渲染引擎和js引擎："></a>1.浏览器内核可分为渲染引擎和js引擎：</h4><blockquote><p>渲染引擎:它负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。</p></blockquote><blockquote><p>JS 引擎:则是解析 Javascript 语言，执行 javascript语言来实现网页的动态效果。</p></blockquote><h4 id="2-常见浏览器分类"><a href="#2-常见浏览器分类" class="headerlink" title="2.常见浏览器分类"></a>2.常见浏览器分类</h4><p>（1） Trident（IE内核）</p><p>（2）Gecko（火狐）</p><p>（3）Webkit（Safari）</p><p>（4）Chromium（Chrome）</p><p>（5）Presto</p><h4 id="3-Web标准的构成"><a href="#3-Web标准的构成" class="headerlink" title="3.Web标准的构成"></a>3.Web标准的构成</h4><p>主要包括结构，样式和行为三个方面</p><blockquote><p>结构标准：结构用于对网页元素进行整理和分类，咱们主要学的是HTML。 最重要<br>表现标准：表现用于设置网页元素的版式、颜色、大小等外观样式，主要指的是CSS。<br>行为标准：行为是指网页模型的定义及交互的编写，咱们主要学的是 Javascript</p></blockquote><h4 id="4-Html语法骨架"><a href="#4-Html语法骨架" class="headerlink" title="4.Html语法骨架"></a>4.Html语法骨架</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HTML</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HTML</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>HTML标签：</p><p>作用所有HTML中标签的一个根节点。 最大的标签   根标签</p><p>head标签： 文档的头部</p><p>文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。</p><p>注意在head标签中我们必须要设置的标签是title</p><p>title标签： 文档的标题</p><p>作用：让页面拥有一个属于自己的标题。</p><p>body标签：文档的主体  以后我们的页面内容 基本都是放到body里面的</p><p>body 元素包含文档的所有内容（比如文本、超链接、图像、表格和列表等等。）</p></blockquote><h4 id="5-HTML标签分类"><a href="#5-HTML标签分类" class="headerlink" title="5.HTML标签分类"></a>5.HTML标签分类</h4><p>（1）双标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）单标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-HTML标签关系"><a href="#6-HTML标签关系" class="headerlink" title="6.HTML标签关系"></a>6.HTML标签关系</h4><p>（1）嵌套关系</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）并列关系</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7-文档类型-lt-DOCTYPE-gt"><a href="#7-文档类型-lt-DOCTYPE-gt" class="headerlink" title="7.文档类型&lt;!DOCTYPE&gt;"></a>7.文档类型&lt;!DOCTYPE&gt;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure><p>&lt;!DOCTYPE&gt; 标签位于文档的最前面，用于向浏览器说明当前文档使用哪种 HTML 或 XHTML 标准规范，必需在开头处使用&lt;!DOCTYPE&gt;标签为所有的XHTML文档指定XHTML版本和类型，只有这样浏览器才能按指定的文档类型进行解析。</p><h4 id="8-字符集"><a href="#8-字符集" class="headerlink" title="8.字符集"></a>8.字符集</h4><p>utf-8是目前最常用的字符集编码方式，常用的字符集编码方式还有gbk和gb2312。</p><p>gb2312 简单中文  包括6763个汉字</p><p>BIG5   繁体中文 港澳台等用</p><p>GBK包含全部中文字符    是GB2312的扩展，加入对繁体字的支持，兼容GB2312</p><p>UTF-8则包含全世界所有国家需要用到的字符</p><h4 id="9-HTML常用标签"><a href="#9-HTML常用标签" class="headerlink" title="9.HTML常用标签"></a>9.HTML常用标签</h4><h6 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;、&lt;h2&gt;、&lt;h3&gt;、&lt;h4&gt;、&lt;h5&gt;和&lt;h6&gt;</span><br></pre></td></tr></table></figure><p>标题标签语义：  作为标题使用，并且依据重要性递减</p><p>基本语法格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hn</span>&gt;</span>   标题文本   <span class="tag">&lt;/<span class="name">hn</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>  文本内容  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标签语义：文章分段</p><h6 id="水平线标签"><a href="#水平线标签" class="headerlink" title="水平线标签"></a>水平线标签</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标签语义：将段落与段落之间隔开，使得文档结构清晰，层次分明</p><h6 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="10-图像标签"><a href="#10-图像标签" class="headerlink" title="10.图像标签"></a>10.图像标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"图像URL"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h6 id="标签属性："><a href="#标签属性：" class="headerlink" title="标签属性："></a>标签属性：</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> 属性<span class="attr">1</span>=<span class="string">"属性值1"</span> 属性<span class="attr">2</span>=<span class="string">"属性值2"</span> …&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在上面的语法中：</span><br><span class="line">1.标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。</span><br><span class="line">2.属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</span><br><span class="line">3.任何标签的属性都有默认值，省略该属性则取默认值。</span><br><span class="line">采取  键值对 的格式   key="value"  的格式</span><br></pre></td></tr></table></figure><h6 id="img属性"><a href="#img属性" class="headerlink" title="img属性"></a>img属性</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">属性属性值描述</span><br><span class="line">src URL   路径</span><br><span class="line">alt 文本     不能显示时替换的文本</span><br><span class="line">title    文本       鼠标悬停的内容</span><br><span class="line">width  px        宽度</span><br><span class="line">height   px        高度</span><br><span class="line">border   数字       图像边框宽度</span><br></pre></td></tr></table></figure><h4 id="11-链接标签"><a href="#11-链接标签" class="headerlink" title="11.链接标签"></a>11.链接标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口的弹出方式&quot;&gt;文本或图像&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">href：用于指定链接目标的url地址，当为标签应用href属性时，它就具有了超链接的功能。  Hypertext Reference的缩写。意思是超文本引用</span><br><span class="line"></span><br><span class="line">target：用于指定链接页面的打开方式，其取值有self和blank两种，其中self为默认值，blank为在新窗口中打开方式</span><br></pre></td></tr></table></figure><blockquote><p>1.外部链接 需要添加 http:// <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p><p>2.内部链接 直接链接内部页面名称即可 比如 &lt; a href=”index.html”&gt; 首页 </p><p>3.如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=”#”)，表示该链接暂时为一个空链接。</p><p>4.不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。</p></blockquote><h4 id="12-base标签"><a href="#12-base标签" class="headerlink" title="12.base标签"></a>12.base标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">"blank/self"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标签语义：设置链接打开方式窗口是新建还是覆盖</p><h4 id="13-锚点定位"><a href="#13-锚点定位" class="headerlink" title="13.锚点定位"></a>13.锚点定位</h4><p>通过创建锚点，快速定位到目标内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.使用“a href=”#id名&gt;“链接文本"<span class="tag">&lt;/<span class="name">a</span>&gt;</span>创建链接文本（被点击的）</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#two"</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line">2.使用相应的id名标注跳转目标的位置。</span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"two"</span>&gt;</span>第2集<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="14-注释标签"><a href="#14-注释标签" class="headerlink" title="14.注释标签"></a>14.注释标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--注释语句--&gt; Ctrl+/</span><br></pre></td></tr></table></figure><p>注释的两个作用：</p><p>1.让部分代码不让浏览器执行</p><p>2.给程序员友好的提示</p><h4 id="15-列表标签"><a href="#15-列表标签" class="headerlink" title="15.列表标签"></a>15.列表标签</h4><h6 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ol><li><p><ul></ul>中只能嵌套<li></li>，直接在<ul></ul>标签中输入其他标签或者文字的做法是不被允许的。</p></li><li><p><li>与</li>之间相当于一个容器，可以容纳所有元素。</p></li><li><p>无序列表会带有自己样式属性，放下那个样式，一会让CSS来！</p></li></ol></blockquote><h6 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。</p><h4 id="16-表格"><a href="#16-表格" class="headerlink" title="16.表格"></a>16.表格</h4><h6 id="创建表格"><a href="#创建表格" class="headerlink" title="创建表格"></a>创建表格</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>1.table用于定义一个表格。</p><p>2.tr 用于定义表格中的一行，必须嵌套在 table标签中，在 table中包含几对 tr，就有几行表格。</p><p>3.td /td：用于定义表格中的单元格，必须嵌套在<tr></tr>标签中，一对 <tr> </tr>中包含几对<td></td>，就表示该行中有多少列（或多少个单元格）。</p></blockquote><p>注意：</p><ol><li><tr></tr>中只能嵌套<td></td></li><li><td></td>标签，他就像一个容器，可以容纳所有的元素</li></ol><h6 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h6><p>border：设置表格边框的宽度（默认border=’0’）</p><p>cellspacing：单元格与单元格之间的空白间距</p><p>cellspadding：单元格内容与边框之间的空白间距</p><p>width：表格宽度</p><p>height：表格高度</p><p>align：表格在网页中的水平对齐方式（left,right,center）</p><h6 id="表头标签"><a href="#表头标签" class="headerlink" title="表头标签"></a>表头标签</h6><p>表头一般位于表格的第一行或第一列，其文本加粗居中，如下图所示，即为设置了表头的表格。设置表头非常简单，只需用表头标签&lt;th&gt;&lt;/th&gt;替代相应的单元格标签&lt;td&gt;&lt;/td&gt;即可。</p><h6 id="表格结构"><a href="#表格结构" class="headerlink" title="表格结构"></a>表格结构</h6><blockquote><p>在使用表格进行布局时，可以将表格划分为头部、主体和页脚（页脚因为有兼容性问题，我们不在赘述），具体 如下所示：</p><p><thead></thead>：用于定义表格的头部。</p><p>必须位于<table></table> 标签中，一般包含网页的logo和导航等头部信息。</p><p><tbody></tbody>：用于定义表格的主体。</p><p>位于<table></table>标签中，一般包含网页中除头部和底部之外的其他内容。</p></blockquote><h6 id="表格标题"><a href="#表格标题" class="headerlink" title="表格标题"></a>表格标题</h6><p>caption</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">caption</span>&gt;</span>我是表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="合并表格"><a href="#合并表格" class="headerlink" title="合并表格"></a>合并表格</h6><p>跨行合并：rowspan（跨多少行删多少行）</p><p>跨列合并：colspan（跨多少行删多少行）</p><h4 id="17-div-span标签"><a href="#17-div-span标签" class="headerlink" title="17.div span标签"></a>17.div span标签</h4><blockquote><p>div在浏览器中表示一个小区域，不会增加任何的效果改变，而是语义变了，div中所有子元素是在一个小区域中。div是一个容器，里面什么都能放，设置包括它自己 。</p><p>span也是表示一个小区域，但是只能是文本级别的区域，也就是span中只能够放文字、图片、表单元素等信息。</p><p>现在的网页开发基本都是用div+css布局实现的。</p></blockquote><h6 id="div和span的使用"><a href="#div和span的使用" class="headerlink" title="div和span的使用"></a>div和span的使用</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>中国主要城市<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>美国主要城市<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>伦敦<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>纽约<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">   商品简介，商品简介</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">””</span>&gt;</span>详细信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">””</span>&gt;</span>购买<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="18-内联元素和块级元素"><a href="#18-内联元素和块级元素" class="headerlink" title="18.内联元素和块级元素"></a>18.内联元素和块级元素</h4><blockquote><ol><li>div标签（独占一行 block） （div,form,table,p,pre,h1~h6,dl,ol,ul）<br>特点：块级元素独占一行，可以设置宽度和高度。如果不设置宽度，则默认宽度为父元素的宽度。</li><li>span标签（占一块 inline）(span,a,label ,select)<br>特点：所有元素在一行显示。不能设置宽高。默认宽度为文字或者内容本身的宽度。</li><li>行内块元素（inline-block）  (image  input)<br>特点：所有元素在一行显示，可以设置宽高(具备块级元素的特征，也具备行内元素的特征)。</li></ol></blockquote><h4 id="19-表单标签"><a href="#19-表单标签" class="headerlink" title="19.表单标签"></a>19.表单标签</h4><blockquote><p>包括表单控件，提示信息，表单域</p></blockquote><blockquote><p>表单控件： 包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。</p><p>提示信息： 一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。</p><p>表单域： 他相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。</p></blockquote><h6 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h6><p>在HTML中，form标签被用于定义表单域，即创建一个表单，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。创建表单的基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"url地址"</span> <span class="attr">method</span>=<span class="string">"提交方式"</span> <span class="attr">name</span>=<span class="string">"表单名称"</span>&gt;</span></span><br><span class="line">  各种表单控件</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>常用属性：</p><ol><li><p>Action<br>在表单收集到信息后，需要将信息传递给服务器进行处理，action属性用于指定接收并处理表单数据的服务器程序的url地址。</p></li><li><p>method<br>用于设置表单数据的提交方式，其取值为get或post。</p></li><li><p>name绝对路径以Web站点根目录为参考基础的目录路径。之所以称为绝对，意指当所有网页引用同一个文件时，所使用的路径都是一样的</p><p>“D:\web\img\logo.gif”，或完整的网络地址，例如“<a href="http://www.igeek.cn/images/logo.gif”。" target="_blank" rel="noopener">http://www.igeek.cn/images/logo.gif”。</a></p></li><li><p>用于指定表单的名称，以区分同一个页面中的多个表单。</p></li></ol><p>注意：  每个表单都应该有自己表单域。</p><h6 id="input控件"><a href="#input控件" class="headerlink" title="input控件"></a>input控件</h6><p>text属性</p><p><code>&lt;input type=”text”&gt;</code></p><p>定义单行的输入字段，用户可在其中输入文本。默认宽度为 20 个字符。</p><p>其它常用属性:</p><p>l     name:定义标签名称</p><p>l     value:定义标签值</p><p>l     size:定义输入字符的长度（可以输入超过指定长度的字符，但只会显示指定个数）</p><p>l     maxlength:定义可输入最大字符个数</p><p>l     placeholder: 占位文字</p><hr><p>password</p><p><code>&lt;input type=”password”&gt;</code></p><p>定义密码字段。该字段中的字符被掩码.</p><p>其它常用属性:</p><p>l     name:定义标签名称</p><p>l     value:定义标签值</p><p>l     size:定义输入字段的长度</p><p>l     maxlength:定义可输入最大字符个数</p><hr><p>radio</p><p><code>&lt;input type=”radio”&gt;</code></p><p>定义单选按钮。</p><p>其它常用属性:</p><p>l     name:定义标签名称.注意，对于单选按钮，如果要想做到单一选择，多个radion的name值必一样。</p><p>l     value:定义标签值</p><p>l     checked:定义该标签默认被选中。</p><hr><p>checkbox</p><p><code>&lt;input type=”checkbox”&gt;</code></p><p>定义复选框。</p><p>其它常用属性:</p><p>l     name:定义标签名称.注意，一组的checkbox它们的name值应该是一样的。</p><p>l     value:定义标签值</p><p>l     checked:定义该标签默认被选中。</p><hr><p>file</p><p><code>&lt;input type=”file”&gt;</code></p><p>定义输入字段和 “浏览”按钮，供文件上传。</p><p>其它常用属性:</p><p>l     name:定义标签名称</p><hr><p>button</p><p><code>&lt;input type=”button”&gt;</code></p><p>定义可点击按钮（多数情况下，用于通过JavaScript 启动脚本，如果不写什么也不发生）</p><p>其它常用属性:</p><p>l     name:定义标签名称</p><p>l     value:按钮显示名称</p><hr><p>submit</p><input type="submit"><p>定义提交按钮。提交按钮会把表单数据发送到服务器。</p><p>其它常用属性:</p><p>l     name:定义标签名称</p><p>l     value:按钮显示名称</p><hr><p>reset</p><input type="reset"><p>定义重置按钮。重置按钮会清除表单中的所有数据。</p><p>其它常用属性:</p><p>l     name:定义标签名称</p><p>l     value:按钮显示名称</p><hr><p>img</p><p>定义图像形式的提交按钮。</p><p>这个标签主要是用了替换submit按钮，因为默认产生的提交按钮并不漂亮，这个标签允许你采用指定的图片做为提交按钮。</p><p>其它常用属性:</p><p>l     name:定义标签名称</p><p>l     src:定义作为提交按钮显示的图像的url</p><p>l     alt:定义作用图像的替代文本。</p><hr><p>绝对路径以Web站点根目录为参考基础的目录路径。之所以称为绝对，意指当所有网页引用同一个文件时，所使用的路径都是一样的</p><p>“D:\web\img\logo.gif”，或完整的网络地址，例如“<a href="http://www.igeek.cn/images/logo.gif”。hidden" target="_blank" rel="noopener">http://www.igeek.cn/images/logo.gif”。hidden</a></p><p>&lt;inputtype=”hidden”&gt;</p><p>定义隐藏的输入字段。提交时服务端需要用到的信息，但是又不想让用户看到</p><p>常用属性:</p><p>l     name: 定义标签名称</p><p>l     value:定义标签值</p><hr><h4 id="20-label标签"><a href="#20-label标签" class="headerlink" title="20.label标签"></a>20.label标签</h4><p>label 标签为 input 元素定义标注（标签）。</p><p>作用：  用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点</p><p>如何绑定元素呢？</p><p>for 属性规定 label 与哪个表单元素绑定。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"male"</span> <span class="attr">value</span>=<span class="string">"male"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="21-textarea控件"><a href="#21-textarea控件" class="headerlink" title="21.textarea控件"></a>21.textarea控件</h4><p>如果需要输入大量的信息，就需要用到&lt;textarea&gt;&lt;/textarea&gt;标签。通过textarea控件可以轻松地创建多行文本输入框，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"每行中的字符数"</span> <span class="attr">rows</span>=<span class="string">"显示的行数"</span>&gt;</span></span><br><span class="line">  文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="22-下拉菜单"><a href="#22-下拉菜单" class="headerlink" title="22.下拉菜单"></a>22.下拉菜单</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"select"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span> <span class="attr">size</span>=<span class="string">"6"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"wx"</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>无锡<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"wz"</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>苏州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"sh"</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"ks"</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>昆山<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>&lt;select&gt;&lt;/select&gt;中至少应包含一对&lt;option&gt;&lt;/option&gt;。</li><li>在option 中定义selected =” selected “时，当前项即为默认选中项。</li></ol><h4 id="23-其他标签"><a href="#23-其他标签" class="headerlink" title="23.其他标签"></a>23.其他标签</h4><h6 id="上标下标"><a href="#上标下标" class="headerlink" title="上标下标"></a>上标下标</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">This text contains <span class="tag">&lt;<span class="name">sub</span>&gt;</span>subscript<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">This text contains <span class="tag">&lt;<span class="name">sup</span>&gt;</span>superscript<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="pre标签（照原样输出）"><a href="#pre标签（照原样输出）" class="headerlink" title="pre标签（照原样输出）"></a>pre标签（照原样输出）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre&gt;</span><br><span class="line">        这是</span><br><span class="line">        预格式文本。</span><br><span class="line">        它保留了      空格</span><br><span class="line">        和换行。</span><br><span class="line">&lt;/pre&gt;</span><br></pre></td></tr></table></figure><h6 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h6><p>iframe 元素会创建包含另外一个文档的内联框架（即行内框架）。可以理解为浏览器中的浏览器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iframe 元素会创建包含另外一个文档的内联框架（即行内框架）。可以理解为浏览器中的浏览器</span><br></pre></td></tr></table></figure><h4 id="24-路径"><a href="#24-路径" class="headerlink" title="24.路径"></a>24.路径</h4><h6 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h6><p>以引用文件之网页所在位置为参考基础，而建立出的目录路径。因此，当保存于不同目录的网页引用同一个文件时，所使用的路径将不相同，故称之为相对路径。</p><ol><li><p>图像文件和HTML文件位于同一文件夹：只需输入图像文件的名称即可，如&lt;img src=”logo.gif” /&gt;。</p></li><li><p>图像文件位于HTML文件的下一级文件夹：输入文件夹名和文件名，之间用“/”隔开，如&lt;img src=”img/img01/logo.gif” /&gt;。</p></li><li><p>图像文件位于HTML文件的上一级文件夹：在文件名之前加入“../” ，如果是上两级，则需要使用 “../ ../”，以此类推，如&lt;img src=”../logo.gif” /&gt;。</p></li></ol><h6 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h6><p>绝对路径以Web站点根目录为参考基础的目录路径。之所以称为绝对，意指当所有网页引用同一个文件时，所使用的路径都是一样的</p><p>“D:\web\img\logo.gif”，或完整的网络地址，例如“<a href="http://www.igeek.cn/images/logo.gif”。" target="_blank" rel="noopener">http://www.igeek.cn/images/logo.gif”。</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建完整流程</title>
      <link href="/passages/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/"/>
      <url>/passages/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一，准备工作"><a href="#一，准备工作" class="headerlink" title="一，准备工作"></a>一，准备工作</h2><h5 id="1-了解Hexo"><a href="#1-了解Hexo" class="headerlink" title="1.了解Hexo"></a>1.了解Hexo</h5><p><a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">Hexo</a>是高效的静态站点生成框架，它基于Node.js。 通过 Hexo 你可以使用Markdown 编写文章。</p><h5 id="2-搭建Node-js环境"><a href="#2-搭建Node-js环境" class="headerlink" title="2.搭建Node.js环境"></a>2.搭建Node.js环境</h5><p>搭建博客网站首先需要安装Node.js环境。</p><p>下载地址：<a href="http://nodejs.cn/download" target="_blank" rel="noopener">http://nodejs.cn/download</a> </p><p>测试安装：命令行使用<code>node -v</code> 、<code>npm -v</code>，查看显示版本号即成功。</p><blockquote><p>Ps:大部分同学装的node版本是之前提供的5.0.0多的 hexo的初始化步骤中会出现报错，需要重新装最新的版本（10.0.0多的）</p></blockquote><h5 id="3-安装Hexo博客框架工具"><a href="#3-安装Hexo博客框架工具" class="headerlink" title="3.安装Hexo博客框架工具"></a>3.安装Hexo博客框架工具</h5><p>Hexo是一个建站工具，可以帮助我们快速生成基本的博客文件，安装它需要在控制台下（Windows+R+<code>cmd</code>）使用如下命令：</p><p><code>npm install hexo-cli -g</code></p><h5 id="4-安装Git版本工具"><a href="#4-安装Git版本工具" class="headerlink" title="4.安装Git版本工具"></a>4.安装Git版本工具</h5><p>Git是目前世界上最流行的分布式版本控制系统</p><p>使用Git可以帮助我们把本地的网页和文章等内容提交到Github上，实现同步。 </p><p>下载地址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a>  </p><p>测试安装:右击鼠标，如果有</p><p><code>Git GUI here</code></p><p><code>Git Bash here</code></p><p>两个选项 即安装成功。</p><h5 id="5-注册Github账号"><a href="#5-注册Github账号" class="headerlink" title="5.注册Github账号"></a>5.注册Github账号</h5><p>gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。这里用到Github，是因为我们需要通过Github得到自己的博客网站域名，而且需要使用gitHub同步我们个人博客的相关文件。 </p><p> 注册地址：<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a> </p><h2 id="二，开始搭建博客"><a href="#二，开始搭建博客" class="headerlink" title="二，开始搭建博客"></a>二，开始搭建博客</h2><h5 id="1-开启Github服务"><a href="#1-开启Github服务" class="headerlink" title="1.开启Github服务"></a>1.开启Github服务</h5><p>通过Github Pages获得一个免费使用的域名，这需要我们在Github上新建一个仓库，如下：</p><p><img src="/passages/Hexo博客搭建完整流程/p1.png" alt></p><blockquote><p>注意：新仓库的名字，最好是</p><p>UserName+“github.io”`</p><p>的形式。这也是之前强调的要起一个好的用户名的原因。这样之后我们最后的博客网站的链接就会是：<a href="https://UserName.github.io的形式。" target="_blank" rel="noopener">https://UserName.github.io的形式。</a></p></blockquote><p>点击<code>Create Repository</code>之后，随后选择<code>Setting</code>进入设置，找到<code>Github Pages</code>如下：</p><p><img src="/passages/Hexo博客搭建完整流程/p2.png" alt></p><p>这里我们需要点击<code>Choose a theme</code>任意选择一个选择主题，然后界面会跳转到仓库，我们看到有两个文件如下：</p><p><img src="/passages/Hexo博客搭建完整流程/p3.png" alt></p><p>再查看<code>setting</code>，我们会看到开启GitHub Pages之后得到的域名如下：</p><p><img src="/passages/Hexo博客搭建完整流程/p4.png" alt></p><p>现在，可以使用</p><p><a href>https://UserName.github.io</a></p><p>访问自己的博客网站了，打开链接我们会看到默认主题的个人博客样式如下(虽然点丑)：</p><p><img src="/passages/Hexo博客搭建完整流程/p5.png" alt></p><h5 id="2-创建本地博客站点"><a href="#2-创建本地博客站点" class="headerlink" title="2.创建本地博客站点"></a>2.创建本地博客站点</h5><p>上述的步骤相当于我们使用Github，创建了一个默认的博客页，并且得到了一个可外部访问的域名。但是这个博客页很丑。我们的目的是创建自己个性化的博客网站，所以我们使用Hexo在本地先创建一个本地博客站点，优化后再把它部署到github上。接下来我们使用控制台(Windows+R+<code>cmd</code>)命令在本地一个合适的位置右键<code>git bash here</code></p><p>输入<code>hexo init blog</code></p><p>创建博客站点文件夹如下：</p><p><img src="/passages/Hexo博客搭建完整流程/p6.png" alt></p><p>测试本地博客站点，进入blog文件夹（此即为本地博客根目录）右键<code>git bash here</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g //g是generetor的缩写，生成博客 </span><br><span class="line">hexo s //s是server的缩写，启动本地服务</span><br></pre></td></tr></table></figure><p>此时打开浏览器，输入 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，我们将会看到Hexo自带默认主题显示的博客样式如下:</p><p><img src="/passages/Hexo博客搭建完整流程/p7.png" alt></p><h5 id="3-同步Github，允许公共访问"><a href="#3-同步Github，允许公共访问" class="headerlink" title="3.同步Github，允许公共访问"></a>3.同步Github，允许公共访问</h5><blockquote><p>初次安装git需要配置用户名和邮箱，否则git会提示：</p><p>please tell me who you are.</p></blockquote><p>你需要运行命令来配置你的用户名和邮箱：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;name&quot;</span><br><span class="line">$ git config --global user.email &quot;email&quot;</span><br></pre></td></tr></table></figure><blockquote><p>注意：（引号内请输入你自己设置的名字，和你自己的邮箱）此用户名和邮箱是git提交代码时用来显示你身份和联系方式的，并不是github用户名和邮箱</p></blockquote><h5 id="4-Git配置ssh-key"><a href="#4-Git配置ssh-key" class="headerlink" title="4.Git配置ssh key"></a>4.Git配置ssh key</h5><p>在博客站点右键<code>Git bash here</code></p><p>输入<code>$  ssh-keygen -t rsa -C &quot;youremail&quot;</code></p><p>第一次生成的话，直接一路回车，不需要输入密码。不是第一次生成的话，会提示 overwrite (y/n)? 问你是否覆盖旧的 SSH Key ，直接填 y ，然后一直回车就行了，最后得到了两个文件：</p><p><strong>id_rsa和id_rsa.pub</strong>。</p><p><img src="/passages/Hexo博客搭建完整流程/p8.png" alt></p><p>记事本打开/C/Users/Administrator/.ssh/id_rsa.pub文件</p><p>复制该段信息；登录github账户，点击头像进入</p><p>Settings -&gt; SSH and GPG keys -&gt; New SSH key</p><p>将复制的信息粘贴到该处。</p><p><img src="/passages/Hexo博客搭建完整流程/p9.png" alt></p><p>测试是否成功</p><p><code>$ssh -T git@github.com</code></p><p>提示</p><p><code>Hi xxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></p><p>说明添加成功。</p><h5 id="5-部署博客"><a href="#5-部署博客" class="headerlink" title="5.部署博客"></a>5.部署博客</h5><p>在本地我们已经搭建了博客，但是还只能自己本地访问。若要别人也能看到，那就需要我们将其同步部署到GitHub上了。首先找到我们的博客仓库，并拷贝仓库地址：</p><p><img src="/passages/Hexo博客搭建完整流程/p10.png" alt></p><blockquote><p>注意：只需复制用户名之后字段</p></blockquote><p>然后修改本地博客目录的配置：<br>修改本次博客根目录下的<code>_config.yml</code>文件，修改<code>deploy</code>下的配置如下：</p><p><img src="/passages/Hexo博客搭建完整流程/p11.png" alt></p><blockquote><p>注意空格和单词不可以打错</p></blockquote><p>之后执行Git bash here命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git //安装部署插件</span><br><span class="line">hexo d //部署到github</span><br></pre></td></tr></table></figure><p>再次访问链接：<a href>https://userName.github.io</a>，就会发现这里的界面和本地的一样了。如此一来我们搭建的个人博客网站就基本完成了。</p><h2 id="三，发布博客"><a href="#三，发布博客" class="headerlink" title="三，发布博客"></a>三，发布博客</h2><h5 id="1-发布"><a href="#1-发布" class="headerlink" title="1.发布"></a>1.发布</h5><p>可以发布自己的第一篇博客了。来尝试一下以下的步骤：<br>在本地博客文件夹根目录(git bash here)输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;我个人博客的第一篇博客&quot; </span><br><span class="line">hexo g //生成网页 </span><br><span class="line">hexo d //部署到远端(github)</span><br></pre></td></tr></table></figure><p>生成的博客md文件会存放在<code>blog\source\_posts</code>文件夹内。</p><p>现在打开我们的博客网站：</p><p><a href="http://username.github.io/" target="_blank" rel="noopener">http://UserName.github.io</a></p><p>会看到网页</p><p>（显示可能有延迟 所以可以采用以下方法(git bash)：</p><p> hexo clean <em>//清理缓存</em> </p><p>hexo g <em>//重新生成博客代码</em> </p><p>hexo d <em>//部署到服务器</em></p><blockquote><p>可以用<code>hexo s</code>先查看本地情况再部署到服务器</p></blockquote><h5 id="2-Markdown写作语法"><a href="#2-Markdown写作语法" class="headerlink" title="2.Markdown写作语法"></a>2.Markdown写作语法</h5><p>推荐使用<code>Typora</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># 写作介绍</span><br><span class="line">## 1，字体介绍</span><br><span class="line">*这是斜体* 或 _这也是斜体_ </span><br><span class="line">**这是粗体**</span><br><span class="line">***这是加粗斜体***</span><br><span class="line">~~这是删除线~~</span><br><span class="line">## 2，分级标题</span><br><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br><span class="line">## 3，超链接</span><br><span class="line">写法：</span><br><span class="line"></span><br><span class="line">## 4,列表</span><br><span class="line">无序列表：</span><br><span class="line">写法：</span><br><span class="line"></span><br><span class="line">* 无序列表项1</span><br><span class="line">+ 无序列表项2</span><br><span class="line">- 无序列表项3</span><br><span class="line"></span><br><span class="line">有序列表：</span><br><span class="line">写法：</span><br><span class="line">1.有序列表项1</span><br><span class="line">2.有序列表项2</span><br><span class="line">3.有序列表项3</span><br><span class="line"></span><br><span class="line">## 5，插入图片</span><br><span class="line">在 Hexo 中插入图片，首先需要将图片放在 source/img/ 文件夹下，然后如下方式进行插入：</span><br><span class="line"></span><br><span class="line">![](url)</span><br><span class="line"></span><br><span class="line">## 6，表格</span><br><span class="line">| 表头1|表头2|表头3|表头4</span><br><span class="line">|-| :- | :-: | -: |</span><br><span class="line">|默认左对齐|左对齐|居中对其|右对齐|</span><br><span class="line">|默认左对齐|左对齐|居中对其|右对齐|</span><br><span class="line">|默认左对齐|左对齐|居中对其|右对齐|</span><br></pre></td></tr></table></figure><h2 id="四，更换主题"><a href="#四，更换主题" class="headerlink" title="四，更换主题"></a>四，更换主题</h2><p>为了让它看起来更美观一些，我们可以为其更换主题（当然也可以自己在默认主题下自己编写美化博客界面）。这里以使用github上的next主题为例</p><h5 id="1-下载主题"><a href="#1-下载主题" class="headerlink" title="1.下载主题"></a>1.下载主题</h5><p>切换到本地博客根目录下(git bash here)输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>下载成之后我们会看到next的主题已经存在thems里了如下：</p><p><img src="/passages/Hexo博客搭建完整流程/p12.png" alt></p><h5 id="2-修改博客配置文件，更换主题配置"><a href="#2-修改博客配置文件，更换主题配置" class="headerlink" title="2.修改博客配置文件，更换主题配置"></a>2.修改博客配置文件，更换主题配置</h5><p>修改博客根目录(不是next主题)下的<code>_config.yml</code>文件，搜索theme字段，并将其值修改为next</p><p><img src="/passages/Hexo博客搭建完整流程/p13.png" alt></p><p>然后在控制台（git bash）下输入如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean //清理缓存</span><br><span class="line">hexo g //重新生成博客代码 </span><br><span class="line">hexo d //部署到服务器</span><br></pre></td></tr></table></figure><p>再次打开我们的博客网站<a href>https://UserName.github.io</a>，将会看到更换的主题</p><p><img src="/passages/Hexo博客搭建完整流程/p14.png" alt></p><h2 id="主题美化后续更新……"><a href="#主题美化后续更新……" class="headerlink" title="主题美化后续更新……"></a><strong><em>主题美化后续更新……</em></strong></h2>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo搭建微博 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
