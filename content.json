{"meta":{"title":"个人博客","subtitle":null,"description":null,"author":"Unique","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"JS学习总结（一）","slug":"JS学习总结（一）","date":"2017-10-11T13:06:48.000Z","updated":"2019-04-01T13:33:07.702Z","comments":true,"path":"passages/JS学习总结（一）/","link":"","permalink":"http://yoursite.com/passages/JS学习总结（一）/","excerpt":"","text":"一，script标签书写位置1234js的代码可以分三个地方写:1.在html的文件中,script的标签中写js代码2.js代码可以在html的标签中写---3.在js文件中可以写js代码,但是需要在html的页面中引入 script的标签中的src=&quot;js的路径&quot; 二，js代码的注意问题12345678910111.在一对script的标签中有错误的js代码,那么该错误的代码后面的js代码不会执行2.如果第一对的script标签中有错误,不会影响后面的script标签中的js代码执行3.script的标签中可以写什么内容 type=&quot;text/javascript&quot;是标准写法或者写language=&quot;JavaScript&quot;都可以但是,目前在我们的html页面中,type和language都可以省略,原因:html是遵循h5的标准4.有可能会出现这种情况:script标签中可能同时出现type和language的写法.5.script标签在页面中可以出现多对6.script标签一般是放在body的标签的最后的,有的时候会在head标签中,目前讲课的时候都在body标签的后面(body中的最后)7.如果script标签是引入外部js文件的作用,那么这对标签中不要写任何的js代码,如果要写,重新写一对script标签,里面写代码 三，变量12345678910111213141516171819202122232425262728293031323334353637* 变量:========&gt;* 操作的数据都是在内存中操作* js中存储数据使用变量的方式(名字,值---&gt;数据)* js中声明变量都用var----&gt;存储数据,数据应该有对应的数据类型* js中的字符串类型的值都用双引号或者单引号** 存储一个数字10* 变量的声明及赋值* var num=10;* 存储一个名字* var name=&apos;小黑&apos;; * 变量---作用,存储数据的或者是操作数据 * * 变量声明(有var 有变量名字,没有值) * * 变量初始化(有var 有变量名字,有值) * * 变量声明的方式: //var number;//变量的声明,此时是没有赋值的, //一次性声明多个变量 //var x,y,z,k,j;//都是声明,没有赋值 //变量的初始化(变量声明的同时并且赋值了) // = 的意义:赋值的含义 //存储一个数字10 var number = 10; //存储一个5 var number2 = 5; //存储一个人的名字 var name = &quot;小黑&quot;; //存储真(true) var flag = true; //存储一个null---&gt;相当于是空 var nll = null; //存储一个对象 var obj = new Object(); * var 变量名字; 四，变量总结123456789101112131415161718192021222324252627282930313233343536373839404142434445464748* 变量作用:用来操作数据的(可以存储,可以读取) * 变量的声明:没有赋值 * var 变量名; * 变量的初始化:有赋值 * var 变量名=值; * * 注意的基本的代码的规范 * js中声明变量都用var * js中的每一行代码结束都应该有分号;(写代码有分号的习惯) * js中的大小写是区分的: var N=10; n * js中的字符串可以使用单引号,也可以使用双引号,目前我们暂时使用双引号 * * 变量名的注意问题---变量名的命名规范,要遵循驼峰命名法 * 1.变量的名字要有意义, * 2.变量名有一定的规范:一般以字母,$符号,下划线开头,中间或者后面可以有$符号,字母,数字 * 3.变量名一般都是小写的 * 4.变量名如果是多个单词,第一个单词的首字母是小写的,后面的所有的单词的首字母都是大写的,这种命名方式称为:驼峰命名法 * 5.不能使用关键字(系统自带的一些单词,不能使用) * 6.不会单词用拼音,拼音也要遵循驼峰命名法 * * var bigNumber=10; //声明变量并初始化---变量的初始化----声明变量赋值 //声明了一个num的变量存储了一个数字100 //var num=100; //输出这个变量的值 //alert(num);//弹框 //浏览器的控制台在浏览器中的开发人员工具中(快捷键:F12)的console的选项中 // console.log(num);//把内容输出在浏览器的控制台中 //声明多个变量然后一个一个的赋值// var num1,num2,num3;//声明// //依次的赋值// num1=10;// num2=20;// num3=30; //声明多个变量并且赋值 //var num1=10,num2=20,num3=30;// var num=10;// var $break=10;// var shuZi=10; 五，数字交换的三种方式123456789101112131415161718192021222324252627282930313233343536373839404142//变量的交换的第一个思路:使用第三方的变量进行交换// var num1=10;// var num2=20;// //把num1这个变量的值取出来放在temp变量中// var temp=num1;// //把num2这个变量的值取出来放在num1变量中// num1=num2;// //把temp变量的值取出来放在num2变量中// num2=temp;// console.log(num1);//20// console.log(num2);//10//第二种方式交换:一般适用于数字的交换// var num1 = 10;// var num2 = 20;// //把num1的变量中的值和num2变量中的值,取出来相加,重新赋值给num1这个变量// num1 = num1 + num2;//30// //num1变量的值和num2变量的值取出来,相减的结果重新赋值给num2// num2 = num1 - num2;//10// //num1变量的值和num2变量的值取出来,相减的结果重新赋值给num1// num1 = num1 - num2;//20// console.log(num1, num2);//Ctrl+Alt+L-----&gt;格式化代码的(设置代码有很好的格式,代码是错误的,这个快捷键是没有效果)//注意；变量的名字是不能重名// var num1=10;// var num1=20;// console.log(num1);//扩展的变量的交换:只需要看代码,不需要理解---位运算var num1 = 10;var num2 = 20;num1 = num1 ^ num2;num2 = num1 ^ num2;num1 = num1 ^ num2;console.log(num1, num2); 六，数据类型123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051//声明变量并初始化// var num=10;//js中的数据类型有哪些?//js中的原始数据类型:number,string,boolean,null,undefined,object * number:数字类型(整数和小数) * string:字符串类型(的值一般都是用单引号或者是双引号括起来) &quot;34&quot; * boolean:布尔类型(值只有两个,true(真1),false(假0)) * null:空类型,值只有一个:null,一个对象指向为空了,此时可以赋值为null * undefined:未定义,值只有一个:undefined * 什么情况下的结果是undefined * 变量声明了,没有赋值,结果是undefined * 函数没有明确返回值,如果接收了,结果也是undefined * 如果一个变量的结果是undefined和一个数字进行计算,结果:NaN不是一个数字,也没有意义 * object:对象----&gt;// var num;// console.log(num+10);//NaN-----not an number----&gt;不是一个数字// var num;// console.log(num);//如何获取这个变量的数据类型是什么? 使用typeof 来获取//typeof 的使用的语法 * 都可以获取这个变量的数据类型是什么! * typeof 变量名 * typeof(变量名)var num = 10;var str = &quot;小白&quot;;var flag = true;var nll = null;var undef;var obj = new Object();//是使用typeof 获取变量的类型console.log(typeof num);//numberconsole.log(typeof str);//stringconsole.log(typeof flag);//booleanconsole.log(String(nll));//是nullconsole.log(typeof nll);//不是nullconsole.log(typeof undef);//undefinedconsole.log(typeof obj);//objectconsole.log(typeof(num));////// console.log(&quot;10&quot;);// console.log(10); 七，数字类型1234567* 数字类型:number类型* 无论是整数还是小数都是数字类型* 不要用小数验证小数* 不要使用NaN判断是不是NaN，应该使用isNaN(值或者是变量)* 想要表示十进制:就是正常的数字* 想要表示八进制:以0开头* 想要表示十六进制:0x开头 八，字符串类型123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051//var str=&quot;10&quot;;//字符串 //var str2=&apos;20&apos;;//字符串 //字符串可以使用单引号,也可以使用双引号 //字符串的长度如何获取? 变量名.length // var str=&quot;what are you no sha lei&quot;; // //字符串的个数有多少个?这个字符串的长度是多少 // console.log(str.length); // // var str1=&quot;fdshfjworwoijpfskj;akjfpojfiwnmoiwajdoiwajiwaewowj&quot;; // console.log(str1.length); //html中的转义符: &lt; &amp;lt; &gt; &amp;gt; 空格: &amp;nbsp; //js中的字符串里也有转义符 //tab键----水平制表符 // console.log(&quot;哈哈\\\\嘎嘎&quot;); // console.log(&quot;哈哈\\t嘎嘎&quot;); // console.log(&quot;哈哈\\&quot;嘎嘎&quot;); // // // console.log(&apos;哈哈\\&apos;嘎嘎&apos;); //字符串的拼接: 使用+可以把多个字符串放在一起形成一个字符串 //只要有一个是字符串,其他的是数字,那么结果也是拼接,不是相加 //如果有一个是字符串,另一个不是字符串,使用- 号,此时会发生计算 // var str1=&quot;您好&quot;; // var str2=&quot;我好&quot;; // console.log(str1+str2); //console.log(&quot;哈哈&quot;+&quot;嘎嘎&quot;+&quot;嘿嘿&quot;); // var str1=&quot;10&quot;; // var str2=&quot;20&quot;; // console.log(str1+str2); // var str1=&quot;10&quot;; // var str2=20; // console.log(str1+str2);// var str1 = &quot;10&quot;;// var str2 = 5;// //浏览器帮助我们自动的把字符串类型转成了数字类型,这种方式叫:隐式转换// console.log(str1-str2);// var str1=&quot;10&quot;;// var str2=5;// console.log(str1*str2); 九，布尔类型12345678//布尔类型:的值有两个,一个是true(真),一个是false(假)// var flag=1;// console.log(flag);// var fdf=null;//// var num=0; 十，类型转换12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970//其他类型转数字类型:三种方式: //1.parseInt();//转整数 // console.log(parseInt(&quot;10&quot;));//10 // console.log(parseInt(&quot;10afrswfdsf&quot;));//10 // console.log(parseInt(&quot;g10&quot;));//NaN // console.log(parseInt(&quot;1fds0&quot;));//1 // console.log(parseInt(&quot;10.98&quot;));//10 // console.log(parseInt(&quot;10.98fdsfd&quot;));//10 //2.parseFloat()//转小数 // console.log(parseFloat(&quot;10&quot;));//10 // console.log(parseFloat(&quot;10afrswfdsf&quot;));//10 // console.log(parseFloat(&quot;g10&quot;));//NaN // console.log(parseFloat(&quot;1fds0&quot;));//1 // console.log(parseFloat(&quot;10.98&quot;));//10.98 // console.log(parseFloat(&quot;10.98fdsfd&quot;));//10.98 //3.Number();//转数字// console.log(Number(&quot;10&quot;));//10// console.log(Number(&quot;10afrswfdsf&quot;));//NaN// console.log(Number(&quot;g10&quot;));//NaN// console.log(Number(&quot;1fds0&quot;));//NaN// console.log(Number(&quot;10.98&quot;));//10.98// console.log(Number(&quot;10.98fdsfd&quot;));//NaN //总结:想要转整数用parseInt(),想要转小数用parseFloat() //想要转数字:Number();要比上面的两种方式严格 //其他类型转字符串类型 //1 .toString()// var num=10;// console.log(num.toString());//字符串类型// //2 String();//// var num1=20;// console.log(String(num1)); //如果变量有意义调用.toString()使用转换 //如果变量没有意义使用String()转换// var num2;// console.log(num2.toString());// var num3=null;// console.log(num3.toString()); //这个可以// var num2;// console.log(String(num2));// var num3=null;// console.log(String(num3)); //其他类型转布尔类型 //1 Boolean(值);//// console.log(Boolean(1));//true// console.log(Boolean(0));//false// console.log(Boolean(11));//true// console.log(Boolean(-10));//true// console.log(Boolean(&quot;哈哈&quot;));//true// console.log(Boolean(&quot;&quot;));//false// console.log(Boolean(null));//false// console.log(Boolean(undefined));//false// var str=10;// console.log(+str); 十一，操作符123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103* 操作符:一些符号-----用来计算 * * 算数运算符: + - * / % * 算数运算表达式:由算数运算符连接起来的表达式 * 一元运算符: 这个操作符只需要一个操作数就可以运算的符号 ++ -- * 二元运算符: 这个操作符需要两个操作数就可以运算, * 三元运算符: -----不讲,明天讲 * 复合运算符: += -= *= /= %= * 复合运算表达式:由复合运算符连接起来的表达式 * * var num=10; * num+=10;------&gt;就是:num=num+10; * console.log(num);20 * * * 关系运算符: &gt; &lt; &gt;= &lt;= ==不严格的 ===严格的 !=不严格的不等 !==严格的不等 * 关系运算表达式:由关系运算符连接起来的表达式 * 关系运算表达式的结果是布尔类型 * 逻辑运算符: * &amp;&amp;---逻辑与--并且 * ||---逻辑或---或者 * !---逻辑非---取反--取非 * 逻辑运算表达式:由逻辑运算符连接起来的表达式 * 表达式1&amp;&amp;表达式2 * 如果有一个为false,整个的结果就是false * 表达式1||表达式2 * 如果有一个为true,整个的结果为true * !表达式1 * 表达式1的结果是true,整个结果为false * 表达式1的结果是false,整个结果为true * * 赋值运算符: = * * * * // var num1=10; // var num2=20; // // console.log(num1==num2&amp;&amp;5&gt;6); // var num=20; // console.log(num&gt;10||5&lt;0); // var flag=false; // console.log(!flag); // var num=10; // var sum=(num+10)*5; // console.log(sum); // var result = (4 &gt;= 6 || &apos;人&apos; != &apos;狗&apos; &amp;&amp; !(12 * 2 == 144) &amp;&amp; true); // console.log(result);//// var num = 10;//// var result2 =( 5 == num / 2 &amp;&amp; (2 + 2 * num).toString() === &apos;22&apos;);// console.log(result2); // var num=20; // var result=num/3;//num变量与3取余---&gt;10/3的余数 // console.log(parseInt(result)); // var num=20; // var result=num%3;//num变量与3取余---&gt;10/3的余数 // console.log(result); // var num=10; // var sum=(num+10)+10; // var num = 20; // num %= 5; // // num=num-5; // console.log(num); // var str=&quot;5&quot;; // var num=5; // console.log(str===num); // console.log(5&gt;10);//false // console.log(5&gt;=5);//true // console.log(5&gt;3);//true // console.log(5==10);//false //字面量: 把一个值直接赋值给一个变量 //声明变量并初始化// var num=10;//// var flag=true;//// var str=&quot;哈哈哈&quot;;//// var y=10;// var n=y;","categories":[],"tags":[]},{"title":"Hexo博客搭建完整流程","slug":"Hexo博客搭建完整流程","date":"2017-10-03T02:59:27.000Z","updated":"2019-04-01T09:20:26.606Z","comments":true,"path":"passages/Hexo博客搭建完整流程/","link":"","permalink":"http://yoursite.com/passages/Hexo博客搭建完整流程/","excerpt":"","text":"一，准备工作1.了解HexoHexo是高效的静态站点生成框架，它基于Node.js。 通过 Hexo 你可以使用Markdown 编写文章。 2.搭建Node.js环境搭建博客网站首先需要安装Node.js环境。 下载地址：http://nodejs.cn/download 测试安装：命令行使用node -v 、npm -v，查看显示版本号即成功。 Ps:大部分同学装的node版本是之前提供的5.0.0多的 hexo的初始化步骤中会出现报错，需要重新装最新的版本（10.0.0多的） 3.安装Hexo博客框架工具Hexo是一个建站工具，可以帮助我们快速生成基本的博客文件，安装它需要在控制台下（Windows+R+cmd）使用如下命令： npm install hexo-cli -g 4.安装Git版本工具Git是目前世界上最流行的分布式版本控制系统 使用Git可以帮助我们把本地的网页和文章等内容提交到Github上，实现同步。 下载地址：https://git-scm.com/downloads 测试安装:右击鼠标，如果有 Git GUI here Git Bash here 两个选项 即安装成功。 5.注册Github账号gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。这里用到Github，是因为我们需要通过Github得到自己的博客网站域名，而且需要使用gitHub同步我们个人博客的相关文件。 注册地址：https://github.com 二，开始搭建博客1.开启Github服务通过Github Pages获得一个免费使用的域名，这需要我们在Github上新建一个仓库，如下： 注意：新仓库的名字，最好是 UserName+“github.io”` 的形式。这也是之前强调的要起一个好的用户名的原因。这样之后我们最后的博客网站的链接就会是：https://UserName.github.io的形式。 点击Create Repository之后，随后选择Setting进入设置，找到Github Pages如下： 这里我们需要点击Choose a theme任意选择一个选择主题，然后界面会跳转到仓库，我们看到有两个文件如下： 再查看setting，我们会看到开启GitHub Pages之后得到的域名如下： 现在，可以使用 https://UserName.github.io 访问自己的博客网站了，打开链接我们会看到默认主题的个人博客样式如下(虽然点丑)： 2.创建本地博客站点上述的步骤相当于我们使用Github，创建了一个默认的博客页，并且得到了一个可外部访问的域名。但是这个博客页很丑。我们的目的是创建自己个性化的博客网站，所以我们使用Hexo在本地先创建一个本地博客站点，优化后再把它部署到github上。接下来我们使用控制台(Windows+R+cmd)命令在本地一个合适的位置右键git bash here 输入hexo init blog 创建博客站点文件夹如下： 测试本地博客站点，进入blog文件夹（此即为本地博客根目录）右键git bash here： 12hexo g //g是generetor的缩写，生成博客 hexo s //s是server的缩写，启动本地服务 此时打开浏览器，输入 http://localhost:4000/，我们将会看到Hexo自带默认主题显示的博客样式如下: 3.同步Github，允许公共访问 初次安装git需要配置用户名和邮箱，否则git会提示： please tell me who you are. 你需要运行命令来配置你的用户名和邮箱： 12$ git config --global user.name &quot;name&quot;$ git config --global user.email &quot;email&quot; 注意：（引号内请输入你自己设置的名字，和你自己的邮箱）此用户名和邮箱是git提交代码时用来显示你身份和联系方式的，并不是github用户名和邮箱 4.Git配置ssh key在博客站点右键Git bash here 输入$ ssh-keygen -t rsa -C &quot;youremail&quot; 第一次生成的话，直接一路回车，不需要输入密码。不是第一次生成的话，会提示 overwrite (y/n)? 问你是否覆盖旧的 SSH Key ，直接填 y ，然后一直回车就行了，最后得到了两个文件： id_rsa和id_rsa.pub。 记事本打开/C/Users/Administrator/.ssh/id_rsa.pub文件 复制该段信息；登录github账户，点击头像进入 Settings -&gt; SSH and GPG keys -&gt; New SSH key 将复制的信息粘贴到该处。 测试是否成功 $ssh -T git@github.com 提示 Hi xxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 说明添加成功。 5.部署博客在本地我们已经搭建了博客，但是还只能自己本地访问。若要别人也能看到，那就需要我们将其同步部署到GitHub上了。首先找到我们的博客仓库，并拷贝仓库地址： 注意：只需复制用户名之后字段 然后修改本地博客目录的配置：修改本次博客根目录下的_config.yml文件，修改deploy下的配置如下： 注意空格和单词不可以打错 之后执行Git bash here命令： 12npm install hexo-deployer-git //安装部署插件hexo d //部署到github 再次访问链接：https://userName.github.io，就会发现这里的界面和本地的一样了。如此一来我们搭建的个人博客网站就基本完成了。 三，发布博客1.发布可以发布自己的第一篇博客了。来尝试一下以下的步骤：在本地博客文件夹根目录(git bash here)输入： 123hexo new &quot;我个人博客的第一篇博客&quot; hexo g //生成网页 hexo d //部署到远端(github) 生成的博客md文件会存放在blog\\source\\_posts文件夹内。 现在打开我们的博客网站： http://UserName.github.io 会看到网页 （显示可能有延迟 所以可以采用以下方法(git bash)： hexo clean //清理缓存 hexo g //重新生成博客代码 hexo d //部署到服务器 可以用hexo s先查看本地情况再部署到服务器 2.Markdown写作语法推荐使用Typora 1234567891011121314151617181920212223242526272829303132333435363738394041# 写作介绍## 1，字体介绍*这是斜体* 或 _这也是斜体_ **这是粗体*****这是加粗斜体***~~这是删除线~~## 2，分级标题# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题## 3，超链接写法：## 4,列表无序列表：写法：* 无序列表项1+ 无序列表项2- 无序列表项3有序列表：写法：1.有序列表项12.有序列表项23.有序列表项3## 5，插入图片在 Hexo 中插入图片，首先需要将图片放在 source/img/ 文件夹下，然后如下方式进行插入：![](url)## 6，表格| 表头1|表头2|表头3|表头4|-| :- | :-: | -: ||默认左对齐|左对齐|居中对其|右对齐||默认左对齐|左对齐|居中对其|右对齐||默认左对齐|左对齐|居中对其|右对齐| 四，更换主题为了让它看起来更美观一些，我们可以为其更换主题（当然也可以自己在默认主题下自己编写美化博客界面）。这里以使用github上的next主题为例 1.下载主题切换到本地博客根目录下(git bash here)输入 1$ git clone https://github.com/iissnan/hexo-theme-next themes/next 下载成之后我们会看到next的主题已经存在thems里了如下： 2.修改博客配置文件，更换主题配置修改博客根目录(不是next主题)下的_config.yml文件，搜索theme字段，并将其值修改为next 然后在控制台（git bash）下输入如下命令 123hexo clean //清理缓存hexo g //重新生成博客代码 hexo d //部署到服务器 再次打开我们的博客网站https://UserName.github.io，将会看到更换的主题 主题美化后续更新……","categories":[],"tags":[{"name":"Hexo搭建微博","slug":"Hexo搭建微博","permalink":"http://yoursite.com/tags/Hexo搭建微博/"}]}]}